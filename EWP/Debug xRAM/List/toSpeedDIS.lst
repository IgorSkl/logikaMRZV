###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:47:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\IAR projects\HR1_0100_00_I720_new2\toSpeedDIS.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\toSpeedDIS.c" -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --interwork --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\toSpeedDIS.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\toSpeedDIS.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\toSpeedDIS.c
      1          
      2          //#include <TCHAR.H >
      3          
      4          #include <stdio.h>
      5          #include <string.h>
      6          
      7          #include "psuperVisor\supermanager.h"
      8          
      9          #include "bazisdef.h"
     10          #include "component\componentdef.h"
     11          
     12          #include "logictimers\logictimersmac.h"
     13          
     14          #include "logictimers\logictimersfnc.h"
     15          #include "virtualMenu\systemmenufnc.h"
     16          #include "virtualMenu\rangmanagerfnc.h"
     17          #include "virtualMenu\textstreamfnc.h"
     18          #include "psuperVisor\psvisor_helpfnc.h"
     19          
     20          #include "virtualMenu\repozitfnc.h"
     21          
     22          #include "SettingIci\SettingIci.h"
     23          
     24          #include "..\bazis.h"
     25          
     26          #include "toSpeedOptim.h"
     27          #include "toSpeedDIS.h"
     28          
     29          #define _HIDE_COMPONENT
     30          #include "PRM1Component.c"
     31          
     32          extern int offsetTimersPRM1;//смещение на таймерный индекс
     33          extern COMPONENT_OBJ  cnfCOMPONENT[];
     34          extern int  logMassTimer[];
     35          extern UNS_32 pActualCMD[];//текущие
     36          
     37          UNS_32 pUROVcmdMaska[DQUADRO];//определение ЗапускУРОВ
     38          UNS_32 pAPVcmdMaska[DQUADRO];//определение ЗапускАПВ
     39          //UNS_32 pAPVcmdActual[DQUADRO];//ЗапускАПВ Actual
     40          //UNS_32 pUROVcmdActual[DQUADRO];//ЗапускУРОВ Actual
     41          //UNS_32 pAPVcmdOld[DQUADRO];//ЗапускАПВ Old
     42          //UNS_32 pUROVcmdOld[DQUADRO];//ЗапускУРОВ Old
     43           MaskaOTAPVUROVOFcmd struct_maskaOTAPVUROVOFcmd;//маски для 16 опред функций UROV APV OT
     44           MaskaOTcmd struct_maskaOTcmd;//маски для 8 опред триггер
     45          //----------------------------------------
     46          int puskAPV, puskUROV, pusk1OF, pusk2OF, pusk3OF;
     47          int pusk1OF2, pusk2OF2, pusk3OF2;
     48          int pusk1OF3, pusk2OF3, pusk3OF3;
     49          int pusk1OF4, pusk2OF4, pusk3OF4;
     50          int pusk1OF5, pusk2OF5, pusk3OF5;
     51          int pusk1OF6, pusk2OF6, pusk3OF6;
     52          int pusk1OF7, pusk2OF7, pusk3OF7;
     53          int pusk1OF8, pusk2OF8, pusk3OF8;
     54          int pusk1OF9, pusk2OF9, pusk3OF9;
     55          int pusk1OF10, pusk2OF10, pusk3OF10;
     56          int pusk1OF11, pusk2OF11, pusk3OF11;
     57          int pusk1OF12, pusk2OF12, pusk3OF12;
     58          int pusk1OF13, pusk2OF13, pusk3OF13;
     59          int pusk1OF14, pusk2OF14, pusk3OF14;
     60          int pusk1OF15, pusk2OF15, pusk3OF15;
     61          int pusk1OF16, pusk2OF16, pusk3OF16;
     62          
     63          int pusk1OT1, pusk2OT1;
     64          int pusk1OT2, pusk2OT2;
     65          int pusk1OT3, pusk2OT3;
     66          int pusk1OT4, pusk2OT4;
     67          int pusk1OT5, pusk2OT5;
     68          int pusk1OT6, pusk2OT6;
     69          int pusk1OT7, pusk2OT7;
     70          int pusk1OT8, pusk2OT8;
     71          
     72          /*
     73          int pusk1OT1_old, pusk2OT1_old;
     74          int pusk1OT2_old, pusk2OT2_old;
     75          int pusk1OT3_old, pusk2OT3_old;
     76          int pusk1OT4_old, pusk2OT4_old;
     77          int pusk1OT5_old, pusk2OT5_old;
     78          int pusk1OT6_old, pusk2OT6_old;
     79          int pusk1OT7_old, pusk2OT7_old;
     80          int pusk1OT8_old, pusk2OT8_old;
     81          */
     82          
     83          int rst1OT1, rst2OT1;
     84          int rst1OT2, rst2OT2;
     85          int rst1OT3, rst2OT3;
     86          int rst1OT4, rst2OT4;
     87          int rst1OT5, rst2OT5;
     88          int rst1OT6, rst2OT6;
     89          int rst1OT7, rst2OT7;
     90          int rst1OT8, rst2OT8;
     91          
     92          /*
     93          int rst1OT1_old, rst2OT1_old;
     94          int rst1OT2_old, rst2OT2_old;
     95          int rst1OT3_old, rst2OT3_old;
     96          int rst1OT4_old, rst2OT4_old;
     97          int rst1OT5_old, rst2OT5_old;
     98          int rst1OT6_old, rst2OT6_old;
     99          int rst1OT7_old, rst2OT7_old;
    100          int rst1OT8_old, rst2OT8_old;
    101          
    102          int setOT1DV_old;
    103          int setOT2DV_old;
    104          int setOT3DV_old;
    105          int setOT4DV_old;
    106          int setOT5DV_old;
    107          int setOT6DV_old;
    108          int setOT7DV_old;
    109          int setOT8DV_old;
    110          
    111          int resOT1DV_old;
    112          int resOT2DV_old;
    113          int resOT3DV_old;
    114          int resOT4DV_old;
    115          int resOT5DV_old;
    116          int resOT6DV_old;
    117          int resOT7DV_old;
    118          int resOT8DV_old;
    119          */
    120          
    121          int OTout[8];//Выходы OT
    122          
    123          UNS_32 pRDIScmdMaska[DQUADRO];//РегистрацияДИС
    124          UNS_32 pRDIScmdActual[DQUADRO];//РегистрацияДИС AND Текущие
    125          UNS_32 pRDIScmdOld[DQUADRO];//РегистрацияДИС AND Текущие old
    126          UNS_32 oldDIS[DQUADRO];
    127          UNS_32 act_oldDIS[DQUADRO];
    128          
    129          int activityDISold=0;//TRG DIS
    130          int activitySEAMold=0;//TRG SEAM
    131          REGISTRATOR_DIS registrator_dis;//массив ДИС
    132          
    133          void pullReleBO() @ "Fast_function"
    134          {
    135          //тянуть реле на БО
    136          extern UNS_32 rele_bdvv1;//селекция реле
    137          extern UNS_32 rele_bdbo_old;//селекция реле
    138          extern UNS_32 maskaReleBO;
    139          
    140           int tmpOffsetT = offsetTimersPRM1;//смещение на таймерный индекс PRM1
    141          
    142           //нисходящий фронт
    143            int focusReleBO =(
    144              (rele_bdvv1^rele_bdbo_old)&rele_bdbo_old//селекция реле
    145               )&maskaReleBO;
    146            rele_bdbo_old = rele_bdvv1;
    147          
    148           int tmp=0;
    149           if(focusReleBO){
    150             tmp = 1;
    151           }//if
    152          
    153           LSIGNAL_TIMER(TIMER_RELEBO) = tmp;//таймер БО
    154           int timlog = FLOG_TIMER(TIMER_RELEBO);
    155           if(timlog){
    156            //таймер активный - тянуть
    157            rele_bdvv1 |= maskaReleBO;
    158           }//if
    159          }//pullReleBO()
    160          
    161          void pullReleBV() @ "Fast_function"
    162          {
    163          //тянуть реле на БB
    164          extern UNS_32 rele_bdvv1;//селекция реле
    165          extern UNS_32 rele_bdbv_old;//селекция реле
    166          extern UNS_32 maskaReleBO, maskaReleBV;
    167          
    168           int tmpOffsetT = offsetTimersPRM1;//смещение на таймерный индекс PRM1
    169          
    170           //восходящий фронт
    171            int focusReleBV =(
    172              (rele_bdvv1^rele_bdbv_old)&rele_bdvv1//селекция реле
    173               )&maskaReleBV;
    174            rele_bdbv_old = rele_bdvv1;
    175          
    176           int tmp=0;
    177           if(focusReleBV){
    178             tmp = 1;
    179           }//if
    180          
    181           LSIGNAL_TIMER(TIMER_RELEBV) = tmp;//таймер БB
    182           int timlog = FLOG_TIMER(TIMER_RELEBV);
    183           if(timlog){
    184            //таймер активный - тянуть
    185            rele_bdvv1 |= maskaReleBV;
    186           }//if
    187          }//pullReleBV()
    188          
    189          void PuskAPV_UROV_OFWorking() @ "Fast_function"
    190          {
    191          //пуск АПВ УРОВ ОФ
    192           puskAPV = puskUROV = pusk1OF = pusk2OF = pusk3OF = 0;
    193          pusk1OF2 = pusk2OF2 = pusk3OF2 = 0;
    194          pusk1OF3 = pusk2OF3 = pusk3OF3 = 0;
    195          pusk1OF4 = pusk2OF4 = pusk3OF4 = 0;
    196          pusk1OF5 = pusk2OF5 = pusk3OF5 = 0;
    197          pusk1OF6 = pusk2OF6 = pusk3OF6 = 0;
    198          pusk1OF7 = pusk2OF7 = pusk3OF7 = 0;
    199          pusk1OF8 = pusk2OF8 = pusk3OF8 = 0;
    200          pusk1OF9 = pusk2OF9 = pusk3OF9 = 0;
    201          pusk1OF10 = pusk2OF10 = pusk3OF10 = 0;
    202          pusk1OF11 = pusk2OF11 = pusk3OF11 = 0;
    203          pusk1OF12 = pusk2OF12 = pusk3OF12 = 0;
    204          pusk1OF13 = pusk2OF13 = pusk3OF13 = 0;
    205          pusk1OF14 = pusk2OF14 = pusk3OF14 = 0;
    206          pusk1OF15 = pusk2OF15 = pusk3OF15 = 0;
    207          pusk1OF16 = pusk2OF16 = pusk3OF16 = 0;
    208          
    209          pusk1OT1  = pusk2OT1 = 0;//set PLUS MINUS
    210          rst1OT1  = rst2OT1 = 0;//rst PLUS MINUS
    211          
    212          pusk1OT2  = pusk2OT2 = 0;//set PLUS MINUS
    213          rst1OT2  = rst2OT2 = 0;//rst PLUS MINUS
    214          pusk1OT3  = pusk2OT3 = 0;//set PLUS MINUS
    215          rst1OT3  = rst2OT3 = 0;//rst PLUS MINUS
    216          pusk1OT4  = pusk2OT4 = 0;//set PLUS MINUS
    217          rst1OT4  = rst2OT4 = 0;//rst PLUS MINUS
    218          pusk1OT5  = pusk2OT5 = 0;//set PLUS MINUS
    219          rst1OT5  = rst2OT5 = 0;//rst PLUS MINUS
    220          pusk1OT6  = pusk2OT6 = 0;//set PLUS MINUS
    221          rst1OT6  = rst2OT6 = 0;//rst PLUS MINUS
    222          pusk1OT7  = pusk2OT7 = 0;//set PLUS MINUS
    223          rst1OT7  = rst2OT7 = 0;//rst PLUS MINUS
    224          pusk1OT8  = pusk2OT8 = 0;//set PLUS MINUS8
    225          rst1OT8  = rst2OT8 = 0;//rst PLUS MINUS
    226          
    227           //ЗапускАПВ big EL
    228          // if(MakeAPVcmdPusk())
    229             if(CheckActualCMD(pAPVcmdMaska))
    230                  puskAPV = 1;
    231           //ЗапускУРОВ big EL
    232             if(CheckActualCMD(pUROVcmdMaska)) puskUROV = 1;
    233          
    234           //Запуск1ОФ
    235           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OFcmdMaska))  pusk1OF  = 1;
    236           //Запуск2ОФ
    237           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OFcmdMaska))  pusk2OF  = 1;
    238           //Запуск3ОФ
    239           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OFcmdMaska))  pusk3OF  = 1;
    240          
    241           //Запуск1ОФ2
    242           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF2cmdMaska))  pusk1OF2  = 1;
    243           //Запуск2ОФ2
    244           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF2cmdMaska))  pusk2OF2  = 1;
    245           //Запуск3ОФ2
    246           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF2cmdMaska))  pusk3OF2  = 1;
    247          
    248           //Запуск1ОФ3
    249           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF3cmdMaska))  pusk1OF3  = 1;
    250           //Запуск2ОФ3
    251           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF3cmdMaska))  pusk2OF3  = 1;
    252           //Запуск3ОФ3
    253           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF3cmdMaska))  pusk3OF3  = 1;
    254          
    255           //Запуск1ОФ4
    256           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF4cmdMaska))  pusk1OF4  = 1;
    257           //Запуск2ОФ4
    258           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF4cmdMaska))  pusk2OF4  = 1;
    259           //Запуск3ОФ4
    260           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF4cmdMaska))  pusk3OF4  = 1;
    261          
    262           //Запуск1ОФ5
    263           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF5cmdMaska))  pusk1OF5  = 1;
    264           //Запуск2ОФ5
    265           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF5cmdMaska))  pusk2OF5  = 1;
    266           //Запуск3ОФ5
    267           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF5cmdMaska))  pusk3OF5  = 1;
    268          
    269           //Запуск1ОФ6
    270           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF6cmdMaska))  pusk1OF6  = 1;
    271           //Запуск2ОФ6
    272           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF6cmdMaska))  pusk2OF6  = 1;
    273           //Запуск3ОФ6
    274           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF6cmdMaska))  pusk3OF6  = 1;
    275          
    276           //Запуск1ОФ7
    277           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF7cmdMaska))  pusk1OF7  = 1;
    278           //Запуск2ОФ7
    279           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF7cmdMaska))  pusk2OF7  = 1;
    280           //Запуск3ОФ7
    281           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF7cmdMaska))  pusk3OF7  = 1;
    282          
    283           //Запуск1ОФ8
    284           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF8cmdMaska))  pusk1OF8  = 1;
    285           //Запуск2ОФ8
    286           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF8cmdMaska))  pusk2OF8  = 1;
    287           //Запуск3ОФ8
    288           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF8cmdMaska))  pusk3OF8  = 1;
    289          
    290           //Запуск1ОФ9
    291           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF9cmdMaska))  pusk1OF9  = 1;
    292           //Запуск2ОФ9
    293           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF9cmdMaska))  pusk2OF9  = 1;
    294           //Запуск3ОФ9
    295           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF9cmdMaska))  pusk3OF9  = 1;
    296          
    297           //Запуск1ОФ10
    298           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF10cmdMaska))  pusk1OF10  = 1;
    299           //Запуск2ОФ10
    300           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF10cmdMaska))  pusk2OF10  = 1;
    301           //Запуск3ОФ10
    302           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF10cmdMaska))  pusk3OF10  = 1;
    303          
    304           //Запуск1ОФ11
    305           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF11cmdMaska))  pusk1OF11  = 1;
    306           //Запуск2ОФ11
    307           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF11cmdMaska))  pusk2OF11  = 1;
    308           //Запуск3ОФ11
    309           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF11cmdMaska))  pusk3OF11  = 1;
    310          
    311           //Запуск1ОФ12
    312           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF12cmdMaska))  pusk1OF12  = 1;
    313           //Запуск2ОФ12
    314           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF12cmdMaska))  pusk2OF12  = 1;
    315           //Запуск3ОФ12
    316           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF12cmdMaska))  pusk3OF12  = 1;
    317          
    318           //Запуск1ОФ13
    319           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF13cmdMaska))  pusk1OF13  = 1;
    320           //Запуск2ОФ13
    321           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF13cmdMaska))  pusk2OF13  = 1;
    322           //Запуск3ОФ13
    323           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF13cmdMaska))  pusk3OF13  = 1;
    324          
    325           //Запуск1ОФ14
    326           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF14cmdMaska))  pusk1OF14  = 1;
    327           //Запуск2ОФ14
    328           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF14cmdMaska))  pusk2OF14  = 1;
    329           //Запуск3ОФ14
    330           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF14cmdMaska))  pusk3OF14  = 1;
    331          
    332           //Запуск1ОФ15
    333           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF15cmdMaska))  pusk1OF15  = 1;
    334           //Запуск2ОФ15
    335           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF15cmdMaska))  pusk2OF15  = 1;
    336           //Запуск3ОФ15
    337           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF15cmdMaska))  pusk3OF15  = 1;
    338          
    339           //Запуск1ОФ16
    340           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF16cmdMaska))  pusk1OF16  = 1;
    341           //Запуск2ОФ16
    342           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF16cmdMaska))  pusk2OF16  = 1;
    343           //Запуск3ОФ16
    344           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF16cmdMaska))  pusk3OF16  = 1;
    345          //------------OT---------------
    346           //Запуск1SetOT1
    347           if(CheckActualCMD(struct_maskaOTcmd.pP1OT1cmdMaska))  pusk1OT1  = 1;//set PLUS
    348           //Запуск2SetOT1
    349           if(CheckActualCMD(struct_maskaOTcmd.pP2OT1cmdMaska))  rst1OT1  = 1;//res PLUS
    350           //Запуск3SetOT1
    351           if(CheckActualCMD(struct_maskaOTcmd.pP3OT1cmdMaska))  pusk2OT1  = 1;//set MINUS
    352           //Запуск4SetOT1
    353           if(CheckActualCMD(struct_maskaOTcmd.pP4OT1cmdMaska))  rst2OT1  = 1;//res MINUS
    354          
    355           //Запуск1SetOT2
    356           if(CheckActualCMD(struct_maskaOTcmd.pP1OT2cmdMaska))  pusk1OT2  = 1;//set PLUS
    357           //Запуск2SetOT2
    358           if(CheckActualCMD(struct_maskaOTcmd.pP2OT2cmdMaska))  rst1OT2  = 1;//res PLUS
    359           //Запуск3SetOT2
    360           if(CheckActualCMD(struct_maskaOTcmd.pP3OT2cmdMaska))  pusk2OT2  = 1;//set MINUS
    361           //Запуск4SetOT2
    362           if(CheckActualCMD(struct_maskaOTcmd.pP4OT2cmdMaska))  rst2OT2  = 1;//res MINUS
    363          
    364            //Запуск1SetOT3
    365           if(CheckActualCMD(struct_maskaOTcmd.pP1OT3cmdMaska))  pusk1OT3  = 1;//set PLUS
    366           //Запуск2SetOT3
    367           if(CheckActualCMD(struct_maskaOTcmd.pP2OT3cmdMaska))  rst1OT3  = 1;//res PLUS
    368           //Запуск3SetOT3
    369           if(CheckActualCMD(struct_maskaOTcmd.pP3OT3cmdMaska))  pusk2OT3  = 1;//set MINUS
    370           //Запуск4SetOT1
    371           if(CheckActualCMD(struct_maskaOTcmd.pP4OT3cmdMaska))  rst2OT3  = 1;//res MINUS
    372          
    373            //Запуск1SetOT4
    374           if(CheckActualCMD(struct_maskaOTcmd.pP1OT4cmdMaska))  pusk1OT4  = 1;//set PLUS
    375           //Запуск2SetOT4
    376           if(CheckActualCMD(struct_maskaOTcmd.pP2OT4cmdMaska))  rst1OT4  = 1;//res PLUS
    377           //Запуск3SetOT4
    378           if(CheckActualCMD(struct_maskaOTcmd.pP3OT4cmdMaska))  pusk2OT4  = 1;//set MINUS
    379           //Запуск4SetOT4
    380           if(CheckActualCMD(struct_maskaOTcmd.pP4OT4cmdMaska))  rst2OT4  = 1;//res MINUS
    381          
    382           //Запуск1SetOT5
    383           if(CheckActualCMD(struct_maskaOTcmd.pP1OT5cmdMaska))  pusk1OT5  = 1;//set PLUS
    384           //Запуск2SetOT5
    385           if(CheckActualCMD(struct_maskaOTcmd.pP2OT5cmdMaska))  rst1OT5  = 1;//res PLUS
    386           //Запуск3SetOT5
    387           if(CheckActualCMD(struct_maskaOTcmd.pP3OT5cmdMaska))  pusk2OT5  = 1;//set MINUS
    388           //Запуск4SetOT5
    389           if(CheckActualCMD(struct_maskaOTcmd.pP4OT5cmdMaska))  rst2OT5  = 1;//res MINUS
    390          
    391           //Запуск1SetOT6
    392           if(CheckActualCMD(struct_maskaOTcmd.pP1OT6cmdMaska))  pusk1OT6  = 1;//set PLUS
    393           //Запуск2SetOT6
    394           if(CheckActualCMD(struct_maskaOTcmd.pP2OT6cmdMaska))  rst1OT6  = 1;//res PLUS
    395           //Запуск3SetOT6
    396           if(CheckActualCMD(struct_maskaOTcmd.pP3OT6cmdMaska))  pusk2OT6  = 1;//set MINUS
    397           //Запуск4SetOT6
    398           if(CheckActualCMD(struct_maskaOTcmd.pP4OT6cmdMaska))  rst2OT6  = 1;//res MINUS
    399           
    400            //Запуск1SetOT7
    401           if(CheckActualCMD(struct_maskaOTcmd.pP1OT7cmdMaska))  pusk1OT7  = 1;//set PLUS
    402           //Запуск2SetOT7
    403           if(CheckActualCMD(struct_maskaOTcmd.pP2OT7cmdMaska))  rst1OT7  = 1;//res PLUS
    404           //Запуск3SetOT7
    405           if(CheckActualCMD(struct_maskaOTcmd.pP3OT7cmdMaska))  pusk2OT7  = 1;//set MINUS
    406           //Запуск4SetOT7
    407           if(CheckActualCMD(struct_maskaOTcmd.pP4OT7cmdMaska))  rst2OT7  = 1;//res MINUS
    408          
    409            //Запуск1SetOT8
    410           if(CheckActualCMD(struct_maskaOTcmd.pP1OT8cmdMaska))  pusk1OT8  = 1;//set PLUS
    411           //Запуск2SetOT8
    412           if(CheckActualCMD(struct_maskaOTcmd.pP2OT8cmdMaska))  rst1OT8  = 1;//res PLUS
    413           //Запуск3SetOT8
    414           if(CheckActualCMD(struct_maskaOTcmd.pP3OT8cmdMaska))  pusk2OT8  = 1;//set MINUS
    415           //Запуск4SetOT8
    416           if(CheckActualCMD(struct_maskaOTcmd.pP4OT8cmdMaska))  rst2OT8  = 1;//res MINUS
    417          
    418          }//PuskAPV_UROV_OFWorking()
    419          
    420          void DiskretRegWorking() @ "Fast_function"
    421          {
    422          //работа дискр регистратора
    423           int tmpOffsetT = offsetTimersPRM1;//смещение на таймерный индекс PRM1
    424           LSIGNAL_TIMER(TIMERDIS_PRM1) = 0;//таймер ДИС
    425           //запускающий сигнал для миним таймер DIS
    426           LSIGNAL_TIMER(TIMER_MINDIS_PRM1) = 0;//миним таймер DIS
    427           int isDISbusy = getTimerBUSY(tmpOffsetT+TIMERDIS_PRM1);//есть активность DIS
    428          
    429           if(MakeRDIScmdPusk()){//проверить РегистрацияДИС на запускbig EL
    430             if(isDISbusy);//есть активность DIS
    431             else {
    432                    //запускающий сигнал для миним таймер DIS
    433                    LSIGNAL_TIMER(TIMER_MINDIS_PRM1) = 1;//миним таймер DIS
    434                    StartDiscretReg();//процедура старта Рег ДИС
    435                   }
    436             //запускающий сигнал для таймера num
    437             LSIGNAL_TIMER(TIMERDIS_PRM1) = 1;//запустить таймер ДИС
    438           }//if(MakeRDIScmdActual())
    439             else {
    440             //нет активности DIS
    441              memcpy(act_oldDIS, pActualCMD, 4*DQUADRO);//запомнить текущие
    442             }
    443             int activityDISact = isActivityDIS();//проверка таймерной активности ДИС
    444             //EL TRG down front
    445             int activityDIStrg = (activityDISact^activityDISold)&activityDISold;
    446             activityDISold = activityDISact;
    447             LSIGNAL_TIMER(TIMER_SEAM_PRM1) = activityDIStrg;//таймер сшивки SEAM
    448             int activitySEAMact = FLOG_TIMER(TIMER_SEAM_PRM1);//таймер сшивки SEAM
    449             //EL TRG down front
    450             int activitySEAMtrg = (activitySEAMact^activitySEAMold)&activitySEAMold;
    451             activitySEAMold = activitySEAMact;
    452             int activitySEAMstop = (activityDISact^1) & activitySEAMtrg;
    453             if(registrator_dis.title_dis.len_dis>(SIZE_DIS-2)) activitySEAMstop = 1;//принуд стоп
    454          //таймер формирователь со сбросом - по восх фронту
    455             FLOG_TIMERRES(TIMERDIS_PRM1, activitySEAMstop);
    456          //таймер формирователь по восх фронту
    457             FLOG_TIMER(TIMER_MINDIS_PRM1);//миним таймер DIS
    458          
    459             if(getTimerBUSY(tmpOffsetT+TIMERDIS_PRM1)){//bazisTimerMem[tmpOffsetT+TIMERDIS_PRM1].BUSY){//есть активность DIS
    460               //сравнить текущие и старые
    461               if(memcmp(oldDIS, pActualCMD, 4*DQUADRO)){
    462                //есть различия
    463                registrator_dis.bodyDIS[registrator_dis.title_dis.len_dis].reltime =
    464                       //относит время
    465                       getTimerCrr(tmpOffsetT+TIMERDIS_PRM1);
    466                       //bazisTimerMem[tmpOffsetT+TIMERDIS_PRM1].crrCNT;
    467                memcpy(registrator_dis.bodyDIS[registrator_dis.title_dis.len_dis].pActualCMD, 
    468                          pActualCMD, 4*DQUADRO);//копировать текущие
    469                registrator_dis.title_dis.len_dis++;//размер массив ДИС
    470               }//if(memcmp(oldDIS, pActualCMD, 4*DQUADRO))
    471               memcpy(oldDIS, pActualCMD, 4*DQUADRO);//запомнить текущие
    472             }//if(isDISbusy)
    473          
    474          }//DiskretRegWorking()
    475          
    476          int isActivityDIS() @ "Fast_function"
    477          {
    478          //проверка активности ДИС
    479            int tmp = 0;
    480            while (cnfCOMPONENT[tmp].componentEnable)
    481            {
    482              if(cnfCOMPONENT[tmp].isDISactiv(tmp)) return 1;
    483              tmp++;
    484            }//while
    485            return 0;
    486          }//isActivityDIS()
    487          
    488          void StartDiscretReg() @ "Fast_function"
    489          {
    490          //процедура старта Рег ДИС
    491           registrator_dis.title_dis.len_dis=0;//длина масс ДИС
    492           memcpy(registrator_dis.title_dis.oldDIS, act_oldDIS, 4*DQUADRO);//перекопировать текущие
    493           memset(oldDIS, 0, 4*DQUADRO);//обнулить
    494          
    495           registrator_dis.title_dis.title_year = 1;
    496           registrator_dis.title_dis.title_mon  = 1;
    497           registrator_dis.title_dis.title_date = 1;
    498           registrator_dis.title_dis.title_hour = 1;
    499           registrator_dis.title_dis.title_min  = 1;
    500           registrator_dis.title_dis.title_sec  = 1;
    501          
    502          }//StartDiscretReg()
    503          
    504          int MakeRDIScmdPusk()  @ "Fast_function"
    505          {
    506          //проверить РегистрацияДИС на запуск
    507            UNS_32 tmpM[DQUADRO];
    508            UNS_32 tmpI=0;
    509            for(int i=0; i<DQUADRO; i++) 
    510                    pRDIScmdActual[i]=pRDIScmdMaska[i]&pActualCMD[i];//РегистрацияДИС AND Текущие
    511            //Большой EL
    512            for(int i=0; i<DQUADRO; i++) 
    513                    tmpM[i]=(pRDIScmdActual[i]^pRDIScmdOld[i])&pRDIScmdActual[i];
    514            for(int i=0; i<DQUADRO; i++) 
    515                    pRDIScmdOld[i]=pRDIScmdActual[i];
    516          
    517            for(int i=0; i<DQUADRO; i++) 
    518                    tmpI|=tmpM[i];
    519            return tmpI;
    520          }//MakeRDIScmdPusk
    521          /*
    522          int MakeAPVcmdPusk() @ "Fast_function"
    523          {
    524          //проверить APV на запуск
    525            UNS_32 tmpM[DQUADRO];
    526            UNS_32 tmpI=0;
    527            for(int i=0; i<DQUADRO; i++) 
    528                    pAPVcmdActual[i]=pAPVcmdMaska[i]&pActualCMD[i];//РегистрацияДИС AND Текущие
    529            //Большой EL инверсный
    530            for(int i=0; i<DQUADRO; i++) 
    531                    tmpM[i]=(pAPVcmdActual[i]^pAPVcmdOld[i])&pAPVcmdOld[i];
    532            for(int i=0; i<DQUADRO; i++) 
    533                    pAPVcmdOld[i]=pAPVcmdActual[i];
    534          
    535            for(int i=0; i<DQUADRO; i++) 
    536                    tmpI|=tmpM[i];
    537            return tmpI;
    538          }//MakeAPVcmdPusk
    539          
    540          int MakeUROVcmdPusk() @ "Fast_function"
    541          {
    542          //проверить UROV на запуск
    543            UNS_32 tmpM[DQUADRO];
    544            UNS_32 tmpI=0;
    545            for(int i=0; i<DQUADRO; i++) 
    546                    pUROVcmdActual[i]=pUROVcmdMaska[i]&pActualCMD[i];//РегистрацияДИС AND Текущие
    547            //Большой EL
    548            for(int i=0; i<DQUADRO; i++) 
    549                    tmpM[i]=(pUROVcmdActual[i]^pUROVcmdOld[i])&pUROVcmdActual[i];
    550            for(int i=0; i<DQUADRO; i++) 
    551                    pUROVcmdOld[i]=pUROVcmdActual[i];
    552          
    553            for(int i=0; i<DQUADRO; i++) 
    554                    tmpI|=tmpM[i];
    555            return tmpI;
    556          }//MakeUROVcmdPusk
    557          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   DiskretRegWorking
        48   -> FLogTimer
        48   -> FLogTimerRES
        48   -> MakeRDIScmdPusk
        48   -> StartDiscretReg
        48   -> __aeabi_memcpy
        48   -> getTimerBUSY
        48   -> getTimerCrr
        48   -> isActivityDIS
        48   -> memcmp
      40   MakeRDIScmdPusk
       8   PuskAPV_UROV_OFWorking
         8   -> CheckActualCMD
         8   -> CheckActualCMDInv
      24   StartDiscretReg
        24   -> __aeabi_memcpy
        24   -> __aeabi_memset
       8   isActivityDIS
         8   -- Indirect call
      16   pullReleBO
        16   -> FLogTimer
      16   pullReleBV
        16   -> FLogTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_27
       4  ??DataTable2_28
       4  ??DataTable2_29
       4  ??DataTable2_3
       4  ??DataTable2_30
       4  ??DataTable2_31
       4  ??DataTable2_32
       4  ??DataTable2_33
       4  ??DataTable2_34
       4  ??DataTable2_35
       4  ??DataTable2_36
       4  ??DataTable2_37
       4  ??DataTable2_38
       4  ??DataTable2_39
       4  ??DataTable2_4
       4  ??DataTable2_40
       4  ??DataTable2_41
       4  ??DataTable2_42
       4  ??DataTable2_43
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_34
       4  ??DataTable6_35
       4  ??DataTable6_36
       4  ??DataTable6_37
       4  ??DataTable6_38
       4  ??DataTable6_39
       4  ??DataTable6_4
       4  ??DataTable6_40
       4  ??DataTable6_41
       4  ??DataTable6_42
       4  ??DataTable6_43
       4  ??DataTable6_44
       4  ??DataTable6_45
       4  ??DataTable6_46
       4  ??DataTable6_47
       4  ??DataTable6_48
       4  ??DataTable6_49
       4  ??DataTable6_5
       4  ??DataTable6_50
       4  ??DataTable6_51
       4  ??DataTable6_52
       4  ??DataTable6_53
       4  ??DataTable6_54
       4  ??DataTable6_55
       4  ??DataTable6_56
       4  ??DataTable6_57
       4  ??DataTable6_58
       4  ??DataTable6_59
       4  ??DataTable6_6
       4  ??DataTable6_60
       4  ??DataTable6_61
       4  ??DataTable6_62
       4  ??DataTable6_63
       4  ??DataTable6_64
       4  ??DataTable6_65
       4  ??DataTable6_66
       4  ??DataTable6_67
       4  ??DataTable6_68
       4  ??DataTable6_69
       4  ??DataTable6_7
       4  ??DataTable6_70
       4  ??DataTable6_71
       4  ??DataTable6_72
       4  ??DataTable6_73
       4  ??DataTable6_74
       4  ??DataTable6_8
       4  ??DataTable6_9
     504  DiskretRegWorking
     232  MakeRDIScmdPusk
      32  OTout
    3216  PuskAPV_UROV_OFWorking
     148  StartDiscretReg
      40  act_oldDIS
       4  activityDISold
       4  activitySEAMold
      84  isActivityDIS
      40  oldDIS
      40  pAPVcmdMaska
      40  pRDIScmdActual
      40  pRDIScmdMaska
      40  pRDIScmdOld
      40  pUROVcmdMaska
     156  pullReleBO
     156  pullReleBV
       4  pusk1OF
       4  pusk1OF10
       4  pusk1OF11
       4  pusk1OF12
       4  pusk1OF13
       4  pusk1OF14
       4  pusk1OF15
       4  pusk1OF16
       4  pusk1OF2
       4  pusk1OF3
       4  pusk1OF4
       4  pusk1OF5
       4  pusk1OF6
       4  pusk1OF7
       4  pusk1OF8
       4  pusk1OF9
       4  pusk1OT1
       4  pusk1OT2
       4  pusk1OT3
       4  pusk1OT4
       4  pusk1OT5
       4  pusk1OT6
       4  pusk1OT7
       4  pusk1OT8
       4  pusk2OF
       4  pusk2OF10
       4  pusk2OF11
       4  pusk2OF12
       4  pusk2OF13
       4  pusk2OF14
       4  pusk2OF15
       4  pusk2OF16
       4  pusk2OF2
       4  pusk2OF3
       4  pusk2OF4
       4  pusk2OF5
       4  pusk2OF6
       4  pusk2OF7
       4  pusk2OF8
       4  pusk2OF9
       4  pusk2OT1
       4  pusk2OT2
       4  pusk2OT3
       4  pusk2OT4
       4  pusk2OT5
       4  pusk2OT6
       4  pusk2OT7
       4  pusk2OT8
       4  pusk3OF
       4  pusk3OF10
       4  pusk3OF11
       4  pusk3OF12
       4  pusk3OF13
       4  pusk3OF14
       4  pusk3OF15
       4  pusk3OF16
       4  pusk3OF2
       4  pusk3OF3
       4  pusk3OF4
       4  pusk3OF5
       4  pusk3OF6
       4  pusk3OF7
       4  pusk3OF8
       4  pusk3OF9
       4  puskAPV
       4  puskUROV
    4456  registrator_dis
       4  rst1OT1
       4  rst1OT2
       4  rst1OT3
       4  rst1OT4
       4  rst1OT5
       4  rst1OT6
       4  rst1OT7
       4  rst1OT8
       4  rst2OT1
       4  rst2OT2
       4  rst2OT3
       4  rst2OT4
       4  rst2OT5
       4  rst2OT6
       4  rst2OT7
       4  rst2OT8
    1920  struct_maskaOTAPVUROVOFcmd
    1280  struct_maskaOTcmd

 
 8 304 bytes in section .bss
 5 232 bytes in section Fast_function
 
 5 232 bytes of CODE memory
 8 304 bytes of DATA memory

Errors: none
Warnings: none
