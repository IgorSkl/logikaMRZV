###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Oct/2015  17:17:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\toSpeedDIS.c
#    Command line =  
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\toSpeedDIS.c" -lcN "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\"
#        -o "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "D:\Program Files\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\Igor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\component\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\" --interwork
#        --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\toSpeedDIS.lst
#    Object file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\toSpeedDIS.o
#
###############################################################################

D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\toSpeedDIS.c
      1          
      2          //#include <TCHAR.H >
      3          
      4          #include <stdio.h>
      5          #include <string.h>
      6          
      7          #include "psuperVisor\supermanager.h"
      8          
      9          #include "bazisdef.h"
     10          #include "component\componentdef.h"
     11          
     12          #include "logictimers\logictimersmac.h"
     13          
     14          #include "logictimers\logictimersfnc.h"
     15          #include "virtualMenu\systemmenufnc.h"
     16          #include "virtualMenu\rangmanagerfnc.h"
     17          #include "virtualMenu\textstreamfnc.h"
     18          #include "psuperVisor\psvisor_helpfnc.h"
     19          
     20          #include "virtualMenu\repozitfnc.h"
     21          
     22          #include "SettingIci\SettingIci.h"
     23          
     24          #include "..\bazis.h"
     25          
     26          #include "toSpeedOptim.h"
     27          #include "toSpeedDIS.h"
     28          
     29          #define _HIDE_COMPONENT
     30          #include "PRM1Component.c"
     31          
     32          extern int offsetTimersPRM1;//смещение на таймерный индекс
     33          extern COMPONENT_OBJ  cnfCOMPONENT[];
     34          extern int  logMassTimer[];
     35          extern UNS_32 pActualCMD[];//текущие
     36          
     37          UNS_32 pUROVcmdMaska[DQUADRO];//определение ЗапускУРОВ
     38          UNS_32 pAPVcmdMaska[DQUADRO];//определение ЗапускАПВ
     39          //UNS_32 pAPVcmdActual[DQUADRO];//ЗапускАПВ Actual
     40          //UNS_32 pUROVcmdActual[DQUADRO];//ЗапускУРОВ Actual
     41          //UNS_32 pAPVcmdOld[DQUADRO];//ЗапускАПВ Old
     42          //UNS_32 pUROVcmdOld[DQUADRO];//ЗапускУРОВ Old
     43           MaskaOTAPVUROVOFcmd struct_maskaOTAPVUROVOFcmd;//маски для 16 опред функций UROV APV OT
     44           MaskaOTcmd struct_maskaOTcmd;//маски для 8 опред триггер
     45          //----------------------------------------
     46          int puskAPV, puskUROV, pusk1OF, pusk2OF, pusk3OF;
     47          int pusk1OF2, pusk2OF2, pusk3OF2;
     48          int pusk1OF3, pusk2OF3, pusk3OF3;
     49          int pusk1OF4, pusk2OF4, pusk3OF4;
     50          int pusk1OF5, pusk2OF5, pusk3OF5;
     51          int pusk1OF6, pusk2OF6, pusk3OF6;
     52          int pusk1OF7, pusk2OF7, pusk3OF7;
     53          int pusk1OF8, pusk2OF8, pusk3OF8;
     54          int pusk1OF9, pusk2OF9, pusk3OF9;
     55          int pusk1OF10, pusk2OF10, pusk3OF10;
     56          int pusk1OF11, pusk2OF11, pusk3OF11;
     57          int pusk1OF12, pusk2OF12, pusk3OF12;
     58          int pusk1OF13, pusk2OF13, pusk3OF13;
     59          int pusk1OF14, pusk2OF14, pusk3OF14;
     60          int pusk1OF15, pusk2OF15, pusk3OF15;
     61          int pusk1OF16, pusk2OF16, pusk3OF16;
     62          
     63          int pusk1OT1, pusk2OT1;
     64          int pusk1OT2, pusk2OT2;
     65          int pusk1OT3, pusk2OT3;
     66          int pusk1OT4, pusk2OT4;
     67          int pusk1OT5, pusk2OT5;
     68          int pusk1OT6, pusk2OT6;
     69          int pusk1OT7, pusk2OT7;
     70          int pusk1OT8, pusk2OT8;
     71          
     72          int pusk1OT1_old, pusk2OT1_old;
     73          int pusk1OT2_old, pusk2OT2_old;
     74          int pusk1OT3_old, pusk2OT3_old;
     75          int pusk1OT4_old, pusk2OT4_old;
     76          int pusk1OT5_old, pusk2OT5_old;
     77          int pusk1OT6_old, pusk2OT6_old;
     78          int pusk1OT7_old, pusk2OT7_old;
     79          int pusk1OT8_old, pusk2OT8_old;
     80          
     81          int rst1OT1, rst2OT1;
     82          int rst1OT2, rst2OT2;
     83          int rst1OT3, rst2OT3;
     84          int rst1OT4, rst2OT4;
     85          int rst1OT5, rst2OT5;
     86          int rst1OT6, rst2OT6;
     87          int rst1OT7, rst2OT7;
     88          int rst1OT8, rst2OT8;
     89          
     90          int rst1OT1_old, rst2OT1_old;
     91          int rst1OT2_old, rst2OT2_old;
     92          int rst1OT3_old, rst2OT3_old;
     93          int rst1OT4_old, rst2OT4_old;
     94          int rst1OT5_old, rst2OT5_old;
     95          int rst1OT6_old, rst2OT6_old;
     96          int rst1OT7_old, rst2OT7_old;
     97          int rst1OT8_old, rst2OT8_old;
     98          
     99          int OTout[8];//Выходы OT
    100          
    101          UNS_32 pRDIScmdMaska[DQUADRO];//РегистрацияДИС
    102          UNS_32 pRDIScmdActual[DQUADRO];//РегистрацияДИС AND Текущие
    103          UNS_32 pRDIScmdOld[DQUADRO];//РегистрацияДИС AND Текущие old
    104          UNS_32 oldDIS[DQUADRO];
    105          UNS_32 act_oldDIS[DQUADRO];
    106          
    107          int activityDISold=0;//TRG DIS
    108          int activitySEAMold=0;//TRG SEAM
    109          REGISTRATOR_DIS registrator_dis;//массив ДИС
    110          
    111          void pullReleBO() @ "Fast_function"
    112          {
    113          //тянуть реле на БО
    114          extern UNS_32 rele_bdvv1;//селекция реле
    115          extern UNS_32 rele_bdbo_old;//селекция реле
    116          extern UNS_32 maskaReleBO;
    117          
    118           int tmpOffsetT = offsetTimersPRM1;//смещение на таймерный индекс PRM1
    119          
    120           //нисходящий фронт
    121            int focusReleBO =(
    122              (rele_bdvv1^rele_bdbo_old)&rele_bdbo_old//селекция реле
    123               )&maskaReleBO;
    124            rele_bdbo_old = rele_bdvv1;
    125          
    126           int tmp=0;
    127           if(focusReleBO){
    128             tmp = 1;
    129           }//if
    130          
    131           LSIGNAL_TIMER(TIMER_RELEBO) = tmp;//таймер БО
    132           int timlog = FLOG_TIMER(TIMER_RELEBO);
    133           if(timlog){
    134            //таймер активный - тянуть
    135            rele_bdvv1 |= maskaReleBO;
    136           }//if
    137          }//pullReleBO()
    138          
    139          void pullReleBV() @ "Fast_function"
    140          {
    141          //тянуть реле на БB
    142          extern UNS_32 rele_bdvv1;//селекция реле
    143          extern UNS_32 rele_bdbv_old;//селекция реле
    144          extern UNS_32 maskaReleBO, maskaReleBV;
    145          
    146           int tmpOffsetT = offsetTimersPRM1;//смещение на таймерный индекс PRM1
    147          
    148           //восходящий фронт
    149            int focusReleBV =(
    150              (rele_bdvv1^rele_bdbv_old)&rele_bdvv1//селекция реле
    151               )&maskaReleBV;
    152            rele_bdbv_old = rele_bdvv1;
    153          
    154           int tmp=0;
    155           if(focusReleBV){
    156             tmp = 1;
    157           }//if
    158          
    159           LSIGNAL_TIMER(TIMER_RELEBV) = tmp;//таймер БB
    160           int timlog = FLOG_TIMER(TIMER_RELEBV);
    161           if(timlog){
    162            //таймер активный - тянуть
    163            rele_bdvv1 |= maskaReleBV;
    164           }//if
    165          }//pullReleBV()
    166          
    167          void PuskAPV_UROV_OFWorking() @ "Fast_function"
    168          {
    169          //пуск АПВ УРОВ ОФ
    170           puskAPV = puskUROV = pusk1OF = pusk2OF = pusk3OF = 0;
    171          pusk1OF2 = pusk2OF2 = pusk3OF2 = 0;
    172          pusk1OF3 = pusk2OF3 = pusk3OF3 = 0;
    173          pusk1OF4 = pusk2OF4 = pusk3OF4 = 0;
    174          pusk1OF5 = pusk2OF5 = pusk3OF5 = 0;
    175          pusk1OF6 = pusk2OF6 = pusk3OF6 = 0;
    176          pusk1OF7 = pusk2OF7 = pusk3OF7 = 0;
    177          pusk1OF8 = pusk2OF8 = pusk3OF8 = 0;
    178          pusk1OF9 = pusk2OF9 = pusk3OF9 = 0;
    179          pusk1OF10 = pusk2OF10 = pusk3OF10 = 0;
    180          pusk1OF11 = pusk2OF11 = pusk3OF11 = 0;
    181          pusk1OF12 = pusk2OF12 = pusk3OF12 = 0;
    182          pusk1OF13 = pusk2OF13 = pusk3OF13 = 0;
    183          pusk1OF14 = pusk2OF14 = pusk3OF14 = 0;
    184          pusk1OF15 = pusk2OF15 = pusk3OF15 = 0;
    185          pusk1OF16 = pusk2OF16 = pusk3OF16 = 0;
    186          
    187          pusk1OT1 = pusk2OT1 = 0;
    188          pusk1OT2 = pusk2OT2 = 0;
    189          pusk1OT3 = pusk2OT3 = 0;
    190          pusk1OT4 = pusk2OT4 = 0;
    191          pusk1OT5 = pusk2OT5 = 0;
    192          pusk1OT6 = pusk2OT6 = 0;
    193          pusk1OT7 = pusk2OT7 = 0;
    194          pusk1OT8 = pusk2OT8 = 0;
    195          
    196          rst1OT1 = rst2OT1 = 0;
    197          rst1OT2 = rst2OT2 = 0;
    198          rst1OT3 = rst2OT3 = 0;
    199          rst1OT4 = rst2OT4 = 0;
    200          rst1OT5 = rst2OT5 = 0;
    201          rst1OT6 = rst2OT6 = 0;
    202          rst1OT7 = rst2OT7 = 0;
    203          rst1OT8 = rst2OT8 = 0;
    204          
    205           //ЗапускАПВ big EL
    206          // if(MakeAPVcmdPusk())
    207             if(CheckActualCMD(pAPVcmdMaska))
    208                  puskAPV = 1;
    209           //ЗапускУРОВ big EL
    210             if(CheckActualCMD(pUROVcmdMaska)) puskUROV = 1;
    211          
    212           //Запуск1ОФ
    213           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OFcmdMaska))  pusk1OF  = 1;
    214           //Запуск2ОФ
    215           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OFcmdMaska))  pusk2OF  = 1;
    216           //Запуск3ОФ
    217           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OFcmdMaska))  pusk3OF  = 1;
    218          
    219           //Запуск1ОФ2
    220           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF2cmdMaska))  pusk1OF2  = 1;
    221           //Запуск2ОФ2
    222           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF2cmdMaska))  pusk2OF2  = 1;
    223           //Запуск3ОФ2
    224           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF2cmdMaska))  pusk3OF2  = 1;
    225          
    226           //Запуск1ОФ3
    227           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF3cmdMaska))  pusk1OF3  = 1;
    228           //Запуск2ОФ3
    229           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF3cmdMaska))  pusk2OF3  = 1;
    230           //Запуск3ОФ3
    231           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF3cmdMaska))  pusk3OF3  = 1;
    232          
    233           //Запуск1ОФ4
    234           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF4cmdMaska))  pusk1OF4  = 1;
    235           //Запуск2ОФ4
    236           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF4cmdMaska))  pusk2OF4  = 1;
    237           //Запуск3ОФ4
    238           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF4cmdMaska))  pusk3OF4  = 1;
    239          
    240           //Запуск1ОФ5
    241           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF5cmdMaska))  pusk1OF5  = 1;
    242           //Запуск2ОФ5
    243           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF5cmdMaska))  pusk2OF5  = 1;
    244           //Запуск3ОФ5
    245           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF5cmdMaska))  pusk3OF5  = 1;
    246          
    247           //Запуск1ОФ6
    248           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF6cmdMaska))  pusk1OF6  = 1;
    249           //Запуск2ОФ6
    250           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF6cmdMaska))  pusk2OF6  = 1;
    251           //Запуск3ОФ6
    252           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF6cmdMaska))  pusk3OF6  = 1;
    253          
    254           //Запуск1ОФ7
    255           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF7cmdMaska))  pusk1OF7  = 1;
    256           //Запуск2ОФ7
    257           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF7cmdMaska))  pusk2OF7  = 1;
    258           //Запуск3ОФ7
    259           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF7cmdMaska))  pusk3OF7  = 1;
    260          
    261           //Запуск1ОФ8
    262           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF8cmdMaska))  pusk1OF8  = 1;
    263           //Запуск2ОФ8
    264           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF8cmdMaska))  pusk2OF8  = 1;
    265           //Запуск3ОФ8
    266           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF8cmdMaska))  pusk3OF8  = 1;
    267          
    268           //Запуск1ОФ9
    269           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF9cmdMaska))  pusk1OF9  = 1;
    270           //Запуск2ОФ9
    271           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF9cmdMaska))  pusk2OF9  = 1;
    272           //Запуск3ОФ9
    273           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF9cmdMaska))  pusk3OF9  = 1;
    274          
    275           //Запуск1ОФ10
    276           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF10cmdMaska))  pusk1OF10  = 1;
    277           //Запуск2ОФ10
    278           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF10cmdMaska))  pusk2OF10  = 1;
    279           //Запуск3ОФ10
    280           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF10cmdMaska))  pusk3OF10  = 1;
    281          
    282           //Запуск1ОФ11
    283           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF11cmdMaska))  pusk1OF11  = 1;
    284           //Запуск2ОФ11
    285           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF11cmdMaska))  pusk2OF11  = 1;
    286           //Запуск3ОФ11
    287           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF11cmdMaska))  pusk3OF11  = 1;
    288          
    289           //Запуск1ОФ12
    290           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF12cmdMaska))  pusk1OF12  = 1;
    291           //Запуск2ОФ12
    292           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF12cmdMaska))  pusk2OF12  = 1;
    293           //Запуск3ОФ12
    294           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF12cmdMaska))  pusk3OF12  = 1;
    295          
    296           //Запуск1ОФ13
    297           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF13cmdMaska))  pusk1OF13  = 1;
    298           //Запуск2ОФ13
    299           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF13cmdMaska))  pusk2OF13  = 1;
    300           //Запуск3ОФ13
    301           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF13cmdMaska))  pusk3OF13  = 1;
    302          
    303           //Запуск1ОФ14
    304           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF14cmdMaska))  pusk1OF14  = 1;
    305           //Запуск2ОФ14
    306           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF14cmdMaska))  pusk2OF14  = 1;
    307           //Запуск3ОФ14
    308           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF14cmdMaska))  pusk3OF14  = 1;
    309          
    310           //Запуск1ОФ15
    311           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF15cmdMaska))  pusk1OF15  = 1;
    312           //Запуск2ОФ15
    313           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF15cmdMaska))  pusk2OF15  = 1;
    314           //Запуск3ОФ15
    315           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF15cmdMaska))  pusk3OF15  = 1;
    316          
    317           //Запуск1ОФ16
    318           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP1OF16cmdMaska))  pusk1OF16  = 1;
    319           //Запуск2ОФ16
    320           if(CheckActualCMDInv(struct_maskaOTAPVUROVOFcmd.pP2OF16cmdMaska))  pusk2OF16  = 1;
    321           //Запуск3ОФ16
    322           if(CheckActualCMD(struct_maskaOTAPVUROVOFcmd.pP3OF16cmdMaska))  pusk3OF16  = 1;
    323          
    324           //Запуск1ОT1
    325           if(CheckActualCMD(struct_maskaOTcmd.pP1OT1cmdMaska))  pusk1OT1  = 1;
    326           //Запуск2ОT1
    327           if(CheckActualCMD(struct_maskaOTcmd.pP2OT1cmdMaska))  pusk2OT1  = 1;
    328           //rst1ОT1
    329           if(CheckActualCMD(struct_maskaOTcmd.pP3OT1cmdMaska))  rst1OT1  = 1;
    330           //rst2ОT1
    331           if(CheckActualCMD(struct_maskaOTcmd.pP4OT1cmdMaska))  rst2OT1  = 1;
    332          
    333           //Запуск1ОT2
    334           if(CheckActualCMD(struct_maskaOTcmd.pP1OT2cmdMaska))  pusk1OT2  = 1;
    335           //Запуск2ОT2
    336           if(CheckActualCMD(struct_maskaOTcmd.pP2OT2cmdMaska))  pusk2OT2  = 1;
    337           //rst1ОT2
    338           if(CheckActualCMD(struct_maskaOTcmd.pP3OT2cmdMaska))  rst1OT2  = 1;
    339           //rst2ОT2
    340           if(CheckActualCMD(struct_maskaOTcmd.pP4OT2cmdMaska))  rst2OT2  = 1;
    341          
    342           //Запуск1ОT3
    343           if(CheckActualCMD(struct_maskaOTcmd.pP1OT3cmdMaska))  pusk1OT3  = 1;
    344           //Запуск2ОT3
    345           if(CheckActualCMD(struct_maskaOTcmd.pP2OT3cmdMaska))  pusk2OT3  = 1;
    346           //rst1ОT3
    347           if(CheckActualCMD(struct_maskaOTcmd.pP3OT3cmdMaska))  rst1OT3  = 1;
    348           //rst2ОT3
    349           if(CheckActualCMD(struct_maskaOTcmd.pP4OT3cmdMaska))  rst2OT3  = 1;
    350          
    351           //Запуск1ОT4
    352           if(CheckActualCMD(struct_maskaOTcmd.pP1OT4cmdMaska))  pusk1OT4  = 1;
    353           //Запуск2ОT4
    354           if(CheckActualCMD(struct_maskaOTcmd.pP2OT4cmdMaska))  pusk2OT4  = 1;
    355           //rst1ОT4
    356           if(CheckActualCMD(struct_maskaOTcmd.pP3OT4cmdMaska))  rst1OT4  = 1;
    357           //rst2ОT4
    358           if(CheckActualCMD(struct_maskaOTcmd.pP4OT4cmdMaska))  rst2OT4  = 1;
    359          
    360           //Запуск1ОT5
    361           if(CheckActualCMD(struct_maskaOTcmd.pP1OT5cmdMaska))  pusk1OT5  = 1;
    362           //Запуск2ОT5
    363           if(CheckActualCMD(struct_maskaOTcmd.pP2OT5cmdMaska))  pusk2OT5  = 1;
    364           //rst1ОT5
    365           if(CheckActualCMD(struct_maskaOTcmd.pP3OT5cmdMaska))  rst1OT5  = 1;
    366           //rst2ОT5
    367           if(CheckActualCMD(struct_maskaOTcmd.pP4OT5cmdMaska))  rst2OT5  = 1;
    368          
    369           //Запуск1ОT6
    370           if(CheckActualCMD(struct_maskaOTcmd.pP1OT6cmdMaska))  pusk1OT6  = 1;
    371           //Запуск2ОT6
    372           if(CheckActualCMD(struct_maskaOTcmd.pP2OT6cmdMaska))  pusk2OT6  = 1;
    373           //rst1ОT6
    374           if(CheckActualCMD(struct_maskaOTcmd.pP3OT6cmdMaska))  rst1OT6  = 1;
    375           //rst2ОT6
    376           if(CheckActualCMD(struct_maskaOTcmd.pP4OT6cmdMaska))  rst2OT6  = 1;
    377          
    378           //Запуск1ОT7
    379           if(CheckActualCMD(struct_maskaOTcmd.pP1OT7cmdMaska))  pusk1OT7  = 1;
    380           //Запуск2ОT7
    381           if(CheckActualCMD(struct_maskaOTcmd.pP2OT7cmdMaska))  pusk2OT7  = 1;
    382           //rst1ОT7
    383           if(CheckActualCMD(struct_maskaOTcmd.pP3OT7cmdMaska))  rst1OT7  = 1;
    384           //rst2ОT7
    385           if(CheckActualCMD(struct_maskaOTcmd.pP4OT7cmdMaska))  rst2OT7  = 1;
    386          
    387           //Запуск1ОT8
    388           if(CheckActualCMD(struct_maskaOTcmd.pP1OT8cmdMaska))  pusk1OT8  = 1;
    389           //Запуск2ОT8
    390           if(CheckActualCMD(struct_maskaOTcmd.pP2OT8cmdMaska))  pusk2OT8  = 1;
    391           //rst1ОT8
    392           if(CheckActualCMD(struct_maskaOTcmd.pP3OT8cmdMaska))  rst1OT8  = 1;
    393           //rst2ОT8
    394           if(CheckActualCMD(struct_maskaOTcmd.pP4OT8cmdMaska))  rst2OT8  = 1;
    395          
    396          }//PuskAPV_UROV_OFWorking()
    397          
    398          void DiskretRegWorking() @ "Fast_function"
    399          {
    400          //работа дискр регистратора
    401           int tmpOffsetT = offsetTimersPRM1;//смещение на таймерный индекс PRM1
    402           LSIGNAL_TIMER(TIMERDIS_PRM1) = 0;//таймер ДИС
    403           //запускающий сигнал для миним таймер DIS
    404           LSIGNAL_TIMER(TIMER_MINDIS_PRM1) = 0;//миним таймер DIS
    405           int isDISbusy = getTimerBUSY(tmpOffsetT+TIMERDIS_PRM1);//есть активность DIS
    406          
    407           if(MakeRDIScmdPusk()){//проверить РегистрацияДИС на запускbig EL
    408             if(isDISbusy);//есть активность DIS
    409             else {
    410                    //запускающий сигнал для миним таймер DIS
    411                    LSIGNAL_TIMER(TIMER_MINDIS_PRM1) = 1;//миним таймер DIS
    412                    StartDiscretReg();//процедура старта Рег ДИС
    413                   }
    414             //запускающий сигнал для таймера num
    415             LSIGNAL_TIMER(TIMERDIS_PRM1) = 1;//запустить таймер ДИС
    416           }//if(MakeRDIScmdActual())
    417             else {
    418             //нет активности DIS
    419              memcpy(act_oldDIS, pActualCMD, 4*DQUADRO);//запомнить текущие
    420             }
    421             int activityDISact = isActivityDIS();//проверка таймерной активности ДИС
    422             //EL TRG down front
    423             int activityDIStrg = (activityDISact^activityDISold)&activityDISold;
    424             activityDISold = activityDISact;
    425             LSIGNAL_TIMER(TIMER_SEAM_PRM1) = activityDIStrg;//таймер сшивки SEAM
    426             int activitySEAMact = FLOG_TIMER(TIMER_SEAM_PRM1);//таймер сшивки SEAM
    427             //EL TRG down front
    428             int activitySEAMtrg = (activitySEAMact^activitySEAMold)&activitySEAMold;
    429             activitySEAMold = activitySEAMact;
    430             int activitySEAMstop = (activityDISact^1) & activitySEAMtrg;
    431             if(registrator_dis.title_dis.len_dis>(SIZE_DIS-2)) activitySEAMstop = 1;//принуд стоп
    432          //таймер формирователь со сбросом - по восх фронту
    433             FLOG_TIMERRES(TIMERDIS_PRM1, activitySEAMstop);
    434          //таймер формирователь по восх фронту
    435             FLOG_TIMER(TIMER_MINDIS_PRM1);//миним таймер DIS
    436          
    437             if(getTimerBUSY(tmpOffsetT+TIMERDIS_PRM1)){//bazisTimerMem[tmpOffsetT+TIMERDIS_PRM1].BUSY){//есть активность DIS
    438               //сравнить текущие и старые
    439               if(memcmp(oldDIS, pActualCMD, 4*DQUADRO)){
    440                //есть различия
    441                registrator_dis.bodyDIS[registrator_dis.title_dis.len_dis].reltime =
    442                       //относит время
    443                       getTimerCrr(tmpOffsetT+TIMERDIS_PRM1);
    444                       //bazisTimerMem[tmpOffsetT+TIMERDIS_PRM1].crrCNT;
    445                memcpy(registrator_dis.bodyDIS[registrator_dis.title_dis.len_dis].pActualCMD, 
    446                          pActualCMD, 4*DQUADRO);//копировать текущие
    447                registrator_dis.title_dis.len_dis++;//размер массив ДИС
    448               }//if(memcmp(oldDIS, pActualCMD, 4*DQUADRO))
    449               memcpy(oldDIS, pActualCMD, 4*DQUADRO);//запомнить текущие
    450             }//if(isDISbusy)
    451          
    452          }//DiskretRegWorking()
    453          
    454          int isActivityDIS() @ "Fast_function"
    455          {
    456          //проверка активности ДИС
    457            int tmp = 0;
    458            while (cnfCOMPONENT[tmp].componentEnable)
    459            {
    460              if(cnfCOMPONENT[tmp].isDISactiv(tmp)) return 1;
    461              tmp++;
    462            }//while
    463            return 0;
    464          }//isActivityDIS()
    465          
    466          void StartDiscretReg() @ "Fast_function"
    467          {
    468          //процедура старта Рег ДИС
    469           registrator_dis.title_dis.len_dis=0;//длина масс ДИС
    470           memcpy(registrator_dis.title_dis.oldDIS, act_oldDIS, 4*DQUADRO);//перекопировать текущие
    471           memset(oldDIS, 0, 4*DQUADRO);//обнулить
    472          
    473           registrator_dis.title_dis.title_year = 1;
    474           registrator_dis.title_dis.title_mon  = 1;
    475           registrator_dis.title_dis.title_date = 1;
    476           registrator_dis.title_dis.title_hour = 1;
    477           registrator_dis.title_dis.title_min  = 1;
    478           registrator_dis.title_dis.title_sec  = 1;
    479          
    480          }//StartDiscretReg()
    481          
    482          int MakeRDIScmdPusk()  @ "Fast_function"
    483          {
    484          //проверить РегистрацияДИС на запуск
    485            UNS_32 tmpM[DQUADRO];
    486            UNS_32 tmpI=0;
    487            for(int i=0; i<DQUADRO; i++) 
    488                    pRDIScmdActual[i]=pRDIScmdMaska[i]&pActualCMD[i];//РегистрацияДИС AND Текущие
    489            //Большой EL
    490            for(int i=0; i<DQUADRO; i++) 
    491                    tmpM[i]=(pRDIScmdActual[i]^pRDIScmdOld[i])&pRDIScmdActual[i];
    492            for(int i=0; i<DQUADRO; i++) 
    493                    pRDIScmdOld[i]=pRDIScmdActual[i];
    494          
    495            for(int i=0; i<DQUADRO; i++) 
    496                    tmpI|=tmpM[i];
    497            return tmpI;
    498          }//MakeRDIScmdPusk
    499          /*
    500          int MakeAPVcmdPusk() @ "Fast_function"
    501          {
    502          //проверить APV на запуск
    503            UNS_32 tmpM[DQUADRO];
    504            UNS_32 tmpI=0;
    505            for(int i=0; i<DQUADRO; i++) 
    506                    pAPVcmdActual[i]=pAPVcmdMaska[i]&pActualCMD[i];//РегистрацияДИС AND Текущие
    507            //Большой EL инверсный
    508            for(int i=0; i<DQUADRO; i++) 
    509                    tmpM[i]=(pAPVcmdActual[i]^pAPVcmdOld[i])&pAPVcmdOld[i];
    510            for(int i=0; i<DQUADRO; i++) 
    511                    pAPVcmdOld[i]=pAPVcmdActual[i];
    512          
    513            for(int i=0; i<DQUADRO; i++) 
    514                    tmpI|=tmpM[i];
    515            return tmpI;
    516          }//MakeAPVcmdPusk
    517          
    518          int MakeUROVcmdPusk() @ "Fast_function"
    519          {
    520          //проверить UROV на запуск
    521            UNS_32 tmpM[DQUADRO];
    522            UNS_32 tmpI=0;
    523            for(int i=0; i<DQUADRO; i++) 
    524                    pUROVcmdActual[i]=pUROVcmdMaska[i]&pActualCMD[i];//РегистрацияДИС AND Текущие
    525            //Большой EL
    526            for(int i=0; i<DQUADRO; i++) 
    527                    tmpM[i]=(pUROVcmdActual[i]^pUROVcmdOld[i])&pUROVcmdActual[i];
    528            for(int i=0; i<DQUADRO; i++) 
    529                    pUROVcmdOld[i]=pUROVcmdActual[i];
    530          
    531            for(int i=0; i<DQUADRO; i++) 
    532                    tmpI|=tmpM[i];
    533            return tmpI;
    534          }//MakeUROVcmdPusk
    535          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   DiskretRegWorking
        48   -> FLogTimer
        48   -> FLogTimerRES
        48   -> MakeRDIScmdPusk
        48   -> StartDiscretReg
        48   -> __aeabi_memcpy
        48   -> getTimerBUSY
        48   -> getTimerCrr
        48   -> isActivityDIS
        48   -> memcmp
      40   MakeRDIScmdPusk
       8   PuskAPV_UROV_OFWorking
         8   -> CheckActualCMD
         8   -> CheckActualCMDInv
      24   StartDiscretReg
        24   -> __aeabi_memcpy
        24   -> __aeabi_memset
       8   isActivityDIS
         8   -- Indirect call
      16   pullReleBO
        16   -> FLogTimer
      16   pullReleBV
        16   -> FLogTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_27
       4  ??DataTable2_28
       4  ??DataTable2_29
       4  ??DataTable2_3
       4  ??DataTable2_30
       4  ??DataTable2_31
       4  ??DataTable2_32
       4  ??DataTable2_33
       4  ??DataTable2_34
       4  ??DataTable2_35
       4  ??DataTable2_36
       4  ??DataTable2_37
       4  ??DataTable2_38
       4  ??DataTable2_39
       4  ??DataTable2_4
       4  ??DataTable2_40
       4  ??DataTable2_41
       4  ??DataTable2_42
       4  ??DataTable2_43
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_34
       4  ??DataTable6_35
       4  ??DataTable6_36
       4  ??DataTable6_37
       4  ??DataTable6_38
       4  ??DataTable6_39
       4  ??DataTable6_4
       4  ??DataTable6_40
       4  ??DataTable6_41
       4  ??DataTable6_42
       4  ??DataTable6_43
       4  ??DataTable6_44
       4  ??DataTable6_45
       4  ??DataTable6_46
       4  ??DataTable6_47
       4  ??DataTable6_48
       4  ??DataTable6_49
       4  ??DataTable6_5
       4  ??DataTable6_50
       4  ??DataTable6_51
       4  ??DataTable6_52
       4  ??DataTable6_53
       4  ??DataTable6_54
       4  ??DataTable6_55
       4  ??DataTable6_56
       4  ??DataTable6_57
       4  ??DataTable6_58
       4  ??DataTable6_59
       4  ??DataTable6_6
       4  ??DataTable6_60
       4  ??DataTable6_61
       4  ??DataTable6_62
       4  ??DataTable6_63
       4  ??DataTable6_64
       4  ??DataTable6_65
       4  ??DataTable6_66
       4  ??DataTable6_67
       4  ??DataTable6_68
       4  ??DataTable6_69
       4  ??DataTable6_7
       4  ??DataTable6_70
       4  ??DataTable6_71
       4  ??DataTable6_72
       4  ??DataTable6_73
       4  ??DataTable6_74
       4  ??DataTable6_8
       4  ??DataTable6_9
     504  DiskretRegWorking
     232  MakeRDIScmdPusk
      32  OTout
    3216  PuskAPV_UROV_OFWorking
     148  StartDiscretReg
      40  act_oldDIS
       4  activityDISold
       4  activitySEAMold
      84  isActivityDIS
      40  oldDIS
      40  pAPVcmdMaska
      40  pRDIScmdActual
      40  pRDIScmdMaska
      40  pRDIScmdOld
      40  pUROVcmdMaska
     156  pullReleBO
     156  pullReleBV
       4  pusk1OF
       4  pusk1OF10
       4  pusk1OF11
       4  pusk1OF12
       4  pusk1OF13
       4  pusk1OF14
       4  pusk1OF15
       4  pusk1OF16
       4  pusk1OF2
       4  pusk1OF3
       4  pusk1OF4
       4  pusk1OF5
       4  pusk1OF6
       4  pusk1OF7
       4  pusk1OF8
       4  pusk1OF9
       4  pusk1OT1
       4  pusk1OT1_old
       4  pusk1OT2
       4  pusk1OT2_old
       4  pusk1OT3
       4  pusk1OT3_old
       4  pusk1OT4
       4  pusk1OT4_old
       4  pusk1OT5
       4  pusk1OT5_old
       4  pusk1OT6
       4  pusk1OT6_old
       4  pusk1OT7
       4  pusk1OT7_old
       4  pusk1OT8
       4  pusk1OT8_old
       4  pusk2OF
       4  pusk2OF10
       4  pusk2OF11
       4  pusk2OF12
       4  pusk2OF13
       4  pusk2OF14
       4  pusk2OF15
       4  pusk2OF16
       4  pusk2OF2
       4  pusk2OF3
       4  pusk2OF4
       4  pusk2OF5
       4  pusk2OF6
       4  pusk2OF7
       4  pusk2OF8
       4  pusk2OF9
       4  pusk2OT1
       4  pusk2OT1_old
       4  pusk2OT2
       4  pusk2OT2_old
       4  pusk2OT3
       4  pusk2OT3_old
       4  pusk2OT4
       4  pusk2OT4_old
       4  pusk2OT5
       4  pusk2OT5_old
       4  pusk2OT6
       4  pusk2OT6_old
       4  pusk2OT7
       4  pusk2OT7_old
       4  pusk2OT8
       4  pusk2OT8_old
       4  pusk3OF
       4  pusk3OF10
       4  pusk3OF11
       4  pusk3OF12
       4  pusk3OF13
       4  pusk3OF14
       4  pusk3OF15
       4  pusk3OF16
       4  pusk3OF2
       4  pusk3OF3
       4  pusk3OF4
       4  pusk3OF5
       4  pusk3OF6
       4  pusk3OF7
       4  pusk3OF8
       4  pusk3OF9
       4  puskAPV
       4  puskUROV
    4456  registrator_dis
       4  rst1OT1
       4  rst1OT1_old
       4  rst1OT2
       4  rst1OT2_old
       4  rst1OT3
       4  rst1OT3_old
       4  rst1OT4
       4  rst1OT4_old
       4  rst1OT5
       4  rst1OT5_old
       4  rst1OT6
       4  rst1OT6_old
       4  rst1OT7
       4  rst1OT7_old
       4  rst1OT8
       4  rst1OT8_old
       4  rst2OT1
       4  rst2OT1_old
       4  rst2OT2
       4  rst2OT2_old
       4  rst2OT3
       4  rst2OT3_old
       4  rst2OT4
       4  rst2OT4_old
       4  rst2OT5
       4  rst2OT5_old
       4  rst2OT6
       4  rst2OT6_old
       4  rst2OT7
       4  rst2OT7_old
       4  rst2OT8
       4  rst2OT8_old
    1920  struct_maskaOTAPVUROVOFcmd
    1280  struct_maskaOTcmd

 
 8 432 bytes in section .bss
 5 232 bytes in section Fast_function
 
 5 232 bytes of CODE memory
 8 432 bytes of DATA memory

Errors: none
Warnings: none
