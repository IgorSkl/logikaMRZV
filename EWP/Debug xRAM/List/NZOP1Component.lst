###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Oct/2015  17:17:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\component\NZOP1Component.c
#    Command line =  
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\component\NZOP1Component.c" -lcN
#        "D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\" -o "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "D:\Program Files\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\Igor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\component\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\" --interwork
#        --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\NZOP1Component.lst
#    Object file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\NZOP1Component.o
#
###############################################################################

D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\component\NZOP1Component.c
      1          #ifndef _HIDE_COMPONENT
      2          /*
      3          #include <vcl.h>
      4          #include <strstrea.h>
      5          #include <math.h>
      6          #include <mem.h>
      7          #include <fstream.h>
      8          #include <strstrea.h>
      9          #include <iomanip.h>
     10          #pragma hdrstop
     11          
     12          #include "vmenuDis.h"
     13          */
     14          
     15          #include <stdio.h>
     16          #include <string.h>
     17          
     18          #include "bazisdef.h"
     19          #include "component\componentdef.h"
     20          #include "virtualMenu\systemmenudef.h"
     21          #include "virtualMenu\ustmanagerdef.h"
     22          #include "psuperVisor\psvisor_helpdef.h"
     23          
     24          #include "virtualMenu\textstreamfnc.h"
     25          #include "virtualMenu\systemmenufnc.h"
     26          #include "virtualMenu\ustmanagerfnc.h"
     27          #include "psuperVisor\psvisor_helpfnc.h"
     28          #include "virtualMenu\rangmanagerfnc.h"
     29          #include "logictimers\logictimersfnc.h"
     30          
     31          #include "virtualMenu\viewMenuList.h"
     32          
     33          #include "psupervisor\psupervisor.h"
     34          
     35          #include "toSpeedOptim.h"
     36          
     37          #include "..\bazis.h"
     38          
     39          //код компонентов
     40          #define KOD_COMPONENT  NZOP_COMP1
     41          //к-во ступеней
     42          #define CNT_STUPEN_NZOP  2
     43          
     44          #endif // _HIDE_COMPONENT
     45          
     46          //РАСПРЕДЕЛЕНИЕ УСТАВОК  в менеджере уставок
     47          //уставка сработки
     48          #define MNGUST_UCM_NZOP1to2    0
     49          #define MNGUST_UCM_NZOP1to2_V  1
     50          #define MNGUST_UCM_NZOP1to2_N  2
     51          #define MNGUST_ICM_NZOP1to2    3
     52          #define MNGUST_ICM_NZOP1to2_V  4
     53          #define MNGUST_ICM_NZOP1to2_N  5
     54          
     55          //уставка выдержки
     56          #define MNGVID_NZOP1to2    6
     57          #define MNGVID_NZOP1to2_V  7
     58          #define MNGVID_NZOP1to2_N  8
     59          
     60          //уставка управления
     61          #define MNGUPR_NZOP1to2    9
     62          //к-во уставок в менеджере уставок
     63          #define MNGUST_NZOP1to2_TOTAL  10
     64          //#define MNGUST_BOBV_NZOP1to2  MNGUST_NZOP1to2_TOTAL
     65          
     66          //РАСПРЕДЕЛЕНИЕ ENA команд
     67          //Простая\Направл
     68          #define ENA_NZOP1to2_1  0
     69          //Вкл\Откл
     70          #define ENA_NZOP1to2_2  1
     71          //Вперед\Назад
     72          #define ENA_NZOP1to2_3  2
     73          //к-во ENA команд
     74          #define ENACMD_NZOP1to2_TOTAL 3
     75          
     76          //РАСПРЕДЕЛЕНИЕ УСТАВОК в супервизоре
     77          //уставка SPV сработки
     78          #define SPVSRABUST_UCM_NZOP1to2    0
     79          #define SPVSRABUST_UCM_NZOP1to2_V  1
     80          #define SPVSRABUST_UCM_NZOP1to2_N  2
     81          #define SPVSRABUST_ICM_NZOP1to2    3
     82          #define SPVSRABUST_ICM_NZOP1to2_V  4
     83          #define SPVSRABUST_ICM_NZOP1to2_N  5
     84          //уставка SPV возврата
     85          #define SPVVOZVUST_UCM_NZOP1to2    6
     86          #define SPVVOZVUST_UCM_NZOP1to2_V  7
     87          #define SPVVOZVUST_UCM_NZOP1to2_N  8
     88          #define SPVVOZVUST_ICM_NZOP1to2    9
     89          #define SPVVOZVUST_ICM_NZOP1to2_V  10
     90          #define SPVVOZVUST_ICM_NZOP1to2_N  11
     91          //уставка SPV выход
     92          #define SPV_OUT_UCM_NZOP1to2       12
     93          #define SPV_OUT_ICM_NZOP1to2       13
     94          #define SPV_OUT_UCM_NZOP1to2_V     14
     95          #define SPV_OUT_ICM_NZOP1to2_V     15
     96          #define SPV_OUT_UCM_NZOP1to2_N     16
     97          #define SPV_OUT_ICM_NZOP1to2_N     17
     98          //к-во уставок в супервизоре
     99          #define SPVUST_NZOP1to2_TOTAL  18
    100          
    101          //---------------IO COMMAND------------------
    102          //РАСПРЕДЕЛЕНИЕ IO КОМАНД ДЛЯ NZOP1to2
    103          //Стат блок НЗОП1
    104          #define IOCMD1_NZOP1to2 0
    105          //Сраб ПО НЗОП1
    106          #define IOCMD2_NZOP1to2 1
    107          //Сраб ПО НЗОП1 ВПД
    108          #define IOCMD3_NZOP1to2 2
    109          //Сраб ПО НЗОП1 НЗД
    110          #define IOCMD4_NZOP1to2 3
    111          //Сраб НЗОП1
    112          #define IOCMD5_NZOP1to2 4
    113          //Сектор НЗОП1 ВПД
    114          #define IOCMD6_NZOP1to2 5
    115          //Сектор НЗОП1 НЗД
    116          #define IOCMD7_NZOP1to2 6
    117          //к-во IO команд
    118          #define IOCMD_NZOP1to2_TOTAL    7
    119          
    120          //---------------TL COMMAND------------------
    121          //РАСПРЕДЕЛЕНИЕ TL КОМАНД ДЛЯ NZOP1to2
    122          //isFAILU_INVERT
    123          //#define TLCMD1_NZOP1to2   0
    124          //NZOP1to2_PO2
    125          //#define TLCMD2_NZOP1to2   1
    126          //NZOP1to2_PO3
    127          //#define TLCMD3_NZOP1to2   2
    128          //isFAILUCM005_INVERT
    129          //#define TLCMD4_NZOP1to2   3
    130          //isFAILICM005_INVERT
    131          //#define TLCMD5_NZOP1to2   4
    132          //к-во TL команд
    133          #define TLCMD_NZOP1to2_TOTAL    0
    134          
    135          //--------------- TIMERS ------------------
    136          //РАСПРЕДЕЛЕНИЕ ТАЙМЕРОВ ДЛЯ NZOP1to2
    137          //таймер 0
    138          #define TIMER1_NZOP1to2  0
    139          //таймер 1
    140          #define TIMER2_NZOP1to2  1
    141          //таймер 2
    142          #define TIMER3_NZOP1to2  2
    143          //таймер 3 BO
    144          #define TIMER_BO_NZOP1to2 3
    145          //к-во таймеров
    146          #define TIMERS_NZOP1to2_TOTAL   4
    147          
    148          #ifndef _HIDE_COMPONENT
    149          
    150          #define _HIDE_COMPONENT
    151          #include "PRM1Component.c"
    152          
    153          extern COMPONENT_OBJ rpzcomponent_obj;//обект компонента для репозитария
    154          extern int  tmpUSTAVKI[];
    155          
    156          extern LineMenuItem sub_menu_cnf[];
    157          extern LineMenuItem sub_menu_NZOP[];
    158          extern LineMenuItem sub_menu_tmp[];
    159          extern int  IndexUstSPV;//индекс уставок в супервизоре
    160          extern int  IndexIO;//индекс IO
    161          
    162          extern COMPONENT_OBJ  cnfCOMPONENT[];
    163          extern int  spvUSTAVKI[];//текущие уставки супервизора
    164          extern char *bitStringUNI[];
    165          extern int offsetUstMngPRM1;//смещение на уставки PRM1
    166          
    167          void PereinitUstListCompNZOP1(short flg);
    168          void UstListCompNZOP1();
    169          void ustRedactorCompNZOP1();
    170          void UstCompNZOP1();
    171          
    172          void PereinitVidListCompNZOP1(short flg);
    173          void VidListCompNZOP1();
    174          void vidRedactorCompNZOP1();
    175          void VidCompNZOP1();
    176          
    177          void PereinitUprListCompNZOP1(short flg);
    178          void UprListCompNZOP1();
    179          void uprRedactorCompNZOP1();
    180          void UprCompNZOP1();
    181          short  KadrMenuFormat_upr_compNZOP1(void *workCntr);
    182          int  initUstNZOP1(char init);
    183          void  prepareUstNZOP1(short idxC);
    184          
    185          void EditUstNZOP1();
    186          void EditVidNZOP1();
    187          void EditUprNZOP1();
    188          int codecUstNZOP1(char codec, short offset, int ust);
    189          
    190          short  KadrMenuFormat_ustvidNZOP(void *workCntr);
    191          char *selectorUprStrNZOP1(short iBit, UNS_32 ustUpr);
    192          void diffNZOP2ToRepozitar();
    193          void  logicNZOP1to2(int idxC);
    194          int   isDISactiv_NZOP1to2(int idxC);
    195          
    196          TWIN_DIFFERENT twinNZOP1[1];//массив контроля близнецов
    197          
    198          int  offsetIOCmdNZOP2;//смещение для IO NZOP2
    199          
    200          char NZOP1_TITLE[] = "НЗОП1";
    201          
    202          IONAMESTATUS_COMPONENT ionsNZOP1[IOCMD_NZOP1to2_TOTAL] =
    203          {
    204            {
    205              1,//статус iocmd1
    206              "Стат блок НЗОП1"
    207            },
    208            {
    209              1,//статус iocmd2
    210              "Сраб ПО НЗОП1"
    211            },
    212            {
    213              1,//статус iocmd3
    214              "Сраб ПО НЗОП1 ВПД"
    215            },
    216            {
    217              1,//статус iocmd4
    218              "Сраб ПО НЗОП1 НЗД"
    219            },
    220            {
    221              1,//статус iocmd5
    222              "Сраб НЗОП1"
    223            },
    224            {
    225              1,//статус iocmd6
    226              "Сектор НЗОП1 ВПД"
    227            },
    228            {
    229              1,//статус iocmd7
    230              "Сектор НЗОП1 НЗД"
    231            }
    232          };
    233          
    234          LineMenuItem sub_menu_comp_NZOP1[8] =
    235          {
    236            { NZOP1_TITLE, NULL},//title
    237            { &CONTROL1_COMP, &sub_menu_NZOP, typeMenuSub},//control_item, parent
    238            { "Уставки НЗОП1",    (void *)&UstListCompNZOP1, typeMenuProg},
    239            { "Выдержки НЗОП1",   (void *)&VidListCompNZOP1, typeMenuProg},
    240            { "Управление НЗОП1", (void *)&UprListCompNZOP1, typeMenuProg},
    241            { NULL, NULL}
    242          };
    243          
    244          LineMenuItem sub_menu_ust_compNZOP1[] =
    245          {
    246            { "Уставки НЗОП1", NULL},//title
    247            { &CONTROL2_COMP, sub_menu_comp_NZOP1, typeMenuList},//control_item, parent
    248            { "Уст НЗОП1 U2",        (void *)&UstCompNZOP1, typeMenuProg},
    249            { "Уст НЗОП1 U2 вперед", (void *)&UstCompNZOP1, typeMenuProg},
    250            { "Уст НЗОП1 U2 назад",  (void *)&UstCompNZOP1, typeMenuProg},
    251            { "Уст НЗОП1 I2",        (void *)&UstCompNZOP1, typeMenuProg},
    252            { "Уст НЗОП1 I2 вперед", (void *)&UstCompNZOP1, typeMenuProg},
    253            { "Уст НЗОП1 I2 назад",  (void *)&UstCompNZOP1, typeMenuProg},
    254            { NULL, NULL}
    255          
    256          };
    257          
    258          LineMenuItem sub_menu_vid_compNZOP1[] =
    259          {
    260            { "Выдержки НЗОП1", NULL},//title
    261            { &CONTROL2_COMP, sub_menu_comp_NZOP1, typeMenuList},//control_item, parent
    262            { "Выдержка НЗОП1",        (void *)&VidCompNZOP1, typeMenuProg},
    263            { "Выдержка НЗОП1 вперед", (void *)&VidCompNZOP1, typeMenuProg},
    264            { "Выдержка НЗОП1 назад",  (void *)&VidCompNZOP1, typeMenuProg},
    265            { NULL, NULL}
    266          
    267          };
    268          
    269          LineMenuItem sub_menu_upr_compNZOP1[] =
    270          {
    271            { "Управл НЗОП1", NULL},//title
    272            { &CONTROL2_COMP, sub_menu_comp_NZOP1, typeMenuList},//control_item, parent
    273            { "Вид НЗОП1",           (void *)&UprCompNZOP1, typeMenuProg},
    274            { "Управл НЗОП1",        (void *)&UprCompNZOP1, typeMenuProg},
    275            { "Направл НЗОП1",       (void *)&UprCompNZOP1, typeMenuProg},
    276            { NULL, NULL}
    277          
    278          };
    279          
    280          void PereinitUstListCompNZOP1(short flg)
    281          {
    282          //переиниц
    283            //инит компонентного контроля
    284            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_ustvidNZOP, sub_menu_ust_compNZOP1);//инит control и формир кадра
    285            if(flg==0)//END
    286            {
    287              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW/2);//перейти на END
    288            }//if
    289          
    290            ViewDiskrMenuList();//вывести окно отображения
    291            ListPStr();//доступ к уставкам
    292          }//PereinitUstListComp2()
    293          
    294          void UstListCompNZOP1()
    295          {
    296            SelectorMNGBAZA(0);//установка базу уставок
    297          
    298            SelectorSUBMENU(sub_menu_ust_compNZOP1);//уcтановить текущее субменю
    299          
    300            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    301          
    302            SelectorFHOME(&PereinitUstListCompNZOP1);//указатель на ф-цию HOME
    303            InitFHOME(1);//exe ф-цию HOME
    304          
    305            LanderUpDown();//wkl Up Down
    306          }//UstListCompNZOP1()
    307          
    308          void UstCompNZOP1()
    309          {
    310            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    311            PrepareEditMenu(sub_menu_ust_compNZOP1);
    312            PassWord(EditUstNZOP1);
    313          }//VidCompNZOP1()
    314          
    315          void EditUstNZOP1()
    316          {
    317          //редактировать уставку
    318            SystemEditUst(sub_menu_ust_compNZOP1);//[LIGHTLINEMENU +1+SUBDATA].Line1, LIGHTLINEMENU);
    319          }//UstCompNZOP1()
    320          
    321          short  KadrMenuFormat_ustvidNZOP(void *pstr)
    322          {
    323           WorkControl *workCntr = (WorkControl *)pstr;
    324          //формирователь кадра
    325            char locTxt[50];
    326            RESET_COUNTER;//сброс счетчиков
    327            for(int i=0;; i++)
    328            {
    329          //критерий терминатора
    330              if(((LineMenuItem *)workCntr->userPoint)[i+1+SUBDATA].Line1==NULL)break;
    331              COMPARE_COUNTER
    332              {
    333                strcpy((char *)workCntr->twoString, (char *)( ((LineMenuItem *)workCntr->userPoint) )[i+1+SUBDATA].Line1);
    334                sprintf(locTxt, "   %d", getUstOffsetMngUSTAVKI(i));
    335                strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2, locTxt);
    336                return 1;//сравнить счетчики кадров
    337              }
    338            }//for
    339          
    340            return 1;
    341          }//KadrMenuFormat_ust_1(WorkControl *workCntr)
    342          //--------------------------------------------------
    343          
    344          void PereinitVidListCompNZOP1(short flg)
    345          {
    346          //переиниц
    347            //инит компонентного контроля
    348            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_ustvidNZOP, sub_menu_vid_compNZOP1);//инит control и формир кадра
    349            if(flg==0)//END
    350            {
    351              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW/2);//перейти на END
    352            }//if
    353          
    354            ViewDiskrMenuList();//вывести окно отображения
    355            ListPStr();//доступ к уставкам
    356          }//PereinitUstListComp2()
    357          
    358          void VidListCompNZOP1()
    359          {
    360            SelectorMNGBAZA(MNGVID_NZOP1to2);//установка базы уставок
    361          
    362            SelectorSUBMENU(sub_menu_vid_compNZOP1);//утановить текущее субменю
    363          
    364            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    365          
    366            SelectorFHOME(&PereinitVidListCompNZOP1);//указатель на ф-цию HOME
    367            InitFHOME(1);//exe ф-цию HOME
    368          
    369            LanderUpDown();//wkl Up Down
    370          }//VidListCompNZOP1()
    371          
    372          void VidCompNZOP1()
    373          {
    374            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    375            PrepareEditMenu(sub_menu_vid_compNZOP1);
    376          //  PassWord(EditVidAPV);
    377            EditVidNZOP1();
    378          }//VidCompNZOP1()
    379          
    380          void EditVidNZOP1()
    381          {
    382          //редактировать уставку
    383            SystemEditUst(sub_menu_vid_compNZOP1);//[LIGHTLINEMENU +1+SUBDATA].Line1, LIGHTLINEMENU);
    384          }//
    385          
    386          //--------------------------------------------------
    387          
    388          void PereinitUprListCompNZOP1(short flg)
    389          {
    390          //переиниц
    391            //инит компонентного контроля
    392            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_upr_compNZOP1, NULL);//инит control и формир кадра
    393            if(flg==0)//END
    394            {
    395              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW/2);//перейти на END
    396            }//if
    397          
    398            ViewDiskrMenuList();//вывести окно отображения
    399            ListPStr();//доступ к уставкам
    400          }//PereinitUstListComp2()
    401          
    402          void UprListCompNZOP1()
    403          {
    404            SelectorMNGBAZA(MNGUPR_NZOP1to2);//установка базы уставок
    405          
    406            SelectorSUBMENU(sub_menu_upr_compNZOP1);//утановить текущее субменю
    407          
    408            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    409          
    410            SelectorFHOME(&PereinitUprListCompNZOP1);//указатель на ф-цию HOME
    411            InitFHOME(1);//exe ф-цию HOME
    412          
    413            LanderUpDown();//wkl Up Down
    414          }//VidListCompNZOP1()
    415          
    416          void UprCompNZOP1()
    417          {
    418            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    419            PrepareEditMenu(sub_menu_upr_compNZOP1);
    420            PassWord(EditUprNZOP1);
    421          
    422          }//UprCompNZOP1()
    423          
    424          void EditUprNZOP1()
    425          {
    426          //редактировать уставку упр
    427            char *nameUpr = (char *)sub_menu_upr_compNZOP1[LIGHTLINEMENU +1+SUBDATA].Line1;
    428            UpravlRedactor(nameUpr, LIGHTLINEMENU, &selectorUprStrNZOP1);//редактировать уставку управления
    429          }//EditUprNZOP1()
    430          
    431          short  KadrMenuFormat_upr_compNZOP1(void *pstr)
    432          {
    433           WorkControl *workCntr = (WorkControl *)pstr;
    434          //формирователь кадра
    435            RESET_COUNTER;//сброс счетчиков
    436            for(int i=0;; i++)
    437            {
    438          //критерий терминатора
    439              char *nameUpr = (char *)sub_menu_upr_compNZOP1[i+1+SUBDATA].Line1;
    440              if(nameUpr==NULL) break;
    441          
    442              COMPARE_COUNTER
    443              {
    444                strcpy((char *)workCntr->twoString, nameUpr);
    445          
    446                //отобразить уставку управления в кадре
    447                strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2,
    448                selectorUprStrNZOP1(i, getCurrentMngUSTAVKI()));
    449          
    450                return 1;//сравнить счетчики кадров
    451              }
    452            }//for
    453          
    454            return 1;
    455          }//KadrMenuFormat_upr_compNZOP1(WorkControl *workCntr)
    456          
    457          char *selectorUprStrNZOP1(short iBit, UNS_32 ustUpr)
    458          {
    459            switch(iBit)
    460            {
    461            case 0:
    462              if(NumBitCheckWord(iBit, &ustUpr)) return bitStringUNI[UNIUPR_NAPRAVL];
    463              return bitStringUNI[UNIUPR_PROSTAJA];
    464          
    465            case 2:
    466              if(NumBitCheckWord(iBit, &ustUpr)) return bitStringUNI[UNIUPR_NAZAD];
    467              return bitStringUNI[UNIUPR_WPERED];
    468          
    469            default:;
    470            }//switch
    471              if(NumBitCheckWord(iBit, &ustUpr)) return bitStringUNI[UNIUPR_WKL];
    472              return bitStringUNI[UNIUPR_OTKL];
    473          }//selectorUprStrNZOP1(short ibit, UNS_32 ustUpr)
    474          
    475          int initUstNZOP1(char init)
    476          {
    477            //инициал уставок
    478            if (init)
    479            {
    480          //уставка сработки
    481              tmpUSTAVKI[MNGUST_UCM_NZOP1to2]   = 221;
    482              tmpUSTAVKI[MNGUST_UCM_NZOP1to2_V] = 222;
    483              tmpUSTAVKI[MNGUST_UCM_NZOP1to2_N] = 223;
    484              tmpUSTAVKI[MNGUST_ICM_NZOP1to2]   = 224;
    485              tmpUSTAVKI[MNGUST_ICM_NZOP1to2_V] = 225;
    486              tmpUSTAVKI[MNGUST_ICM_NZOP1to2_N] = 226;
    487          //уставка выдержки
    488              tmpUSTAVKI[MNGVID_NZOP1to2]   = 230;
    489              tmpUSTAVKI[MNGVID_NZOP1to2_V] = 231;
    490              tmpUSTAVKI[MNGVID_NZOP1to2_N] = 232;
    491          //уставка управления
    492              tmpUSTAVKI[MNGUPR_NZOP1to2] = 0;
    493          
    494            }//if
    495          
    496            IndexUstSPV += SPVUST_NZOP1to2_TOTAL;//индекс уставок в супервизоре
    497            return MNGUST_NZOP1to2_TOTAL;//к-во уставок в менеджере уставок
    498          }//initUstNZOP1(short mngUst, char init)
    499          
    500          void  prepareUstNZOP1(short idxC)
    501          {
    502            //подготовка ENA команд для клона
    503            //копировать ENA из WideENA в ENAcmd
    504            CopyWideENAToENAcmd(PrepareENACmd(idxC, MNGUPR_NZOP1to2), ENACMD_NZOP1to2_TOTAL);
    505            //подготовка уставок
    506            int tmpOffsetUSpv = getOffsetSPVUstCnf(idxC);//смещение уставок внутри супервизора
    507          
    508            //уставка SPV сработки
    509            int tmp1 =
    510              SPV_UST(SPVSRABUST_UCM_NZOP1to2) = codecUstNZOP1(1, MNGUST_UCM_NZOP1to2, getNativUstMngUSTAVKI(idxC, MNGUST_UCM_NZOP1to2));
    511            //уставка SPV возврата
    512            SPV_UST(SPVVOZVUST_UCM_NZOP1to2) = tmp1 - tmp1/20;//5%
    513          
    514            //уставка SPV сработки
    515            tmp1 =
    516              SPV_UST(SPVSRABUST_UCM_NZOP1to2_V) = codecUstNZOP1(1, MNGUST_UCM_NZOP1to2_V, getNativUstMngUSTAVKI(idxC, MNGUST_UCM_NZOP1to2_V));
    517            //уставка SPV возврата
    518            SPV_UST(SPVVOZVUST_UCM_NZOP1to2_V) = tmp1 - tmp1/20;//5%
    519          
    520            //уставка SPV сработки
    521            tmp1 =
    522              SPV_UST(SPVSRABUST_UCM_NZOP1to2_N) = codecUstNZOP1(1, MNGUST_UCM_NZOP1to2_N, getNativUstMngUSTAVKI(idxC, MNGUST_UCM_NZOP1to2_N));
    523            //уставка SPV возврата
    524            SPV_UST(SPVVOZVUST_UCM_NZOP1to2_N) = tmp1 - tmp1/20;//5%
    525          
    526          //------------------NZD---------------------------------------------------------
    527            //уставка SPV сработки
    528            tmp1 =
    529              SPV_UST(SPVSRABUST_ICM_NZOP1to2) = codecUstNZOP1(1, MNGUST_ICM_NZOP1to2, getNativUstMngUSTAVKI(idxC, MNGUST_ICM_NZOP1to2));
    530            //уставка SPV возврата
    531            SPV_UST(SPVVOZVUST_ICM_NZOP1to2) = tmp1 - tmp1/20;//5%
    532          
    533            //уставка SPV сработки
    534            tmp1 =
    535              SPV_UST(SPVSRABUST_ICM_NZOP1to2_V) = codecUstNZOP1(1, MNGUST_ICM_NZOP1to2_V, getNativUstMngUSTAVKI(idxC, MNGUST_ICM_NZOP1to2_V));
    536            //уставка SPV возврата
    537            SPV_UST(SPVVOZVUST_ICM_NZOP1to2_V) = tmp1 - tmp1/20;//5%
    538          
    539            //уставка SPV сработки
    540            tmp1 =
    541              SPV_UST(SPVSRABUST_ICM_NZOP1to2_N) = codecUstNZOP1(1, MNGUST_ICM_NZOP1to2_N, getNativUstMngUSTAVKI(idxC, MNGUST_ICM_NZOP1to2_N));
    542            //уставка SPV возврата
    543            SPV_UST(SPVVOZVUST_ICM_NZOP1to2_N) = tmp1 - tmp1/20;//5%
    544          
    545            short tmpOffsetT    =
    546              getOffsetTimersCnf(idxC);   //компонент в конфигурации
    547          
    548                   //таймер 1
    549            setTimerPorog(tmpOffsetT+ TIMER1_NZOP1to2, 
    550              codecUstNZOP1(1, MNGVID_NZOP1to2, getNativUstMngUSTAVKI(idxC, MNGVID_NZOP1to2)));
    551          
    552                    //таймер 2
    553            setTimerPorog(tmpOffsetT+ TIMER2_NZOP1to2, 
    554              codecUstNZOP1(1, MNGVID_NZOP1to2_V, getNativUstMngUSTAVKI(idxC, MNGVID_NZOP1to2_V)));
    555          
    556                    //таймер 3
    557            setTimerPorog(tmpOffsetT+ TIMER3_NZOP1to2, 
    558              codecUstNZOP1(1, MNGVID_NZOP1to2_N, getNativUstMngUSTAVKI(idxC, MNGVID_NZOP1to2_N)));
    559          
    560                   //таймер 4 BO
    561            setTimerPorog(tmpOffsetT+ TIMER_BO_NZOP1to2, 10);
    562          
    563          
    564          }//prepareUstNZOP1(short idxC)
    565          
    566          int initIOCmd_NZOP1()
    567          {
    568            //инициал IO команд
    569            offsetIOCmdNZOP2 = IndexIO;//смещение для IO NZOP2
    570            return commonInitIOCmd(IOCMD_NZOP1to2_TOTAL);
    571          }
    572          
    573          int initTLCmd_NZOP1()
    574          {
    575            //инициал TL команд
    576            return commonInitTLCmd(TLCMD_NZOP1to2_TOTAL);
    577          }//initTLCmd_NZOP1()
    578          
    579          int initENACmd_NZOP1()
    580          {
    581            //инициал ENA команд
    582            return commonInitENACmd(ENACMD_NZOP1to2_TOTAL);
    583          }//initENACmd_NZOP1()
    584          
    585          void initTimersNZOP1(short idxC)
    586          {
    587            //запрос и инициал таймеров
    588            commonInitTimers(TIMERS_NZOP1to2_TOTAL);
    589          }//initTimersNZOP1()
    590          
    591          int codecUstNZOP1(char codec, short offset, int ust)
    592          //codec=0-кодировать
    593          //codec=1-раскодировать
    594          {
    595            //кодировать-раскодировать уставку
    596            //кодировать-раскодировать уставку
    597            int grzHI = 0;//верх граница
    598            int grzLOW= 0;//низ граница
    599            int step  = 1;//шаг
    600            switch(offset)
    601            {
    602              //уставки
    603            case MNGUST_UCM_NZOP1to2:
    604            case MNGUST_UCM_NZOP1to2_V:
    605            case MNGUST_UCM_NZOP1to2_N:
    606            case MNGUST_ICM_NZOP1to2:
    607            case MNGUST_ICM_NZOP1to2_V:
    608            case MNGUST_ICM_NZOP1to2_N:
    609              grzHI = 1000000;//верх граница
    610              grzLOW= 0;//низ граница
    611              step  = 1;//шаг
    612              break;
    613          
    614              //выдержки
    615          //  case MNGUST_BOBV_NZOP1to2://уставка БО БВ
    616            case MNGVID_NZOP1to2:
    617            case MNGVID_NZOP1to2_V:
    618            case MNGVID_NZOP1to2_N:
    619              grzHI = 2000000;//верх граница
    620              grzLOW= 0;//низ граница
    621              step  = 1;//шаг
    622              break;
    623          
    624            default:return ust;//уставка управления
    625            }//switch
    626          
    627            if(codec) return ust*step;
    628          //раскодировать уставку
    629            if(ust<grzLOW) return ERROR_UST;//-ust;
    630            if(ust>grzHI)  return ERROR_UST;//-ust;
    631            return ust/step;
    632          }//codecUstNZOP1(char *buf, short offset, int ust)
    633          
    634          int isDISactiv_NZOP1to2(int idxC)
    635          {
    636          //активность Регистратора ДИС
    637            return 0;//нет активности
    638          }//isDISactiv_NZOP1to2(int idxC)
    639          
    640          char copyNZOP1ToRepozitar(char packet)
    641          {
    642            memset(&rpzcomponent_obj, 0, sizeof(COMPONENT_OBJ));//стереть старое
    643          //копировать компонент 1 в репозитарий
    644            rpzcomponent_obj.componentEnable = 1;//разрешение компонента
    645            rpzcomponent_obj.kodC   = KOD_COMPONENT;         //код компонента
    646            rpzcomponent_obj.permanent = 0; //перманентный компонент
    647          
    648            strcpy(rpzcomponent_obj.nameComponent,  NZOP1_TITLE);       //имя компонента
    649            rpzcomponent_obj.sub_menu_component =  sub_menu_comp_NZOP1;//sub_menu_component;
    650          
    651            rpzcomponent_obj.twinControl = &(twinNZOP1[0]);//массив контроля близнецов
    652            twinNZOP1[0].twin_different = diffNZOP2ToRepozitar;//ф-ция контроля близнецов
    653          
    654            rpzcomponent_obj.cntClon     = CNT_STUPEN_NZOP;   //max к-во клонов
    655            rpzcomponent_obj.numClon     = 1;//номер клона
    656            rpzcomponent_obj.workToSignal = 0; //Работа на сигнал
    657          
    658            rpzcomponent_obj.initUstMng     = initUstNZOP1;    //инициал уставок
    659            rpzcomponent_obj.prepareUstSpv  = prepareUstNZOP1;//подготовка уставок
    660            rpzcomponent_obj.initIOCmd      = initIOCmd_NZOP1;      //инициал IO команд
    661            rpzcomponent_obj.initTLCmd      = initTLCmd_NZOP1;      //инициал TL команд
    662            rpzcomponent_obj.initENACmd     = initENACmd_NZOP1;     //инициал ENA команд
    663            rpzcomponent_obj.bo_bvCmd       = NULL; //настройка БО БВ команд
    664            rpzcomponent_obj.isDISactiv     = isDISactiv_NZOP1to2; //активность Регистратора ДИС
    665            rpzcomponent_obj.setBOBVtimer   = NULL; //инициал таймеров БО БВ
    666          
    667            rpzcomponent_obj.nameStatusIO = ionsNZOP1;          //имена и статус команд IO
    668            rpzcomponent_obj.initTimers   = initTimersNZOP1;    //запрос и инициал таймеров
    669            rpzcomponent_obj.logic        = logicNZOP1to2;         //логика компонента
    670          
    671            rpzcomponent_obj.codecUst = codecUstNZOP1;   //кодировать-раскодировать уставку
    672          
    673            return 0;//не пакетная регистрация
    674          }//
    675          
    676          #endif // _HIDE_COMPONENT
    677          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EditUprNZOP1
         8   -> UpravlRedactor
       8   EditUstNZOP1
         8   -> SystemEditUst
       8   EditVidNZOP1
         8   -> SystemEditUst
      24   KadrMenuFormat_upr_compNZOP1
        24   -> getCurrentMngUSTAVKI
        24   -> selectorUprStrNZOP1
        24   -> strcpy
      72   KadrMenuFormat_ustvidNZOP
        72   -> getUstOffsetMngUSTAVKI
        72   -> sprintf
        72   -> strcpy
       8   PereinitUprListCompNZOP1
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   PereinitUstListCompNZOP1
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   PereinitVidListCompNZOP1
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   UprCompNZOP1
         8   -> PassWord
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   UprListCompNZOP1
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
       8   UstCompNZOP1
         8   -> PassWord
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   UstListCompNZOP1
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
       8   VidCompNZOP1
         8   -> EditVidNZOP1
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   VidListCompNZOP1
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
      20   codecUstNZOP1
        20 __aeabi_idiv
      24   copyNZOP1ToRepozitar
        24   -> __aeabi_memset
        24   -> strcpy
       8   initENACmd_NZOP1
         8   -> commonInitENACmd
       8   initIOCmd_NZOP1
         8   -> commonInitIOCmd
       8   initTLCmd_NZOP1
         8   -> commonInitTLCmd
       8   initTimersNZOP1
         8   -> commonInitTimers
       0   initUstNZOP1
       0   isDISactiv_NZOP1to2
      24   prepareUstNZOP1
        24   -> CopyWideENAToENAcmd
        24   -> PrepareENACmd
        24   -> codecUstNZOP1
        24   -> getNativUstMngUSTAVKI
        24   -> getOffsetSPVUstCnf
        24   -> getOffsetTimersCnf
        24   -> setTimerPorog
        24 __aeabi_idiv
      16   selectorUprStrNZOP1
        16   -> NumBitCheckWord


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      16  ?_0
      16  ?_1
      16  ?_10
      20  ?_11
      20  ?_12
      16  ?_13
      20  ?_14
      20  ?_15
      16  ?_16
      24  ?_17
      24  ?_18
      16  ?_19
      20  ?_2
      12  ?_20
      16  ?_21
       8  ?_22
      20  ?_3
      12  ?_4
      20  ?_5
      20  ?_6
      16  ?_7
      16  ?_8
      20  ?_9
      52  EditUprNZOP1
      16  EditUstNZOP1
      16  EditVidNZOP1
     160  KadrMenuFormat_upr_compNZOP1
     188  KadrMenuFormat_ustvidNZOP
       8  NZOP1_TITLE
      68  PereinitUprListCompNZOP1
      68  PereinitUstListCompNZOP1
      68  PereinitVidListCompNZOP1
      28  UprCompNZOP1
      52  UprListCompNZOP1
      28  UstCompNZOP1
      52  UstListCompNZOP1
      24  VidCompNZOP1
      52  VidListCompNZOP1
     204  codecUstNZOP1
     308  copyNZOP1ToRepozitar
      16  initENACmd_NZOP1
      32  initIOCmd_NZOP1
      16  initTLCmd_NZOP1
      20  initTimersNZOP1
     168  initUstNZOP1
      56  ionsNZOP1
      12  isDISactiv_NZOP1to2
       4  offsetIOCmdNZOP2
     812  prepareUstNZOP1
     196  selectorUprStrNZOP1
      96  sub_menu_comp_NZOP1
      72  sub_menu_upr_compNZOP1
     108  sub_menu_ust_compNZOP1
      72  sub_menu_vid_compNZOP1
       4  twinNZOP1

 
     8 bytes in section .bss
   412 bytes in section .data
   404 bytes in section .rodata
 2 748 bytes in section .text
 
 2 748 bytes of CODE  memory
   404 bytes of CONST memory
   420 bytes of DATA  memory

Errors: none
Warnings: none
