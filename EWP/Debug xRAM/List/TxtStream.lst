###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Oct/2015  14:42:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\virtualMenu\TxtStream.c
#    Command line =  
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\virtualMenu\TxtStream.c" -lcN
#        "D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\" -o "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "D:\Program Files\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\Igor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\component\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\" --interwork
#        --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\TxtStream.lst
#    Object file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\TxtStream.o
#
###############################################################################

D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\virtualMenu\TxtStream.c
      1          /*
      2          #include <vcl.h>
      3          #include <strstrea.h>
      4          #include <math.h>
      5          #include <mem.h>
      6          #include <fstream.h>
      7          #include <strstrea.h>
      8          #include <iomanip.h>
      9          #pragma hdrstop
     10          */
     11          
     12          #include <stdio.h>
     13          #include <string.h>
     14          
     15          #include "virtualMenu\textstreamdef.h"
     16          #include "virtualMenu\textstreamfnc.h"
     17          
     18          void TxtStreamInit(void *pstr, 
     19                             short  (*pKadrFormat)(void *),
     20                             void *userPoint)
     21          {
     22          //предустановка текстового потока
     23            //найти макс к-во кадров в файле
     24            StreamControl *streamCntr = (StreamControl *)pstr;
     25            WorkVariantChar workVariantCharLoc;//локальный строчный буфер
     26            streamCntr->workCntr.twoString = &workVariantCharLoc;//строчный буфер
     27            streamCntr->workCntr.userPoint = userPoint;
     28            streamCntr->pKadrFormat = pKadrFormat;//формирователь кадра запомнить
     29          
     30            WORKGLOB_CNTR1 = -1;//глобальный счетчик кадров
     31            (*pKadrFormat)(&(streamCntr->workCntr));//формирователь кадра вызвать
     32            WORKGLOB_MAX1 = WORKLOC_CNTR1;//макс к-во кадров в файле
     33          
     34            WORKKADR_EKR1 = 1;//к-во кадров на экране
     35            TxtStreamReset(streamCntr);//сброс счетчиков
     36          
     37          }//TxtStreamInit()
     38          
     39          void TxtStreamReset(void *pstr)
     40          {
     41            StreamControl *streamCntr = (StreamControl *)pstr;
     42          //сброс счетчиков
     43            WORKGLOB_CNTR1 = -1;//глобальный счетчик кадров
     44            WORKGLOB_OLD1 = -1;
     45          
     46            streamCntr->PntStringViewer = 0;//указател строки
     47            streamCntr->topStrPnt = -1;//индекс верх элем
     48            streamCntr->StpStringViewer = -1;//stp указател строки
     49          }//TxtStreamReset(StreamControl *streamCntr)
     50          
     51          short TxtStreamDownButtonPrepare(void *pstr)
     52          {
     53          //подготовка DownButton
     54            StreamControl *streamCntr = (StreamControl *)pstr;
     55            WORKGLOB_OLD1++;
     56            if (WORKGLOB_OLD1 > WORKGLOB_MAX1-2)
     57              WORKGLOB_OLD1 = WORKGLOB_MAX1-2;
     58            WORKGLOB_CNTR1 = WORKGLOB_OLD1;//глобальный счетчик кадров
     59            return WORKGLOB_CNTR1;//глобальный счетчик кадров
     60          }//TxtStreamDownButtonPrepare()
     61          
     62          short TxtStreamPgDownButtonPrepare(void *pstr)
     63          {
     64            StreamControl *streamCntr = (StreamControl *)pstr;
     65          //подготовка PgDownButton
     66            if (WORKMAKER_VBR1>0 || WORKGLOB_MAX1-1==WORKGLOB_CNTR1)
     67              WORKGLOB_CNTR1 = WORKGLOB_OLD1;
     68          
     69            WORKGLOB_OLD1 = WORKGLOB_CNTR1;
     70            return WORKGLOB_CNTR1;//глобальный счетчик кадров
     71          }//TxtStreamPgDownButtonPrepare()
     72          
     73          short TxtStreamUpButtonPrepare(void *pstr)
     74          {
     75            StreamControl *streamCntr = (StreamControl *)pstr;
     76          //подготовка UpButton
     77            WORKGLOB_OLD1--;
     78            if (WORKGLOB_OLD1<0) WORKGLOB_OLD1=-1;
     79          
     80            WORKGLOB_CNTR1 = WORKGLOB_OLD1;
     81            return WORKGLOB_CNTR1;//глобальный счетчик кадров
     82          }//TxtStreamUpButtonPrepare()
     83          
     84          short TxtStreamPgUpButtonPrepare(void *pstr)
     85          {
     86            StreamControl *streamCntr = (StreamControl *)pstr;
     87          //подготовка PgUpButton
     88            WORKGLOB_OLD1-=WORKKADR_EKR1;
     89          
     90            if (WORKGLOB_OLD1<0) WORKGLOB_OLD1=-1;
     91          
     92            WORKGLOB_CNTR1 = WORKGLOB_OLD1;
     93            return WORKGLOB_CNTR1;//глобальный счетчик кадров
     94          }//TxtStreamPgUpButtonPrepare()
     95          
     96          short TxtStreamIteratorBegin(void *twoString, void *pstr)
     97          {
     98            StreamControl *streamCntr = (StreamControl *)pstr;
     99          //первый итератор движение вниз
    100            streamCntr->workCntr.twoString = twoString;//строчный буфер
    101            short tmp = TxtStreamIteratorMidle(streamCntr);
    102            WORKCNTR_KADR1 = 1;//счетчик кадров на экране
    103            WORKMAKER_VBR1 = 1;//маркер выбора
    104          
    105            return tmp;
    106          }//TxtStreamIteratorBegin(void *twoString, StreamControl *streamCntr)
    107          
    108          void TxtStreamIteratorEnd(void *pstr)
    109          {
    110            StreamControl *streamCntr = (StreamControl *)pstr;
    111          //конец страницы
    112            WORKMAKER_VBR1 =0;//маркер выбора
    113            WORKKADR_EKR1 = WORKCNTR_KADR1;//к-во кадров на экране
    114          }//TxtStreamIteratorEnd(StreamControl *streamCntr)
    115          
    116          short TxtStreamIteratorMidle(void *pstr)
    117          {
    118            StreamControl *streamCntr = (StreamControl *)pstr;
    119          //не первый итератор движение вниз
    120            WORKCNTR_KADR1 ++;//счетчик кадров на экране
    121          
    122            WORKGLOB_CNTR1 ++;
    123            WORKMAKER_VBR1 =1;//++;//маркер выбора
    124            if (
    125              (*streamCntr->pKadrFormat)(&(streamCntr->workCntr))//формирователь кадра вызвать
    126              <0)
    127            {
    128              //файла нет или пустой
    129              WORKMAKER_VBR1 = -1;//маркер выбора
    130              return -1;
    131            }//if
    132          
    133            else
    134            {
    135              if (WORKGLOB_CNTR1 < WORKGLOB_MAX1)  return 1;
    136              else
    137              {
    138                WORKGLOB_CNTR1 = WORKGLOB_MAX1-1;
    139          
    140                return 0;//достикнут конец файла
    141              }
    142            }//else
    143          
    144          }//TxtStreamIteratorMidle(StreamControl *streamCntr)
    145          
    146          void TxtStreamCorrect(void *pstr)
    147          {
    148            StreamControl *streamCntr = (StreamControl *)pstr;
    149          //коррекция текущий control
    150            WORKGLOB_CNTR1 -=
    151              streamCntr->StpStringViewer+1;//коррекция текущий control
    152          }//CorrectControlStruct()
    153          
    154          short TxtStreamMaxKadr(void *pstr)
    155          {
    156            StreamControl *streamCntr = (StreamControl *)pstr;
    157          //макс к-во кадров
    158            return WORKGLOB_MAX1;//макс к-во кадров в файле
    159          }//TxtStreamMaxKadr(StreamControl *streamCntr)
    160          
    161          short TxtStreamIdxKadr(void *pstr)
    162          {
    163            StreamControl *streamCntr = (StreamControl *)pstr;
    164          //индекс тек кадра
    165            return streamCntr->topStrPnt + streamCntr->PntStringViewer+1;
    166          }//TxtStreamIdxKadr(StreamControl *streamCntr)
    167          
    168          void TxtStreamSetEnd(void *pstr, short size_page)
    169          {
    170            StreamControl *streamCntr = (StreamControl *)pstr;
    171          //перейти на END
    172            short tmp = WORKGLOB_CNTR1;
    173          
    174            while((tmp+size_page)<WORKGLOB_MAX1)
    175            {
    176              tmp = WORKGLOB_CNTR1;
    177              WORKGLOB_CNTR1 += size_page;//глобальный счетчик кадров
    178            }//while
    179          
    180            if((tmp+1)==WORKGLOB_MAX1)
    181                           tmp -= size_page;//глобальный счетчик кадров
    182            if(tmp<0) tmp = 0;
    183          
    184            WORKGLOB_CNTR1 = tmp;
    185            streamCntr->topStrPnt = tmp;
    186            WORKGLOB_OLD1 = WORKGLOB_CNTR1;
    187          }//TxtStreamSetEnd(StreamControl *streamCntr)
    188          
    189          void TxtStreamSetIdxKadr(void *pstr, short kadr)
    190          {
    191            StreamControl *streamCntr = (StreamControl *)pstr;
    192          //Установка нового счетчика кадров
    193            WORKGLOB_CNTR1  = -1;//глобальный счетчик кадров
    194            streamCntr->PntStringViewer = 0;//указател строки
    195            for(short i=0; i<kadr; i++){
    196                streamCntr->topStrPnt = TxtStreamDownButtonPrepare(streamCntr);
    197                }//for
    198          }//TxtStreamSetIdxKadr(short kadr)
    199          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   TxtStreamCorrect
       0   TxtStreamDownButtonPrepare
       0   TxtStreamIdxKadr
     120   TxtStreamInit
       120   -- Indirect call
       120   -> TxtStreamReset
      16   TxtStreamIteratorBegin
        16   -> TxtStreamIteratorMidle
       0   TxtStreamIteratorEnd
      16   TxtStreamIteratorMidle
        16   -- Indirect call
       0   TxtStreamMaxKadr
       0   TxtStreamPgDownButtonPrepare
       0   TxtStreamPgUpButtonPrepare
       0   TxtStreamReset
       4   TxtStreamSetEnd
      24   TxtStreamSetIdxKadr
        24   -> TxtStreamDownButtonPrepare
       0   TxtStreamUpButtonPrepare


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  TxtStreamCorrect
      68  TxtStreamDownButtonPrepare
      32  TxtStreamIdxKadr
      84  TxtStreamInit
      52  TxtStreamIteratorBegin
      20  TxtStreamIteratorEnd
     124  TxtStreamIteratorMidle
      12  TxtStreamMaxKadr
      64  TxtStreamPgDownButtonPrepare
      60  TxtStreamPgUpButtonPrepare
      44  TxtStreamReset
     156  TxtStreamSetEnd
      84  TxtStreamSetIdxKadr
      56  TxtStreamUpButtonPrepare

 
 880 bytes in section .text
 
 880 bytes of CODE memory

Errors: none
Warnings: none
