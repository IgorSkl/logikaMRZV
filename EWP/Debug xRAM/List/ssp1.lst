###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:12:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\IAR projects\HR1_0100_00_I720_new2\ici\ssp1.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\ici\ssp1.c" -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --interwork --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\ssp1.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\ssp1.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\ici\ssp1.c
      1          /*------------------------------------------------------------------------------
      2          * Copyright (c) 2013 - Factory “KyivPrylad”
      3          * 
      4          * Permission to use, copy, modify, and distribute this software for any
      5          * purpose with or without fee is hereby granted, provided that the above
      6          * copyright notice and this permission notice appear in all copies.
      7          * 
      8          * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
      9          * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
     10          * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
     11          * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     12          * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     13          * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
     14          * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     15          * 
     16          *------------------------------------------------------------------------------
     17          *
     18          * Processor       : Lpc_3240
     19          * File Name       : u3l.c
     20          * Description     : Functions and Data for Low Level Communication,
     21                              BO BR
     22          
     23          *  Version        : 1.00
     24          *
     25          *       +----- (NEW | MODify | ADD | DELete)
     26          *       |
     27          *  No   |   When       Who                What
     28          *-----+---+----------+------------------+--------------------------------------
     29          * 000  NEW  02/09/13   Markovsky A       Creation
     30          *----------------------------------------------------------------------------*/
     31          #include "../LIB/CDL_AV0/lpc/include/lpc_types.h"
     32          #include "../LIB/CDL_AV0/lpc/include/lpc_irq_fiq.h"
     33          #include "../LIB/CDL_AV0/lpc/include/lpc_arm922t_cp15_driver.h"
     34          //#include "ea3250_board.h"
     35          #include "../LIB/CDL_AV0/csps/lpc32xx/include/lpc32xx_ssp_driver.h"
     36          #include "../LIB/CDL_AV0/csps/lpc32xx/include/lpc32xx_intc_driver.h"
     37          #include "../LIB/CDL_AV0/csps/lpc32xx/include/lpc32xx_timer_driver.h"
     38          #include "../LIB/CDL_AV0/csps/lpc32xx/include/lpc32xx_clkpwr_driver.h"
     39          #include "../LIB/CDL_AV0/csps/lpc32xx/include/lpc32xx_dma_driver.h"
     40          
     41          #include "lpc32xx_gpio_driver.h"
     42          extern void send_cb_spi1(void);
     43          extern void recv_cb_spi1(void);
     44          extern  INT_32 sspdev0;
     45          
     46          
     47          extern void Tci_recv_cb_ssp0(void)   @ "Fast_function";
     48          extern void Tci_send_cb_ssp0(void)   @ "Fast_function";
     49          
     50          extern void send_cb_ssp_Dma(void);
     51          extern void recv_cb_ssp_Dma(void);
     52          
     53          #define IDX_DMA_SSP0_MOSI 1
     54          #define IDX_DMA_SSP0_MISO 0
     55          
     56          long ssp1_hdr_init(void)
     57          {
     58            SSP_CONFIG_T sspcfg;
     59             SSP_CBS_T loc_ssp_cb;
     60            UNS_8 data;
     61            UNS_16 addr;
     62            int bytes;
     63           disable_irq_fiq();
     64            /* Disable interrupts in ARM core */
     65            
     66             /* The SSP can control the SSEL signal, but will assert the signal
     67               at the start of a single FIFO entry's transfer and de-assert it
     68               after the FIFO entry is sent. Some blocks need the chip select to
     69               remain asserted for the entire cycle (such as this serial EEPROM)
     70               so a GPIO will be used instead. */
     71            //GPIO->p2_mux_clr = P2_GPIO05_SSEL0;
     72            //GPIO->p2_dir_set = P2_DIR_GPIO(5);//30-bit
     73            //GPIO->p3_outp_set = P3_STATE_GPIO(5);//30-bit
     74            //GPIO->p3_outp_clr = P3_STATE_GPIO(5);//30-bit
     75            //bytes = GPIO->p3_outp_state;
     76            //data = bytes);
     77          
     78            GPIO->p2_mux_set = P2_GPIO05_SSEL0;
     79            /* The MISO, MOSI, and SCK signals are controlled by the SSP */
     80            GPIO->p_mux_set = (P_SPI1DATAIO_SSP0_MOSI |
     81                                  P_SPI1DATAIN_SSP0_MISO | P_SPI1CLK_SCK0);
     82          //CLKPWR->clkpwr_spi_clk_ctrl |= CLKPWR_SPICLK_USE_SPI1;/??
     83            /* Open SSP */
     84            sspcfg.databits = 16;
     85            sspcfg.mode = SSP_CR0_FRF_SPI;
     86            sspcfg.highclk_spi_frames = FALSE;
     87            sspcfg.usesecond_clk_spi = FALSE;
     88            sspcfg.ssp_clk = 12000000;//
     89            sspcfg.master_mode = TRUE;
     90            sspdev0 = Ssp_open(SSP0, (INT_32) & sspcfg);
     91            loc_ssp_cb.txcb = send_cb_spi1;
     92            loc_ssp_cb.rxcb = recv_cb_spi1;
     93            Ssp_ioctl(sspdev0, SSP_SET_CALLBACKS,(INT_32)&loc_ssp_cb);
     94          
     95             if (sspdev0 == 0)
     96            {
     97              /* Error */
     98              return -1;
     99            }
    100            
    101            //bytes = Ssp_ioctl(sspdev0, SSP_ENABLE_LOOPB, 1);//0-disable
    102            Int_disable1(IRQ_SSP0);
    103            int_install_irq_handler(IRQ_SSP0,Ssp0_int);
    104          
    105            bytes = Ssp_ioctl(sspdev0, SSP_ENABLE, 1);
    106            //  Ssp_Syncro();
    107            //Int_enable1(IRQ_SSP0);
    108            //bytes = Ssp_ioctl(sspdev0, SSP_ENABLE, 1);
    109              
    110            //Init SSP_Control
    111             *((long*)0x40004078) |= 3<<2;//Connect Spi to Dma
    112             *((long*)0x20084024)  = 0;//Disable chanels
    113             *((long*)0x20084014)  = 0;//Disable Spi Interrupt
    114             //allc Dma chanel
    115             
    116            //Init Dma Controller
    117            bytes = Dma_init();
    118            bytes = Dma_alloc_channel(IDX_DMA_SSP0_MOSI,send_cb_ssp_Dma);
    119            bytes = Dma_alloc_channel(IDX_DMA_SSP0_MISO,recv_cb_ssp_Dma);
    120            //Dma channel
    121            enable_irq_fiq();
    122          return  bytes;
    123          }
    124          
    125          
    126          static char chInSend_cb_ssp = 0;
    127          void send_cb_ssp_Dma(void)
    128          {
    129          long lV;
    130          register void *pv;
    131          
    132            pv = (void*)Dma_get_base();
    133          	lV = ((DMAC_REGS_T*)pv)->int_stat;
    134          	if(lV&(DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MOSI)))
    135          	{
    136          		chInSend_cb_ssp++;
    137          		//Detect Type Int
    138          		lV = ((DMAC_REGS_T*)pv)->int_tc_stat;
    139          		if(lV&(DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MOSI)))
    140          		Tci_send_cb_ssp0();//Hundle Terminal Interrupt
    141          		lV = ((DMAC_REGS_T*)pv)->int_err_stat;
    142          		if(lV&(DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MOSI)))
    143          		{
    144          			//Now simply Clear Req
    145          			((DMAC_REGS_T*)pv)->int_err_clear = DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MOSI);
    146          		}
    147          	}
    148            
    149          chInSend_cb_ssp++;
    150          
    151          }
    152          
    153          
    154          static char chInRecv_cb_ssp = 0;
    155          void recv_cb_ssp_Dma(void)
    156          {
    157            long lV;
    158            register void *pv;
    159          
    160             pv = (void*)Dma_get_base();
    161          	lV = ((DMAC_REGS_T*)pv)->int_stat;
    162          	if(lV&(DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MISO)))
    163          	{
    164          		chInRecv_cb_ssp++;
    165          		//Detect Type Int
    166          		lV = ((DMAC_REGS_T*)pv)->int_tc_stat;
    167          		if(lV&(DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MISO)))
    168          		Tci_recv_cb_ssp0();//Hundle Terminal Interrupt
    169          		lV = ((DMAC_REGS_T*)pv)->int_err_stat;
    170          		if(lV&(DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MISO)))
    171          		{
    172          			//Now simply Clear Req
    173          			((DMAC_REGS_T*)pv)->int_err_clear = DMAC_GET_CHAN_POS(IDX_DMA_SSP0_MISO);
    174          		}
    175          	}
    176          	
    177          	
    178          }
    179          
    180          long lBlockSpiCtr = 100000;
    181          void SpiStallHundler(void)
    182          {
    183          //Fix Error Crash SPI channel
    184            #ifdef _STATIC_MEMORY_BOOT 
    185            lBlockSpiCtr = 1000000;return;
    186          	//Flash
    187          	 for(;;)
    188            __asm volatile("BKPT 4");//Wait Very Long Time
    189            #else
    190          lBlockSpiCtr = 100000;
    191            #endif
    192          
    193          
    194          
    195          }
    196          
    197          
    198          
    199          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SpiStallHundler
       0   disable_irq_fiq
       0   enable_irq_fiq
      16   recv_cb_ssp_Dma
        16   -> Dma_get_base
        16   -> Tci_recv_cb_ssp0
      16   send_cb_ssp_Dma
        16   -> Dma_get_base
        16   -> Tci_send_cb_ssp0
      40   ssp1_hdr_init
        40   -> Dma_alloc_channel
        40   -> Dma_init
        40   -> Int_disable1
        40   -> Ssp_ioctl
        40   -> Ssp_open
        40   -> disable_irq_fiq
        40   -> enable_irq_fiq
        40   -> int_install_irq_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      20  SpiStallHundler
       1  chInRecv_cb_ssp
       1  chInSend_cb_ssp
      20  disable_irq_fiq
      20  enable_irq_fiq
       4  lBlockSpiCtr
      96  recv_cb_ssp_Dma
     116  send_cb_ssp_Dma
     320  ssp1_hdr_init

 
   2 bytes in section .bss
   4 bytes in section .data
 636 bytes in section .text
 
 636 bytes of CODE memory
   6 bytes of DATA memory

Errors: none
Warnings: 19
