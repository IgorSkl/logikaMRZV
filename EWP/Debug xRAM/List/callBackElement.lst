###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Oct/2015  14:31:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\callbackElement\callBackElement.c
#    Command line =  
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\callbackElement\callBackElement.c"
#        -lcN "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o
#        "D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\" --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\Igor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\component\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\" --interwork
#        --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\callBackElement.lst
#    Object file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\callBackElement.o
#
###############################################################################

D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\callbackElement\callBackElement.c
      1          /*
      2          #include <vcl.h>
      3          #include <strstrea.h>
      4          #include <math.h>
      5          #include <mem.h>
      6          #include <fstream.h>
      7          #include <strstrea.h>
      8          #include <iomanip.h>
      9          #pragma hdrstop
     10          
     11          #include "textstream.h"
     12          #include "vmenuDis.h"
     13          #include "component.h"
     14          */
     15          #include "lpc_types.h"
     16          
     17          #include <stdio.h>
     18          #include <string.h>
     19          
     20          #include "callbackelement\callbackelementdef.h"
     21          #include "callbackelement\callbackelementfnc.h"
     22          
     23          
     24          CALLBACK_MISSION cb_missionDEVICE1;//DEVICE1
     25          CALLBACK_MISSION *cb_mission_crrDEVICE1;//текущая миссия DEVICE1
     26          short  missionSeparatorDEVICE1;//сепаратор миссии DEVICE1
     27          int missionCiclingCounter1;//к-во оборотов в миссии
     28          
     29          CALLBACK_MISSION cb_missionDEVICE2;//DEVICE2
     30          CALLBACK_MISSION *cb_mission_crrDEVICE2;//текущая миссия DEVICE2
     31          short  missionSeparatorDEVICE2;//сепаратор миссии DEVICE2
     32          int missionCiclingCounter2;//к-во оборотов в миссии
     33          
     34          int isActivStepElementDEVICE1() @ "Fast_function"
     35          {
     36           //активность пошагового элемента
     37            if(CallBackElement(cb_mission_crrDEVICE1)>=0){
     38            //проверка к-ва оборотов в миссии
     39              missionCiclingCounter1 ++;//к-во оборотов в миссии
     40              if(missionCiclingCounter1>MAX_CICLMISSION) return -1;//миссия затянулась - авария
     41            }//if
     42            else{
     43               missionCiclingCounter1 =0;//к-во оборотов в миссии
     44               if(missionSeparatorDEVICE1!=CBACK_NOMISSION) return 1;//миссия закончилась
     45               //миссии не было
     46               return 2;
     47            }//else
     48            //миссия не закончилась
     49            return 0;
     50          }//isActivStepElementDEVICE1()
     51          
     52          int isActivStepElementDEVICE2() @ "Fast_function"
     53          {
     54           //активность пошагового элемента
     55            if(CallBackElement(cb_mission_crrDEVICE2)>=0){
     56            //проверка к-ва оборотов в миссии
     57              missionCiclingCounter2 ++;//к-во оборотов в миссии
     58              if(missionCiclingCounter2>MAX_CICLMISSION) return -1;//миссия затянулась - авария
     59            }//if
     60            else{
     61               missionCiclingCounter2 =0;//к-во оборотов в миссии
     62               if(missionSeparatorDEVICE2!=CBACK_NOMISSION) return 1;//миссия закончилась
     63               //миссии не было
     64               return 2;
     65            }//else
     66            //миссия не закончилась
     67            return 0;
     68          }//isActivStepElementDEVICE2()
     69          
     70          short CallBackElement(CALLBACK_MISSION *cb_mission) @ "Fast_function"
     71          {
     72          //возвратный элемент
     73            if(cb_mission->callBackMaxer<0)  //максимальный действительный индекс массива возвр перехода
     74            {
     75              cb_mission->callBackIndexer=0;//текущий индекс массива возвратного перехода
     76              return cb_mission->callBackMaxer;//массив возвратного перехода пустой
     77            }//if
     78          
     79            cBackTask *cbTmp;//указатель на ф-цию callBack
     80          
     81            cbTmp = *(cBackTask *)(cb_mission->callBackTask[cb_mission->callBackIndexer].pTask);
     82            while(cbTmp==NULL) //искать действит ф-цию возвратного перехода
     83            {
     84              cb_mission->callBackIndexer++;//текущий индекс массива возвратного перехода
     85              cbTmp = *(cBackTask *)(cb_mission->callBackTask[cb_mission->callBackIndexer].pTask);
     86              if(cb_mission->callBackIndexer > cb_mission->callBackMaxer)
     87              {
     88                cb_mission->callBackMaxer=-1; //максимальный действительный индекс массива возвр перехода
     89                cb_mission->callBackIndexer=0;//текущий индекс массива возвратного перехода
     90                return cb_mission->callBackMaxer;//переполнение
     91              }//if
     92            }//while
     93          
     94            if(
     95              cbTmp(&(cb_mission->callBackTask[cb_mission->callBackIndexer]))//возвратный переход
     96              ==0//успешный переход
     97            )
     98            {
     99              cb_mission->callBackTask[cb_mission->callBackIndexer].pTask = NULL;//указат на задачу
    100              cb_mission->callBackTask[cb_mission->callBackIndexer].callBackStepCntr=0;//счетчик шагов
    101            }//if
    102            else
    103            {
    104              cb_mission->callBackTask[cb_mission->callBackIndexer].callBackStepCntr++;//счетчики шагов
    105              return cb_mission->callBackMaxer;//если неудача то задачи не переключаются
    106            }//else
    107          
    108            cb_mission->callBackIndexer++;//текущий индекс массива возвратного перехода
    109            return cb_mission->callBackMaxer;
    110          }//CallBackElement()
    111          
    112          short OrderCallBack(CALLBACK_MISSION *cb_mission, char (*pfW)(CALLBACKELEMENT_TASK *))
    113          {
    114          //заказать возвратный переход
    115            if(cb_mission->callBackMaxer==MAX_TASKMISSION-1) return -1;//переполнение массива возвр перехода
    116            cb_mission->callBackMaxer++;//максимальный действительный индекс массива возвр перехода
    117            cb_mission->callBackTask[cb_mission->callBackMaxer].pTask = (void *)pfW;//массив возвратного перехода
    118            cb_mission->callBackTask[cb_mission->callBackMaxer].callBackStepCntr = 0;//счетчики шагов
    119            return cb_mission->callBackMaxer;
    120          }
    121          
    122          short SetTaskParam1CallBack(CALLBACK_MISSION *cb_mission, TASKMISSION_DEFINE1 *ptmDefine)
    123          {
    124          //параметры отдельной задачи
    125            cb_mission->callBackTask[cb_mission->callBackMaxer].tmDefine.source = ptmDefine->source;
    126            cb_mission->callBackTask[cb_mission->callBackMaxer].tmDefine.dest   = ptmDefine->dest;
    127            cb_mission->callBackTask[cb_mission->callBackMaxer].tmDefine.count  = ptmDefine->count;
    128            return cb_mission->callBackMaxer;
    129          }//SetTaskParam1CallBack(CALLBACK_MISSION *cb_mission, TASKMISSION_DEFINE1 *ptmDefine)
    130          
    131          void initCallBackElement()
    132          {
    133          //инит callBackElement1
    134            cb_mission_crrDEVICE1 = &cb_missionDEVICE1;//текущая миссия
    135            cb_mission_crrDEVICE1->callBackMaxer = -1; //исх сост миссии
    136            missionSeparatorDEVICE1 = CBACK_NOMISSION;//сепаратор миссии - нет миссии
    137          
    138          //инит callBackElement2
    139            cb_mission_crrDEVICE2 = &cb_missionDEVICE2;//текущая миссия
    140            cb_mission_crrDEVICE2->callBackMaxer = -1; //исх сост миссии
    141            missionSeparatorDEVICE2 = CBACK_NOMISSION;//сепаратор миссии - нет миссии
    142          }//initCallBackElement()
    143          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CallBackElement
        16   -- Indirect call
       0   OrderCallBack
       0   SetTaskParam1CallBack
       0   initCallBackElement
       8   isActivStepElementDEVICE1
         8   -> CallBackElement
       8   isActivStepElementDEVICE2
         8   -> CallBackElement


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
     252  CallBackElement
      76  OrderCallBack
      68  SetTaskParam1CallBack
      44  cb_missionDEVICE1
      44  cb_missionDEVICE2
       4  cb_mission_crrDEVICE1
       4  cb_mission_crrDEVICE2
      84  initCallBackElement
     120  isActivStepElementDEVICE1
     120  isActivStepElementDEVICE2
       4  missionCiclingCounter1
       4  missionCiclingCounter2
       2  missionSeparatorDEVICE1
       2  missionSeparatorDEVICE2

 
 108 bytes in section .bss
 252 bytes in section .text
 516 bytes in section Fast_function
 
 768 bytes of CODE memory
 108 bytes of DATA memory

Errors: none
Warnings: none
