###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:11:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\logictimers\ILogTimerRES.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\logictimers\ILogTimerRES.c"
#        -lcN "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o
#        "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --interwork --cpu_mode arm
#        -Ohs --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\ILogTimerRES.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\ILogTimerRES.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\logictimers\ILogTimerRES.c
      1          
      2          #include "bazisdef.h"
      3          #include "logictimersdef.h"
      4          #include "logictimersfnc.h"
      5          
      6          //массив EL триггеров дл€ лог таймеров
      7          extern int  elTrgOldTimer[];
      8          extern int  elTrgOutTimer[];
      9          //лог массив запуска таймеров
     10          extern int  logMassTimer[];
     11          //главный массив лог таймеров
     12          extern BAZIS_TIMER_MEM  bazisTimerMem[];
     13          //глобальный сброс всех таймеров
     14          extern int  globalTimerReset;
     15          
     16          //#define _ILOGTIMER_
     17          /**********************************************
     18          ќЅ–ј“Ќџ… ‘ќ–ћ»–ќ¬ј“≈Ћ№
     19          tNumber - номер таймера
     20          RES - сброс таймера
     21          ¬ыход - флаг работы
     22          **********************************************/
     23          int ILogTimerRES(int tNumber, int RES) @ "Fast_function"
     24          {
     25            if (globalTimerReset)
     26            {
     27          // return LogTimerRES(tNumber, 1, 1);
     28          //#include "logTimerRES.ci"
     29              int tmp = *bazisTimerMem[tNumber].pntInputSignal;
     30          //if (RES)
     31          //{
     32              elTrgOldTimer[tNumber] = tmp;
     33              elTrgOutTimer[tNumber] = 0;//выход триг ускор переноса
     34              bazisTimerMem[tNumber].RESET = 1;
     35          //}//if
     36          
     37          //поймать фронт
     38              if ((tmp^elTrgOldTimer[tNumber])&(tmp^1))  elTrgOutTimer[tNumber] = 1;
     39          
     40          //#endif // _ILOGTIMER_
     41          
     42              elTrgOldTimer[tNumber] = tmp;
     43          
     44          //если таймер досчитал
     45              if (bazisTimerMem[tNumber].FINISCH)
     46              {
     47                bazisTimerMem[tNumber].RESET = 1;
     48                elTrgOutTimer[tNumber] = 0;
     49              }//if
     50              /*
     51              else
     52              {
     53                if (!RES)
     54                  bazisTimerMem[tNumber].RESET = 0;
     55              }
     56              */
     57              return elTrgOutTimer[tNumber];
     58            }//if (globalTimerReset)
     59          
     60          //  return LogTimerRES(tNumber, 1, RES);
     61          //#define _IS_RES_
     62          //#include "logTimerRES.ci"
     63            int tmp = *bazisTimerMem[tNumber].pntInputSignal;
     64            if (RES)
     65            {
     66              elTrgOldTimer[tNumber] = tmp;
     67              elTrgOutTimer[tNumber] = 0;//выход триг ускор переноса
     68              bazisTimerMem[tNumber].RESET = 1;
     69            }//if
     70          
     71          //поймать фронт
     72            if ((tmp^elTrgOldTimer[tNumber])&(tmp^1))  elTrgOutTimer[tNumber] = 1;
     73          
     74          //#endif // _ILOGTIMER_
     75          
     76            elTrgOldTimer[tNumber] = tmp;
     77          
     78          //если таймер досчитал
     79            if (bazisTimerMem[tNumber].FINISCH)
     80            {
     81              bazisTimerMem[tNumber].RESET = 1;
     82              elTrgOutTimer[tNumber] = 0;
     83            }//if
     84            else
     85            {
     86              if (!RES)
     87                bazisTimerMem[tNumber].RESET = 0;
     88            }
     89            return elTrgOutTimer[tNumber];
     90          }//ILogTimerRES(char tNumber, char RES)
     91          
     92          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   ILogTimerRES


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     216  ILogTimerRES

 
 216 bytes in section Fast_function
 
 216 bytes of CODE memory

Errors: none
Warnings: none
