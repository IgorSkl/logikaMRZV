###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Oct/2015  14:35:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\LIB\source\lpc32xx_gpio_driver.c
#    Command line =  
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\LIB\source\lpc32xx_gpio_driver.c"
#        -lcN "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o
#        "D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\" --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\Igor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\component\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\" --interwork
#        --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\lpc32xx_gpio_driver.lst
#    Object file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\lpc32xx_gpio_driver.o
#
###############################################################################

D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\LIB\source\lpc32xx_gpio_driver.c
      1          /***********************************************************************
      2           * $Id: lpc32xx_gpio_driver.c 30870 2009-07-05 10:16:16Z anderslu $
      3           *
      4           * Project: LPC32xx GPIO driver
      5           *
      6           * Description:
      7           *     This file contains driver support for the LPC32xx GPIO block.
      8           *
      9           ***********************************************************************
     10           * Software that is described herein is for illustrative purposes only
     11           * which provides customers with programming information regarding the
     12           * products. This software is supplied "AS IS" without any warranties.
     13           * NXP Semiconductors assumes no responsibility or liability for the
     14           * use of the software, conveys no license or title under any patent,
     15           * copyright, or mask work right to the product. NXP Semiconductors
     16           * reserves the right to make changes in the software without
     17           * notification. NXP Semiconductors also make no representation or
     18           * warranty that such application will be suitable for the specified
     19           * use without further testing or modification.
     20           *********************************************************************/
     21          
     22          #include "lpc32xx_gpio_driver.h"
     23          
     24          /***********************************************************************
     25           * GPIO driver package data
     26          ***********************************************************************/
     27          
     28          /***********************************************************************
     29           * GPIO driver public functions
     30           **********************************************************************/
     31          
     32          /***********************************************************************
     33           *
     34           * Function: gpio_set_gpo_state
     35           *
     36           * Purpose:
     37           *     Sets and clears GPO or GPIO output states, returns current states
     38           *
     39           * Processing:
     40           *     See function.
     41           *
     42           * Parameters:
     43           *     set_pins : Pin states to set (high)
     44           *     clr_pins : Pin states to clear (low)
     45           *
     46           * Outputs: None
     47           *
     48           * Returns: Current state of all drive pins
     49           *
     50           * Notes: None
     51           *
     52           **********************************************************************/
     53          UNS_32 gpio_set_gpo_state(UNS_32 set_pins,
     54                                    UNS_32 clr_pins)
     55          {
     56            if (set_pins != 0)
     57            {
     58              GPIO->p3_outp_set = set_pins;
     59            }
     60          
     61            if (clr_pins != 0)
     62            {
     63              GPIO->p3_outp_clr = clr_pins;
     64            }
     65          
     66            return GPIO->p3_outp_state;
     67          }
     68          
     69          /***********************************************************************
     70           *
     71           * Function: gpio_set_dir
     72           *
     73           * Purpose:
     74           *     Sets and clears pin input and output states, returns current
     75           *     states
     76           *
     77           * Processing:
     78           *     See function.
     79           *
     80           * Parameters:
     81           *     out_pins : Pin states to set to outputs
     82           *     in_pins  : Pin states to set to inputs
     83           *
     84           * Outputs: None
     85           *
     86           * Returns: Current direction state of all pins
     87           *
     88           * Notes: None
     89           *
     90           **********************************************************************/
     91          UNS_32 gpio_set_dir(UNS_32 out_pins,
     92                              UNS_32 in_pins)
     93          {
     94            if (out_pins != 0)
     95            {
     96              GPIO->p2_dir_set = out_pins;
     97            }
     98          
     99            if (in_pins != 0)
    100            {
    101              GPIO->p2_dir_clr = in_pins;
    102            }
    103          
    104            return GPIO->p2_dir_state;
    105          }
    106          
    107          /***********************************************************************
    108           *
    109           * Function: gpio_set_sdr_state
    110           *
    111           * Purpose:
    112           *     Sets and clears SDRAM pin output states (when muxed as GPIOs),
    113           *     returns current states
    114           *
    115           * Processing:
    116           *     See function.
    117           *
    118           * Parameters:
    119           *     set_pins : Pin states to set (high)
    120           *     clr_pins : Pin states to clear (low)
    121           *
    122           * Outputs: None
    123           *
    124           * Returns: Current state of all SDRAM pins
    125           *
    126           * Notes: None
    127           *
    128           **********************************************************************/
    129          UNS_32 gpio_set_sdr_state(UNS_32 set_pins,
    130                                    UNS_32 clr_pins)
    131          {
    132            if (set_pins != 0)
    133            {
    134              GPIO->p2_outp_set = set_pins;
    135            }
    136          
    137            if (clr_pins != 0)
    138            {
    139              GPIO->p2_outp_clr = clr_pins;
    140            }
    141          
    142            return GPIO->p2_inp_state;
    143          }
    144          
    145          /***********************************************************************
    146           *
    147           * Function: gpio_set_p0_state
    148           *
    149           * Purpose:
    150           *     Sets or clears output states for P0 pins, returns the current P0
    151           *     states.
    152           *
    153           * Processing:
    154           *     See function.
    155           *
    156           * Parameters:
    157           *     set_pins : Pin states to set (high)
    158           *     clr_pins : Pin states to clear (low)
    159           *
    160           * Outputs: None
    161           *
    162           * Returns: Current state of all P0 pins
    163           *
    164           * Notes: None
    165           *
    166           **********************************************************************/
    167          UNS_32 gpio_set_p0_state(UNS_32 set_pins,
    168                                   UNS_32 clr_pins)
    169          {
    170            if (set_pins != 0)
    171            {
    172              GPIO->p0_outp_set = set_pins;
    173            }
    174          
    175            if (clr_pins != 0)
    176            {
    177              GPIO->p0_outp_clr = clr_pins;
    178            }
    179          
    180            return GPIO->p0_outp_state;
    181          }
    182          
    183          /***********************************************************************
    184           *
    185           * Function: gpio_set_p0_dir
    186           *
    187           * Purpose: Sets and clears P0 pin direction, returns current direction
    188           *
    189           * Processing:
    190           *     See function.
    191           *
    192           * Parameters:
    193           *     out_pins : Pin states to set to outputs
    194           *     in_pins  : Pin states to set to inputs
    195           *
    196           * Outputs: None
    197           *
    198           * Returns: Current direction state of all pins
    199           *
    200           * Notes: None
    201           *
    202           **********************************************************************/
    203          UNS_32 gpio_set_p0_dir(UNS_32 out_pins,
    204                                 UNS_32 in_pins)
    205          {
    206            if (out_pins != 0)
    207            {
    208              GPIO->p0_dir_set = out_pins;
    209            }
    210          
    211            if (in_pins != 0)
    212            {
    213              GPIO->p0_dir_clr = in_pins;
    214            }
    215          
    216            return GPIO->p0_dir_state;
    217          }
    218          
    219          /***********************************************************************
    220           *
    221           * Function: gpio_set_p1_state
    222           *
    223           * Purpose:
    224           *     Sets or clears output states for P1 pins, returns the current P1
    225           *     states.
    226           *
    227           * Processing:
    228           *     See function.
    229           *
    230           * Parameters:
    231           *     set_pins : Pin states to set (high)
    232           *     clr_pins : Pin states to clear (low)
    233           *
    234           * Outputs: None
    235           *
    236           * Returns: Current state of all P1 pins
    237           *
    238           * Notes: None
    239           *
    240           **********************************************************************/
    241          UNS_32 gpio_set_p1_state(UNS_32 set_pins,
    242                                   UNS_32 clr_pins)
    243          {
    244            if (set_pins != 0)
    245            {
    246              GPIO->p1_outp_set = set_pins;
    247            }
    248          
    249            if (clr_pins != 0)
    250            {
    251              GPIO->p1_outp_clr = clr_pins;
    252            }
    253          
    254            return GPIO->p1_outp_state;
    255          }
    256          
    257          /***********************************************************************
    258           *
    259           * Function: gpio_set_p1_dir
    260           *
    261           * Purpose: Sets and clears P1 pin direction, returns current direction
    262           *
    263           * Processing:
    264           *     See function.
    265           *
    266           * Parameters:
    267           *     out_pins : Pin states to set to outputs
    268           *     in_pins  : Pin states to set to inputs
    269           *
    270           * Outputs: None
    271           *
    272           * Returns: Current direction state of all pins
    273           *
    274           * Notes: None
    275           *
    276           **********************************************************************/
    277          UNS_32 gpio_set_p1_dir(UNS_32 out_pins,
    278                                 UNS_32 in_pins)
    279          {
    280            if (out_pins != 0)
    281            {
    282              GPIO->p1_dir_set = out_pins;
    283            }
    284          
    285            if (in_pins != 0)
    286            {
    287              GPIO->p1_dir_clr = in_pins;
    288            }
    289          
    290            return GPIO->p1_dir_state;
    291          }
    292          /***********************************************************************
    293           *
    294           * Function: i2s_pin_mux
    295           *
    296           * Purpose: configures the pin muxing for the supplied I2S device
    297           *
    298           * Processing:
    299           *     See function.
    300           *
    301           * Parameters:
    302           *     i2s_num : I2S block to set, can be 0 or 1
    303           *     en_dis :  I2S muxing enable (1), or disable (0)
    304           *
    305           * Outputs: None
    306           *
    307           *
    308           * Notes: None
    309           *
    310           **********************************************************************/
    311          void i2s_pin_mux(UNS_32 i2s_num, UNS_32 en_dis)
    312          {
    313          
    314            /* I2S0 */
    315            if (i2s_num == 0)
    316            {
    317              if (en_dis == 1)
    318              {
    319                GPIO->p0_mux_set   = (P0_GPOP2_I2SRXSDA0 | P0_GPOP3_I2SRXCLK0 |
    320                  P0_GPOP4_I2SRXWS0 | P0_GPOP5_I2STXSDA0 | P0_GPOP6_I2STXCLK0 |
    321                  P0_GPOP7_I2STXWS0) ;
    322              }
    323              else
    324              {
    325                GPIO->p0_mux_clr   = (P0_GPOP2_I2SRXSDA0 | P0_GPOP3_I2SRXCLK0 |
    326                  P0_GPOP4_I2SRXWS0 | P0_GPOP5_I2STXSDA0 | P0_GPOP6_I2STXCLK0 |
    327                  P0_GPOP7_I2STXWS0) ;
    328              }
    329            }
    330          
    331            /* I2S1 */
    332            if (i2s_num == 1)
    333            {
    334              if (en_dis == 1)
    335              {
    336                GPIO->p_mux_clr = (P_I2STXSDA1_MAT31 | P_I2STXCLK1_MAT30
    337                                      | P_I2STXWS1_CAP30);
    338                GPIO->p0_mux_set = (P0_GPOP0_I2SRXCLK1 | P0_GPOP1_I2SRXWS1);
    339                /* Note that I2S1RX_SDA does not need to be muxed as it is
    340                   connected to the block */
    341              }
    342              else
    343              {
    344                GPIO->p_mux_set = (P_I2STXSDA1_MAT31 | P_I2STXCLK1_MAT30
    345                                      | P_I2STXWS1_CAP30);
    346                GPIO->p0_mux_clr = (P0_GPOP0_I2SRXCLK1 | P0_GPOP1_I2SRXWS1);
    347              }
    348            }
    349          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   gpio_set_dir
       0   gpio_set_gpo_state
       0   gpio_set_p0_dir
       0   gpio_set_p0_state
       0   gpio_set_p1_dir
       0   gpio_set_p1_state
       0   gpio_set_sdr_state
       0   i2s_pin_mux


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      60  gpio_set_dir
      60  gpio_set_gpo_state
      48  gpio_set_p0_dir
      48  gpio_set_p0_state
      48  gpio_set_p1_dir
      48  gpio_set_p1_state
      60  gpio_set_sdr_state
     116  i2s_pin_mux

 
 552 bytes in section .text
 
 552 bytes of CODE memory

Errors: none
Warnings: none
