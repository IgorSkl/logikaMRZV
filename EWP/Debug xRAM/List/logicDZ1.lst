###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:11:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\IAR projects\HR1_0100_00_I720_new2\component\logicDZ1.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\logicDZ1.c" -lcN
#        "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o
#        "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --interwork --cpu_mode arm
#        -Ohs --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\logicDZ1.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\logicDZ1.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\logicDZ1.c
      1          
      2          #include <stdio.h>
      3          #include <string.h>
      4          
      5          #include "bazisdef.h"
      6          #include "component\componentdef.h"
      7          #include "psuperVisor\psvisor_helpdef.h"
      8          
      9          #include "logictimers\logictimersmac.h"
     10          
     11          #include "logictimers\logictimersfnc.h"
     12          
     13          #include "..\bazis.h"
     14          
     15          #include "zonaVRT\zonaVRTdef.h"
     16          #include "zonaVRT\zonaVRTfnc.h"
     17          
     18          #include "toSpeedOptim.h"
     19          
     20          #define _HIDE_COMPONENT
     21          #include "PRM1Component.c"
     22          #include "DZ1Component.c"
     23          #include "DZ2Component.c"
     24          
     25          extern int GlobalPO1;
     26          extern int GlobalPO2;
     27          extern int GlobalPO3;
     28          extern int GlobalPO4;
     29          extern int GlobalLevel_UCM;
     30          extern int GlobalLevel_ICM;
     31          extern int GlobalLevelI_ABC[];
     32          
     33          extern COMPONENT_OBJ  cnfCOMPONENT[];//конфигурация
     34          extern int  logMassTimer[];
     35          extern int  ENAcmd[];
     36          extern int  spvUSTAVKI[];//текущие уставки супервизора
     37          extern int   tempLog[];
     38          extern int   WideCmdRTBuffer[];
     39          //неисправность цепей напр
     40          //extern int  isFAILU_COMMON_DZ;
     41          extern int  isFAILU_DZ;
     42          extern int  offsetIOCmdDZ5;//смещение для IO DZ5
     43          extern int offsetENACmdPRM1;//смещение для ENA PRM1
     44          extern int offsetSPVCmdPRM1;//смещение для SPV PRM1
     45          extern int offsetIOCmdPRM1;//смещение для IO PRM1
     46          
     47          extern int  spvUSTAVKI[];//текущие уставки супервизора
     48          
     49          extern INT_64 koordXZ_64;//=353534;//125001;//160697;//250000;
     50          extern INT_64 koordYZ_64;//=421325;//216507;//191512;//0;
     51          //комплексные сопротивления
     52          extern INT_64 resistance_fA0X1, resistance_fA0Y1;
     53          extern INT_64 resistance_fB0X1, resistance_fB0Y1;
     54          extern INT_64 resistance_fC0X1, resistance_fC0Y1;
     55          extern INT_64 resistance_fAMX, resistance_fAMY;
     56          extern INT_64 resistance_fBMX, resistance_fBMY;
     57          extern INT_64 resistance_fCMX, resistance_fCMY;
     58          extern int isValidZonaDZ1OF;//флаг валидности зоны
     59          extern int isValidZonaDZ1MF;//флаг валидности зоны
     60          extern int isTriangleZonaBD[];//зона ДЗ треугольник-четырехугольник
     61          
     62          extern int flag_max_monitoring;//макс параметры сработки
     63          
     64          void  logicDZ1(int idxC) @ "Fast_function"
     65          {
     66          //логика компонента
     67              int tmpOffsetT    =
     68                          cnfCOMPONENT[idxC].offsetTimers;   //таймера компонента в конфигурации
     69              int tmpOffsetIO   =
     70                          cnfCOMPONENT[idxC].offsetIOCmd;    //IO команды
     71              int tmpOffsetENA  =
     72                          cnfCOMPONENT[idxC].offsetENACmd;    //ENA команды
     73              int tmpOffsetUSpv =
     74                          cnfCOMPONENT[idxC].offsetUstSpv;    //уставки SPV
     75              int tmpOffsetTL   =
     76                          cnfCOMPONENT[idxC].offsetTLCmd;    //TL команды
     77          
     78          //токи
     79            detectorLevelUP3F(GlobalLevelI_ABC,
     80                                               tmpOffsetUSpv+SPVSRAB_DZ1_MTZ,
     81                                               tmpOffsetUSpv+SPVVOZV_DZ1_MTZ,
     82                                               tmpOffsetUSpv+SPV_OUTA_DZ1_MTZ);
     83          
     84          //попадание Z в зону  DZ1
     85            //----------OF
     86          int LocalPO_DZ1OF = 0;
     87          if(isTriangleZonaBD[0]){
     88          //треугольник
     89            koordXZ_64=resistance_fA0X1; koordYZ_64=resistance_fA0Y1;
     90          int LocalPO_DZ1OFA = isViewZTrianMethod_64VRT( 0, ISZ_DZ1OFA);//&
     91          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_I005)^1);
     92            koordXZ_64=resistance_fB0X1; koordYZ_64=resistance_fB0Y1;
     93          int LocalPO_DZ1OFB = isViewZTrianMethod_64VRT( 0, ISZ_DZ1OFB);// &
     94          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_I005)^1);
     95            koordXZ_64=resistance_fC0X1; koordYZ_64=resistance_fC0Y1;
     96          int LocalPO_DZ1OFC = isViewZTrianMethod_64VRT( 0, ISZ_DZ1OFC);// &
     97          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_I005)^1);
     98              LocalPO_DZ1OF = LocalPO_DZ1OFA | LocalPO_DZ1OFB | LocalPO_DZ1OFC;
     99           if(isValidZonaDZ1OF) LocalPO_DZ1OF = 0;//флаг валидности зоны
    100                               }//if(isTriangleZonaBD[0])
    101          else {
    102            koordXZ_64=resistance_fA0X1; koordYZ_64=resistance_fA0Y1;
    103          int LocalPO_DZ1OFA = isViewZMethod_64VRT( 0, ISZ_DZ1OFA);//&
    104          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_I005)^1);
    105            koordXZ_64=resistance_fB0X1; koordYZ_64=resistance_fB0Y1;
    106          int LocalPO_DZ1OFB = isViewZMethod_64VRT( 0, ISZ_DZ1OFB);// &
    107          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_I005)^1);
    108            koordXZ_64=resistance_fC0X1; koordYZ_64=resistance_fC0Y1;
    109          int LocalPO_DZ1OFC = isViewZMethod_64VRT( 0, ISZ_DZ1OFC);// &
    110          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_I005)^1);
    111              LocalPO_DZ1OF = LocalPO_DZ1OFA | LocalPO_DZ1OFB | LocalPO_DZ1OFC;
    112           if(isValidZonaDZ1OF) LocalPO_DZ1OF = 0;//флаг валидности зоны
    113          }//else
    114          
    115            //----------MF
    116          int LocalPO_DZ1MF = 0;
    117          if(isTriangleZonaBD[1]){
    118          //треугольник
    119            koordXZ_64=resistance_fAMX; koordYZ_64=resistance_fAMY;
    120          int LocalPO_DZ1MFA = isViewZTrianMethod_64VRT( 1, ISZ_DZ1MFA);// &
    121          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_I005)^1);
    122            koordXZ_64=resistance_fBMX; koordYZ_64=resistance_fBMY;
    123          int LocalPO_DZ1MFB = isViewZTrianMethod_64VRT( 1, ISZ_DZ1MFB);// &
    124          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_I005)^1);
    125            koordXZ_64=resistance_fCMX; koordYZ_64=resistance_fCMY;
    126          int LocalPO_DZ1MFC = isViewZTrianMethod_64VRT( 1, ISZ_DZ1MFC);// &
    127          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_I005)^1);
    128              LocalPO_DZ1MF = LocalPO_DZ1MFA | LocalPO_DZ1MFB | LocalPO_DZ1MFC;
    129              if(isValidZonaDZ1MF) LocalPO_DZ1MF=0;//флаг валидности зоны
    130                               }//if(isTriangleZonaBD[0])
    131          else {
    132            koordXZ_64=resistance_fAMX; koordYZ_64=resistance_fAMY;
    133          int LocalPO_DZ1MFA = isViewZMethod_64VRT( 1, ISZ_DZ1MFA);// &
    134          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_I005)^1);
    135            koordXZ_64=resistance_fBMX; koordYZ_64=resistance_fBMY;
    136          int LocalPO_DZ1MFB = isViewZMethod_64VRT( 1, ISZ_DZ1MFB);// &
    137          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_I005)^1);
    138            koordXZ_64=resistance_fCMX; koordYZ_64=resistance_fCMY;
    139          int LocalPO_DZ1MFC = isViewZMethod_64VRT( 1, ISZ_DZ1MFC);// &
    140          //          (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_I005)^1);
    141              LocalPO_DZ1MF = LocalPO_DZ1MFA | LocalPO_DZ1MFB | LocalPO_DZ1MFC;
    142              if(isValidZonaDZ1MF) LocalPO_DZ1MF=0;//флаг валидности зоны
    143          }//else
    144          
    145            int LocalPO_MDZ1MF = 
    146                                   SPV_UST(SPV_OUTA_DZ1_MTZ) |
    147                                   SPV_UST(SPV_OUTB_DZ1_MTZ) |
    148                                   SPV_UST(SPV_OUTC_DZ1_MTZ); 
    149          
    150            //*******DZ1********
    151            int commonDZ1 =
    152              //CMD1_DZ1
    153              (IO_LOGIC(IOCMD1_DZ1)^1) &
    154              ENA_LOGIC(ENA_DZ1_1);// ENA_DZ1;
    155          
    156              //L1 DZ1
    157             int locPO_DZ1MF = 
    158                  commonDZ1 &
    159                  //ПО ДЗ1
    160                  (GlobalPO1 | LocalPO_DZ1MF) &
    161                  //ELOUTTRG_NCN_DZ1MF
    162                  (TL_LOGIC(TLCMDOUTNCN_DZ1MF)^1);
    163          
    164              //L2 DZ1
    165             int locPO_MDZ1MF = 
    166                  commonDZ1 &
    167                  ENA_LOGIC(ENA_DZ1_2) &// ENA_DZ1;
    168                  //ПО МТЗ ДЗ1МФ
    169                  (GlobalPO2 | LocalPO_MDZ1MF) &
    170                  //ELOUTTRG_NCN_MDZ1MF
    171                  TL_LOGIC(TLCMDOUTNCN_MDZ1MF) &
    172                  ((
    173            //DZ1_PO3
    174            TL_LOGIC(TLCMD30_DZ1OF) |
    175            //DZ1_PO1
    176            TL_LOGIC(TLCMD30_DZ1MF) 
    177                  )^1);
    178          
    179              //L3 DZ1
    180             int locPO_DZ1OF = 
    181                  commonDZ1 &
    182                  //ПО ДЗ1ОФ
    183                  (GlobalPO3 | LocalPO_DZ1OF) &
    184                  //ELOUTTRG_NCN_MDZ1OF
    185                  (TL_LOGIC(TLCMDOUTNCN_DZ1OF)^1);
    186          
    187          //триг по восх фронту
    188          //TRG_FRONT(set, clr, old, out)
    189          //          //DZ1_PO1                ELOLDTRG_NCN_DZ1MF  ELOUTTRG_NCN_DZ1MF
    190            TRG_FRONT(locPO_DZ1MF, isFAILU_DZ, TLCMDOLDNCN_DZ1MF,  TLCMDOUTNCN_DZ1MF)
    191          //триг по восх фронту
    192          //TRG_FRONT(set, clr, old, out)
    193          //          //DZ1_PO3                 ELOLDTRG_NCN_DZ1OF  ELOUTTRG_NCN_DZ1OF
    194            TRG_FRONT(locPO_DZ1OF, isFAILU_DZ, TLCMDOLDNCN_DZ1OF,  TLCMDOUTNCN_DZ1OF)
    195          //триг по восх MMF
    196          //TRG_FRONT(set, clr, old, out)
    197          //                    //DZ1_PO2      ELOLDTRG_NCN_MDZ1MF  ELOUTTRG_NCN_MDZ1MF
    198            TRG_MMF(isFAILU_DZ, locPO_MDZ1MF,  TLCMDOLDNCN_MDZ1MF,  TLCMDOUTNCN_MDZ1MF)
    199          
    200            //Сраб ПО ДЗ1МФ
    201            locPO_DZ1MF &=
    202                  //ELOUTTRG_NCN_DZ1MF
    203                  (TL_LOGIC(TLCMDOUTNCN_DZ1MF)^1);
    204          
    205            //Сраб ПО ДЗ1ОФ
    206            locPO_DZ1OF &=
    207                  //ELOUTTRG_NCN_DZ1OF
    208                  (TL_LOGIC(TLCMDOUTNCN_DZ1OF)^1);
    209            
    210            //Сраб ПО МТЗ ДЗ1МФ
    211            locPO_MDZ1MF &=
    212                  //ELOUTTRG_NCN_MDZ1MF
    213                  TL_LOGIC(TLCMDOUTNCN_MDZ1MF);
    214          
    215          //гасим МФ и ОФ если активный МТЗ МФ
    216            //Сраб ПО ДЗ1МФ
    217            locPO_DZ1MF &=
    218                //Сраб ПО МТЗ ДЗ1МФ
    219                (locPO_MDZ1MF^1);
    220          
    221            //Сраб ПО ДЗ1ОФ
    222            locPO_DZ1OF &=
    223                //Сраб МТЗ ДЗ1МФ
    224                (locPO_MDZ1MF^1);
    225          
    226             int max_tmp = 
    227             //DZ1_PO1
    228             TL_LOGIC(TLCMD30_DZ1MF) =
    229             //Сраб ПО ДЗ1МФ
    230             IO_LOGIC(IOCMD2_DZ1) =
    231             LSIGNAL_TIMER(TIMER1_DZ1)  = //DZ1_TIM1
    232                      locPO_DZ1MF;
    233              if(max_tmp) flag_max_monitoring |= MAXMONITORING_COLLECT;//макс параметры сработки
    234          
    235             //Сраб ПО МТЗ ДЗ1МФ
    236             IO_LOGIC(IOCMD4_DZ1) =
    237             LSIGNAL_TIMER(TIMER2_DZ1)  = //DZ1_TIM2
    238                      locPO_MDZ1MF; 
    239          
    240              //DZ1_PO3
    241              TL_LOGIC(TLCMD30_DZ1OF) =
    242              //Сраб ПО ДЗ1ОФ
    243              IO_LOGIC(IOCMD6_DZ1) =
    244              LSIGNAL_TIMER(TIMER3_DZ1)  = //DZ1_TIM3
    245                      locPO_DZ1OF;
    246          
    247            int tmp =
    248              LSIGNAL_TIMER(TIMER1_BODZ1)  =
    249                PLOG_TIMER(TIMER1_DZ1) ; //DZ1_TIM1
    250          
    251            //Сраб ДЗ1МФ
    252            IO_LOGIC(IOCMD3_DZ1) =
    253              ILOG_TIMER(TIMER1_BODZ1)|tmp;
    254          
    255            tmp =
    256              LSIGNAL_TIMER(TIMER2_BODZ1)  =
    257                PLOG_TIMER(TIMER2_DZ1) ; //DZ1_TIM2
    258          
    259            //Сраб МТЗ ДЗ1МФ
    260            IO_LOGIC(IOCMD5_DZ1) =
    261              ILOG_TIMER(TIMER2_BODZ1)|tmp;
    262          
    263            tmp =
    264              LSIGNAL_TIMER(TIMER3_BODZ1)  =
    265                PLOG_TIMER(TIMER3_DZ1) ; //DZ1_TIM3
    266          
    267            //Сраб ДЗ1ОФ
    268            IO_LOGIC(IOCMD7_DZ1) =
    269              ILOG_TIMER(TIMER3_BODZ1)|tmp;
    270          
    271            
    272          }//logicDZ1(short idxC)
    273          
    274          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   logicDZ1
        56   -> ILogTimer
        56   -> PLogTimer
        56   -> detectorLevelUP3F
        56   -> isViewZMethod_64VRT
        56   -> isViewZTrianMethod_64VRT


   Section sizes:

   Bytes  Function/Label
   -----  --------------
    1208  logicDZ1

 
 1 208 bytes in section Fast_function
 
 1 208 bytes of CODE memory

Errors: none
Warnings: none
