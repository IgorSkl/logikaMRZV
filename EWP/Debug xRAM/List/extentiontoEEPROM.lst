###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:11:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\dataEEPROM\extentiontoEEPROM.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\dataEEPROM\extentiontoEEPROM.c"
#        -lcN "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o
#        "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xRAM\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --interwork --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\extentiontoEEPROM.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\extentiontoEEPROM.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\dataEEPROM\extentiontoEEPROM.c
      1          /*
      2          #include "lpc_types.h"
      3          #include "lpc_irq_fiq.h"
      4          #include "lpc_arm922t_cp15_driver.h"
      5          
      6          #include "lpc32xx_hstimer.h"
      7          #include "lpc32xx_ssp.h"
      8          #include "lpc32xx_gpio.h"
      9          
     10          #include "lpc32xx_intc_driver.h"
     11          #include "lpc32xx_clkpwr_driver.h"
     12          
     13          #include "arm926ej_cp15_drv.h"
     14          #include "ttbl.h"
     15          */
     16          
     17          #include "lpc_types.h"
     18          
     19          #include <stdio.h>
     20          #include <string.h>
     21          
     22          #include "psuperVisor\supermanager.h"
     23          #include "callbackelement\callbackelementdef.h"
     24          #include "callbackelement\ustrangEEPROMdef.h"
     25          #include "dataEEPROM\dataEEPROMdef.h"
     26          
     27          #include "callbackelement\missionCollectionEEPROM.h"
     28          #include "dataEEPROM\dataEEPROM.h"
     29          #include "psuperVisor\psvisor_helpfnc.h"
     30          
     31          extern CALLBACK_MISSION cb_missionDEVICE1;
     32          extern CALLBACK_MISSION *cb_mission_crrDEVICE1;//текущая миссия
     33          extern short  missionSeparatorDEVICE1;//сепаратор миссии
     34          extern int timing;
     35          extern int timingLoad;
     36          extern int cicling;
     37          extern UNS_32 ArrayEXTENTION[];//массив расширения
     38          extern char  tmp_eeprom[];//MAX_MNGUSTAVKI*4блока *4байта
     39          
     40          extern short  missionSeparatorDEVICE2;//сепаратор миссии DEVICE2
     41          extern int eepromCicling;//циклы работы
     42          extern int missionCicling;//циклы одинаковых миссий
     43          extern int missionCicling_DEVICE2;//циклы одинаковых миссий
     44          extern int eepromCicling_DEVICE2;//циклы работы
     45          extern int eeprom_status;//статусный регистр EEPROM
     46          extern int alterEEPROM;//байты alter ext устaвок и ранжир EEPROM
     47          
     48          int controlExt;
     49          
     50          int saveEXTtoEEPROM(int alter)
     51          {
     52          //сохранить ext в EEPROM
     53            int                      alter_offset_ext = OFF1_B64EXT;
     54            if(alter&EXTALTER_MASKA)
     55              alter_offset_ext = OFF2_B64EXT;
     56            if(missionSeparatorDEVICE2!=CBACK_NOMISSION) return 1;
     57            //установить статус EXT_ATTEMPT
     58            eeprom_status |= (1<<EEPROMEXT_ATTEMPT);//статусный регистр EEPROM
     59            //циклы работы с ext
     60            eepromCicling_DEVICE2 = SAVE_EXT_BUSY;//процесс записи ext занят;
     61            missionCicling_DEVICE2 = 0;//циклы одинаковых миссий
     62            //сформировать миссию записи первого массива ext в EEPROM
     63            Build_cbMission_WRITE_EXT1MASSIV_DEVICE2((char *)ArrayEXTENTION, 4, 4 +alter_offset_ext*64);
     64            return 0;
     65          }//saveEXTtoEEPROM()
     66          
     67          int stepElementSaveEXTtoEEPROM_DEVICE2(int alter)
     68          {
     69          //исполнение миссий для записи ext
     70            int                      alter_offset_ext = OFF1_B64EXT;
     71            if(alter&EXTALTER_MASKA)
     72              alter_offset_ext = OFF2_B64EXT;
     73            //сост процесса записи уставок
     74            int condition = SAVE_EXT_BUSY;//процесс записи ext занят
     75            switch(missionSeparatorDEVICE2)
     76            {
     77            case CBACK_MISSION_1BWRITE_MASSIV:
     78            {
     79              char *sourceData = (char *)ArrayEXTENTION;
     80              missionSeparatorDEVICE2 = CBACK_NOMISSION;//больше миссий не будет
     81              if(missionCicling_DEVICE2<(MAX_B64EXT-1)) //циклы одинаковых миссий
     82              {
     83                //сформировать миссию записи ext в EEPROM 1 блок
     84                Build_cbMission_1BWRITE_MASSIV_DEVICE2(sourceData,
     85                                               BLOKMISSION_1 +BLOKMISSION_1*missionCicling_DEVICE2,
     86                                               BLOKMISSION_1 +BLOKMISSION_1*missionCicling_DEVICE2 +alter_offset_ext);
     87                missionCicling_DEVICE2++;//циклы одинаковых миссий
     88              }///if
     89              else
     90              {
     91                missionCicling_DEVICE2 = 0;//циклы одинаковых миссий
     92                //сформировать миссию чтения ext EEPROM 1 блок
     93                Build_cbMission_1BREAD_MASSIV_DEVICE2((char *)tmp_eeprom, alter_offset_ext, 0);
     94              }
     95            }
     96            break;
     97          
     98            case CBACK_MISSION_1BREAD_MASSIV:
     99            {
    100              missionSeparatorDEVICE2 = CBACK_NOMISSION;//больше миссий не будет
    101              if(missionCicling_DEVICE2<(MAX_B64EXT-1)) //циклы одинаковых миссий
    102              {
    103                //сформировать миссию чтения ext в EEPROM 1 блок
    104                Build_cbMission_1BREAD_MASSIV_DEVICE2((char *)tmp_eeprom,
    105                                              BLOKMISSION_1 +BLOKMISSION_1*missionCicling_DEVICE2 +alter_offset_ext,
    106                                              BLOKMISSION_1 +BLOKMISSION_1*missionCicling_DEVICE2);
    107                missionCicling_DEVICE2++;//циклы одинаковых миссий
    108              }//if
    109              else
    110              {
    111                missionCicling_DEVICE2 = 0;//циклы одинаковых миссий
    112                condition = SAVE_EXT_COMPLETE;//процесс записи ext завершен
    113              }
    114            }
    115            break;
    116          
    117            default:;//NO MORE MISSION
    118            }//switch
    119            return  condition;//процесс записи ext
    120          }//stepElementSaveEXTtoEEPROM_DEVICE2()
    121          
    122          int writeEXTALTERtoEEPROM_DEVICE2(int alter)
    123          {
    124          //записать alter ext в EEPROM
    125            if(missionSeparatorDEVICE2!=CBACK_NOMISSION) return 1;
    126            eepromCicling_DEVICE2 = WRITE_EXTALTER_BUSY;//процесс записи alter занят
    127            missionCicling_DEVICE2 = 0;//циклы одинаковых миссий
    128            //сформировать миссию записи alter ext в EEPROM
    129            ((char *)ArrayEXTENTION)[0] = alter;
    130            Build_cbMission_WRITE_EXTALTER_DEVICE2((char *)ArrayEXTENTION);
    131            return 0;
    132          }//writeEXTALTERtoEEPROM_DEVICE2(int alter)
    133          
    134          int stepElementEXTALTERtoEEPROM_DEVICE2()
    135          {
    136          //запись alter ext EEPROM
    137          //исполнение миссий для записи alter ext
    138            //сост процесса записи
    139            int condition = WRITE_EXTALTER_BUSY;//процесс записи alter занят
    140            switch(missionSeparatorDEVICE2)
    141            {
    142            case CBACK_MISSION_WRITE_ALTER:
    143            {
    144              missionSeparatorDEVICE2 = CBACK_NOMISSION;//больше миссий не будет
    145              //сформировать миссию чтения alter в EEPROM 1 блок
    146              Build_cbMission_1BREAD_MASSIV_DEVICE2((char *)tmp_eeprom, 0, 0);
    147            }
    148            break;
    149          
    150            case CBACK_MISSION_1BREAD_MASSIV:
    151            {
    152              missionSeparatorDEVICE2 = CBACK_NOMISSION;//больше миссий не будет
    153              missionCicling_DEVICE2 = 0;//циклы одинаковых миссий
    154              condition = WRITE_EXTALTER_COMPLETE;//процесс записи alter завершен
    155            }
    156            break;
    157            default:;//NO MORE MISSION
    158            }//switch
    159            return  condition;//процесс записи alter
    160          }//stepElementEXTALTERtoEEPROM_DEVICE2()
    161          
    162          int readPARAMfromEEPROM()
    163          {
    164          //читать ext из EEPROM
    165            if(missionSeparatorDEVICE1!=CBACK_NOMISSION) return 1;
    166            //установить статус UST_BUSY
    167            //установить статус UST_ATTEMPT
    168            eeprom_status |= (1<<EEPROMUST_ATTEMPT);//статусный регистр EEPROM
    169            eepromCicling = READ_ALT_BUSY;//процесс чтения alter занят
    170            missionCicling = 0;//циклы одинаковых миссий
    171            //сформировать миссию чтения alter в EEPROM 1 блок
    172            Build_cbMission_1BREAD_MASSIV((char *)tmp_eeprom, 0, 0);
    173            return 0;
    174          }//readPARAMfromEEPROM()
    175          
    176          int writeUSTALTERtoEEPROM(int alter)
    177          {
    178          //записать alter уставок и ранжир в EEPROM
    179            if(missionSeparatorDEVICE1!=CBACK_NOMISSION) return 1;
    180            eepromCicling = WRITE_USTALTER_BUSY;//процесс записи alter занят
    181            missionCicling = 0;//циклы одинаковых миссий
    182            //сформировать миссию записи alter ext в EEPROM
    183            ((char *)ArrayEXTENTION)[1] = (alter>>8);
    184            Build_cbMission_WRITE_USTALTER((char *)ArrayEXTENTION);
    185            return 0;
    186          }//writeEXTALTERtoEEPROM(int alter)
    187          
    188          int stepElementUSTALTERtoEEPROM()
    189          {
    190          //запись alter уставок и ранж EEPROM
    191          //исполнение миссий для записи alter уставок и ранж
    192            //сост процесса записи
    193            int condition = WRITE_USTALTER_BUSY;//процесс записи alter занят
    194            switch(missionSeparatorDEVICE1)
    195            {
    196            case CBACK_MISSION_WRITE_ALTER:
    197            {
    198              missionSeparatorDEVICE1 = CBACK_NOMISSION;//больше миссий не будет
    199              //сформировать миссию чтения alter в EEPROM 1 блок
    200              Build_cbMission_1BREAD_MASSIV((char *)tmp_eeprom, 0, 0);
    201            }
    202            break;
    203          
    204            case CBACK_MISSION_1BREAD_MASSIV:
    205            {
    206              missionSeparatorDEVICE1 = CBACK_NOMISSION;//больше миссий не будет
    207              missionCicling = 0;//циклы одинаковых миссий
    208              condition = WRITE_USTALTER_COMPLETE;//процесс записи alter завершен
    209            }
    210            break;
    211            default:;//NO MORE MISSION
    212            }//switch
    213            return  condition;//процесс записи alter
    214          }//stepElementUSTALTERtoEEPROM()
    215          
    216          int stepElementReadEXTPRItoEEPROM(int alter)
    217          {
    218          //читать ext primary из EEPROM
    219            int                      alter_offset_ext = OFF1_B64EXT;
    220            if(alter&EXTALTER_MASKA) alter_offset_ext = OFF2_B64EXT;
    221            eepromCicling = READ_EXT_BUSY;//процесс чтения alter занят
    222            missionCicling = 0;//циклы одинаковых миссий
    223            //сформировать миссию чтения ext в EEPROM 1 блок
    224            Build_cbMission_1BREAD_MASSIV((char *)tmp_eeprom, alter_offset_ext, 0);
    225            return eepromCicling;
    226          }//readPARAMfromEEPROM()
    227          
    228          int stepElementReadEXTtoEEPROM(int alter)
    229          {
    230          //исполнение миссий для чтения ext
    231            int                      alter_offset_ext = OFF1_B64EXT;
    232            if(alter&EXTALTER_MASKA)
    233              alter_offset_ext = OFF2_B64EXT;
    234            //сост процесса
    235            int condition = READ_EXT_BUSY;//процесс чтения ext занят
    236            switch(missionSeparatorDEVICE1)
    237            {
    238            case CBACK_MISSION_1BREAD_MASSIV:
    239            {
    240              missionSeparatorDEVICE1 = CBACK_NOMISSION;//больше миссий не будет
    241              if(missionCicling<(MAX_B64EXT-1)) //циклы одинаковых миссий
    242              {
    243                //сформировать миссию чтения ext EEPROM 1 блок
    244                Build_cbMission_1BREAD_MASSIV((char *)tmp_eeprom,
    245                                              BLOKMISSION_1 +BLOKMISSION_1*missionCicling +alter_offset_ext,
    246                                              BLOKMISSION_1 +BLOKMISSION_1*missionCicling);
    247                missionCicling++;//циклы одинаковых миссий
    248              }//if
    249              else
    250              {
    251                missionCicling = 0;//циклы одинаковых миссий
    252                condition = READ_EXT_COMPLETE;//процесс чтения ext завершен
    253              }
    254            }
    255            break;
    256          
    257            default:;//NO MORE MISSION
    258            }//switch
    259          
    260            return  condition;//процесс чтения уст
    261          }//stepElementReadEXTtoEEPROM()
    262          
    263          int controlPREPAREext()
    264          {
    265            controlExt++;
    266          //подготовка ext
    267            if(
    268              setCRCMassiv(&(((int *)tmp_eeprom)[1]), MAX_MNGEXT-1)==//CRC для ext
    269              ((int *)tmp_eeprom)[MAX_MNGEXT]
    270            ) return 0;//нет ошибок
    271            return 1;//ошибка
    272          }//controlPREPAREext()
    273          
    274          int controlPREPAREalter()
    275          {
    276          //подготовка alter ext уст и ранж
    277            ArrayEXTENTION[0] = ((int *)tmp_eeprom)[0];//массив расширения
    278            return ArrayEXTENTION[0]&0xffff;
    279          }//controlPREPAREalter()
    280          
    281          int controlWriteEXTALTER()
    282          {
    283          //контроль результ записи alter ext
    284           int alt1 = (alterEEPROM&EXTALTER_MASKA);
    285           int alt2 = (((int *)tmp_eeprom)[0])&EXTALTER_MASKA;
    286            if(alt1==alt2) return 0;//нет ошибок
    287            //ошибка
    288            return 1;
    289          }//controlWriteEXTALTER()
    290          
    291          int controlWriteUSTALTER()
    292          {
    293          //контроль результ записи alter ext
    294           int alt1 = (alterEEPROM&USTALTER_MASKA);
    295           int alt2 = (((int *)tmp_eeprom)[0])&USTALTER_MASKA;
    296            if(alt1==alt2) return 0;//нет ошибок
    297            //ошибка
    298            return 1;
    299          }//controlWriteUSTALTER()
    300          
    301          int controlSaveExt()
    302          {
    303          //контроль результ записи ext
    304            if(
    305              //пропустить alter
    306              setCRCMassiv(&(((int *)tmp_eeprom)[1]), MAX_MNGEXT-1) == //CRC для ext
    307              ((int *)tmp_eeprom)[MAX_MNGEXT]
    308            ) return 0;
    309            return 1;//ошибка
    310          }//controlSaveExt()

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   controlPREPAREalter
       8   controlPREPAREext
         8   -> setCRCMassiv
       8   controlSaveExt
         8   -> setCRCMassiv
       0   controlWriteEXTALTER
       0   controlWriteUSTALTER
       8   readPARAMfromEEPROM
         8   -> Build_cbMission_1BREAD_MASSIV
      16   saveEXTtoEEPROM
        16   -> Build_cbMission_WRITE_EXT1MASSIV_DEVICE2
       8   stepElementEXTALTERtoEEPROM_DEVICE2
         8   -> Build_cbMission_1BREAD_MASSIV_DEVICE2
      16   stepElementReadEXTPRItoEEPROM
        16   -> Build_cbMission_1BREAD_MASSIV
      16   stepElementReadEXTtoEEPROM
        16   -> Build_cbMission_1BREAD_MASSIV
      24   stepElementSaveEXTtoEEPROM_DEVICE2
        24   -> Build_cbMission_1BREAD_MASSIV_DEVICE2
        24   -> Build_cbMission_1BWRITE_MASSIV_DEVICE2
       8   stepElementUSTALTERtoEEPROM
         8   -> Build_cbMission_1BREAD_MASSIV
       8   writeEXTALTERtoEEPROM_DEVICE2
         8   -> Build_cbMission_WRITE_EXTALTER_DEVICE2
       8   writeUSTALTERtoEEPROM
         8   -> Build_cbMission_WRITE_USTALTER


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  controlExt
      36  controlPREPAREalter
      68  controlPREPAREext
      48  controlSaveExt
      48  controlWriteEXTALTER
      48  controlWriteUSTALTER
      96  readPARAMfromEEPROM
     128  saveEXTtoEEPROM
     104  stepElementEXTALTERtoEEPROM_DEVICE2
      80  stepElementReadEXTPRItoEEPROM
     164  stepElementReadEXTtoEEPROM
     300  stepElementSaveEXTtoEEPROM_DEVICE2
     104  stepElementUSTALTERtoEEPROM
      80  writeEXTALTERtoEEPROM_DEVICE2
      84  writeUSTALTERtoEEPROM

 
     4 bytes in section .bss
 1 436 bytes in section .text
 
 1 436 bytes of CODE memory
     4 bytes of DATA memory

Errors: none
Warnings: none
