###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Oct/2015  14:42:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\NXP\ttbl.c
#    Command line =  
#        "D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\NXP\ttbl.c"
#        -lcN "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug xRAM\List\" -o
#        "D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\" --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\Igor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\component\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I
#        "D:\Program Files\IAR
#        Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\Program
#        Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\..\" --interwork
#        --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\List\ttbl.lst
#    Object file  =  
#        D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\EWP\Debug
#        xRAM\Obj\ttbl.o
#
###############################################################################

D:\Program Files\IAR Systems\MYWORK\HR1_0100_00_I720_new2\NXP\ttbl.c
      1          /*************************************************************************
      2           *
      3           *    Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2006
      6           *
      7           *    File name   : ttbl.c
      8           *    Description : MMU Translation tables
      9           *
     10           *    History :
     11           *    1. Date        : Sep, 19 2006
     12           *       Author      : Stanimir Bonev
     13           *       Description : Create
     14           *
     15           *        The physical memory map is:
     16           *
     17           *      0x00000000
     18           *                  |---------------------------|
     19           *      0x0000003F  |       iRAM  Vectors       |
     20           *                  |---------------------------|
     21           *      0x00000040  |           iRAM            |
     22           *                  |      RW Nocached          |
     23           *      0x03FFFFFF  |---------------------------|
     24           *      0x04000000  |     DMA Dummy Area        |
     25           *                  |      RW Nocached          |
     26           *                  |---------------------------|
     27           *      0x08000000  |      iRAM   (mirror)      |
     28           *                  |       RW Nocached         |
     29           *      0x0BFFFFFF  |---------------------------|
     30           *                  |                           |
     31           *                  ~                           ~
     32           *                  |                           |
     33           *                  |---------------------------|
     34           *      0x20000000  |          AHB ch 5         |
     35           *                  |        RW Nocached        |
     36           *      0x200BFFFF  |---------------------------|
     37           *                  |                           |
     38           *                  ~                           ~
     39           *                  |                           |
     40           *                  |---------------------------|
     41           *      0x30000000  |          AHB ch 6         |
     42           *                  |        RW Nocached        |
     43           *      0x31FFFFFF  |---------------------------|
     44           *                  |                           |
     45           *                  ~                           ~
     46           *                  |                           |
     47           *                  |---------------------------|
     48           *      0x40000000  |          AHB ch 7         |
     49           *                  |        RW Nocached        |
     50           *      0x400FFFFF  |---------------------------|
     51           *                  |                           |
     52           *                  ~                           ~
     53           *      0xE1000000  |                           |
     54           *                  |---------------------------|
     55           *                  |                           |
     56           *                  |  SRAM RO  cached 128kB    |
     57           *      0xE101FFFF  |                           |
     58           *      0xE1020000  |---------------------------|
     59           *                  |                           |
     60           *                  |  SRAM RO  No cached 128kB |
     61           *      0xE103FFFF  |                           |
     62           *      0xE1040000  |---------------------------|
     63           *                  |                           |
     64           *                  |  SDRAM RW  cached 128kB   |
     65           *      0xE105FFFF  |                           |
     66           *      0xE1060000  |---------------------------|
     67           *                  |                           |
     68           *                  |  SDRAM RW  No cached 128kB|
     69           *      0xE107FFFF  |                           |
     70           *      0x81000000  |---------------------------|
     71           *
     72           *    $Revision: 30870 $
     73           **************************************************************************/
     74          #include "ttbl.h"
     75          
     76          #pragma segment="MMU_TT"
     77          
     78          #pragma location="MMU_TT"
     79          #pragma data_alignment=16384
     80          __no_init Int32U L1Table[L1_ENTRIES_NUMB];
     81          
     82          #pragma location="MMU_TT"
     83          #pragma data_alignment=2048
     84          __no_init Int32U L2Coarses1[L2_CP_ENTRIES_NUMB];
     85          
     86          #pragma location="MMU_TT"
     87          #pragma data_alignment=2048
     88          __no_init Int32U L2Coarses2[L2_CP_ENTRIES_NUMB];
     89          
     90          //#pragma location="MMU_TT"
     91          //#pragma data_alignment=2048
     92          //__no_init Int32U L2Coarses3[L2_CP_ENTRIES_NUMB];
     93          
     94          
     95          const TtSectionBlock_t TtSB[] =
     96          {
     97            // L1
     98            // 192 MB RW section no cached (iRAM DMA dummy area)
     99            L1_SECTIONS_ENTRY(    192,0x00000000,0x00000000 ,3,1,0,0),
    100            //   1 MB RW coarse table (AHB ch 5)
    101            L1_COARSES_PAGE_ENTRY(  1,0x20000000,(Int32U)L2Coarses1  ,1    ),
    102            //  32 MB RW section no cached (AHB ch 6)
    103            L1_SECTIONS_ENTRY(     32,0x30000000,0x30000000        ,3,1,0,0),
    104            //   1 MB RW section no cached (AHB ch 7)
    105            L1_SECTIONS_ENTRY(      1,0x40000000,0x40000000        ,3,1,0,0),
    106            //   1 MB Flash section cached (EMC0)
    107            L1_SECTIONS_ENTRY(      1,0xE0000000,0xE0000000        ,2,1,1,0),
    108            //   1 MB Flash section no cached (EMC0)
    109            L1_SECTIONS_ENTRY(      1,0xE0100000,0xE0100000        ,2,1,0,0),
    110            //   1 MB Flash section cached (EMC0)
    111          //  L1_COARSES_PAGE_ENTRY(  1,0xE0000000,(Int32U)L2Coarses2  ,0    ),
    112            //   1 MB SRAM coarse table (EMC1)
    113            L1_COARSES_PAGE_ENTRY(  1,0xE1000000,(Int32U)L2Coarses2  ,1    ),
    114            //   4 MB RW section no cached (EMC2)
    115            L1_SECTIONS_ENTRY(      4,0xE2000000,0xE2000000        ,3,1,0,0),
    116            //  16 MB RW section no cached (EMC3)
    117            L1_SECTIONS_ENTRY(     16,0xE3000000,0xE3000000        ,3,1,0,0),
    118            TSB_INVALID,
    119            // L2 coarse table 12 * 64kB = 768kB
    120            L2_CT_LARGE_PAGE_ENTRY(12,0x20000000,0x20000000,3,3,3,3,0,0),
    121            TSB_INVALID,
    122          //  // L2 coarse table 8 * 64kB = 512kB
    123          //  L2_CT_LARGE_PAGE_ENTRY(8,0xE0000000,0xE0000000,2,2,2,2,1,0),
    124          //  L2_CT_LARGE_PAGE_ENTRY(8,0xE0080000,0xE0080000,2,2,2,2,0,0),
    125          //  TSB_INVALID,
    126            // L2 coarse table 127 * 4kB = 508kB
    127            L2_CT_SMALL_PAGE_ENTRY(127,0xE1000000,0xE1000000,2,2,2,2,1,0),
    128            // L2 coarse table 1 * 4kB = 4kB
    129            L2_CT_SMALL_PAGE_ENTRY(1 ,0xE107F000,0xE107F000,2,2,2,2,0,0),
    130            // L2 coarse table 127 * 4kB = 508kB
    131            L2_CT_SMALL_PAGE_ENTRY(127,0xE1080000,0xE1080000,3,3,3,3,1,1),
    132            // L2 coarse table 1 * 4kB = 4kB
    133            L2_CT_SMALL_PAGE_ENTRY(1 ,0xE10FF000,0xE10FF000,3,3,3,3,0,0),
    134            TSB_INVALID
    135          };
    136          
    137          const TtTableBlock_t TtTB[] =
    138          {
    139            {L1Table,TableL1},
    140            {L2Coarses1,TableL2_Coarse},
    141            {L2Coarses2,TableL2_Coarse},
    142          //  {L2Coarses3,TableL2_Coarse},
    143            TTB_INVALID
    144          };


   Section sizes:

   Bytes  Function/Label
   -----  --------------
   16384  L1Table
    1024  L2Coarses1
    1024  L2Coarses2
     272  TtSB
      20  TtTB

 
    292 bytes in section .rodata
 18 432 bytes in section MMU_TT
 
    292 bytes of CONST memory
 18 432 bytes of DATA  memory

Errors: none
Warnings: none
