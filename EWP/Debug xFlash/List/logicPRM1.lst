###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2015  11:05:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\component\logicPRM1.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\logicPRM1.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -Ohs
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\logicPRM1.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\logicPRM1.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\logicPRM1.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          
      4          #include "bazisdef.h"
      5          #include "component\componentdef.h"
      6          #include "psuperVisor\psvisor_helpdef.h"
      7          
      8          #include "logictimers\logictimersmac.h"
      9          
     10          #include "logictimers\logictimersfnc.h"
     11          
     12          #include "..\bazis.h"
     13          
     14          #include "toSpeedOptim.h"
     15          
     16          #define _HIDE_COMPONENT
     17          #include "PRM1Component.c"
     18          
     19          extern int GlobalPO1;
     20          extern int GlobalPO2;
     21          extern int GlobalPO3;
     22          extern int GlobalPO4;
     23          extern int GlobalLevelI_ABC[];
     24          
     25          extern COMPONENT_OBJ  cnfCOMPONENT[];//конфигурация
     26          extern int  logMassTimer[];
     27          extern int  ENAcmd[];
     28          extern int  spvUSTAVKI[];//текущие уставки супервизора
     29          extern int  WideCmdRTBuffer[];
     30          //неисправность цепей напр
     31          extern int  isFAILU_COMMON_DZ;
     32          extern int  isFAILU_DZ;
     33          extern int GlobalLevel_UCM;
     34          extern int GlobalLevel_ICM;
     35          
     36          extern int timing;  
     37          extern int timingLoad;  
     38          extern int cicling;  
     39          
     40          void  logicPRM1(int idxC) @ "Fast_function"
     41          {
     42          //логика компонента
     43              int tmpOffsetT    =
     44                          cnfCOMPONENT[idxC].offsetTimers;   //таймера компонента в конфигурации
     45              int tmpOffsetIO   =
     46                          cnfCOMPONENT[idxC].offsetIOCmd;    //IO команды
     47              int tmpOffsetENA  =
     48                          cnfCOMPONENT[idxC].offsetENACmd;    //ENA команды
     49              int tmpOffsetUSpv =
     50                          cnfCOMPONENT[idxC].offsetUstSpv;    //уставки SPV
     51              int tmpOffsetTL   =
     52                          cnfCOMPONENT[idxC].offsetTLCmd;    //TL команды
     53          
     54            LSIGNAL_TIMER(TIMER1_PRM1)  = 1;//ОФункция
     55             // IO_LOGIC(IOCMD1_PRM1);//вход
     56          
     57          int tt1 =
     58            IO_LOGIC(IOCMD6_PRM1) = //выход
     59          //    ObrOFUNCTION(tmpOffsetT + TIMER1_PRM1);
     60             OFunction(tmpOffsetT + TIMER1_PRM1, 0);
     61          
     62          //напр UCM больше 20V
     63            detectorLevelUP(GlobalLevel_UCM, tmpOffsetUSpv+SPVSRAB_DZ_02UH,
     64                                             tmpOffsetUSpv+SPVVOZV_DZ_02UH,
     65                                             tmpOffsetUSpv+SPV_OUT_DZ_02UH);
     66          //(UCM/577)/(ICM/50)>0.2
     67          //500*UCM>2*577*ICM
     68          //  int ttt2 =
     69            SPV_UST(SPV_DZ_UCMICM) = 2*577*GlobalLevel_ICM;
     70            //int ttt3 =
     71          //  500*GlobalLevel_UCM;
     72            detectorLevelUP(500*GlobalLevel_UCM, tmpOffsetUSpv+SPV_DZ_UCMICM,
     73                                               tmpOffsetUSpv+SPV_DZ_UCMICM,
     74                                               tmpOffsetUSpv+SPV_OUT_DZ_UCMICM);
     75          
     76            //UI НЦН ДЗ
     77            LSIGNAL_TIMER(TIMER_UINCNDZ_PRM1) = isFAILU_COMMON_DZ; 
     78            //05 НЦН ДЗ
     79            LSIGNAL_TIMER(TIMER_05NCNDZ_PRM1)  = SPV_UST(SPV_OUT_DZ_02UH);
     80            
     81          //  int ttt1 =
     82            //UCM НЦН ДЗ
     83            LSIGNAL_TIMER(TIMER_CMNCNDZ_PRM1) = SPV_UST(SPV_OUT_DZ_UCMICM);
     84          
     85            //неисправность цепей напр
     86            isFAILU_DZ =
     87          ///*
     88                  (
     89                  //UCM НЦН ДЗ
     90                  SPV_UST(SPV_OUT_DZ_UCMICM) &
     91                  //05 НЦН ДЗ
     92                  PLOG_TIMER(TIMER_05NCNDZ_PRM1)
     93                  ) |
     94          //*/
     95          ///*
     96                  (
     97                  //UI НЦН ДЗ
     98                  PLOG_TIMER(TIMER_UINCNDZ_PRM1)
     99                   )
    100                   |
    101          //*/
    102          ///*
    103                   (
    104                  //UCM НЦН ДЗ
    105                  PLOG_TIMER(TIMER_CMNCNDZ_PRM1)
    106                    ); 
    107          //*/
    108          
    109            isFAILU_DZ &=
    110                  //разрешить неисправность цепей напр DZ
    111                   ENA_LOGIC(ENA_PRM1_FAILU_DZ);
    112            //CMD_FAULT_U_DZ
    113            IO_LOGIC(IOCMD2_PRM1) = isFAILU_DZ;
    114          
    115          int tt2 = tmpOffsetT + TIMER1_PRM1;
    116          
    117          if(tt1){
    118                int tt0 = timingLoad;  
    119                int tt1 = timing;  
    120                int tt2 = cicling;  
    121              tt1=2;
    122            }//if
    123          
    124          
    125          }//logicPRM1(short idxC)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   logicPRM1
        32   -> OFunction
        32   -> PLogTimer
        32   -> detectorLevelUP


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     300  logicPRM1

 
 300 bytes in section Fast_function
 
 300 bytes of CODE memory

Errors: none
Warnings: 5
