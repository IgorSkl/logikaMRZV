###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2015  11:05:11
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\component\WLComponent.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\WLComponent.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\WLComponent.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\Obj\WLComponent.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\WLComponent.c
      1          #ifndef _HIDE_COMPONENT
      2          /*
      3          #include <vcl.h>
      4          #include <strstrea.h>
      5          #include <math.h>
      6          #include <mem.h>
      7          #include <fstream.h>
      8          #include <strstrea.h>
      9          #include <iomanip.h>
     10          #pragma hdrstop
     11          
     12          #include "vmenuDis.h"
     13          */
     14          
     15          #include <stdio.h>
     16          #include <string.h>
     17          
     18          #include "bazisdef.h"
     19          #include "component\componentdef.h"
     20          #include "virtualMenu\systemmenudef.h"
     21          #include "virtualMenu\ustmanagerdef.h"
     22          
     23          #include "virtualMenu\textstreamfnc.h"
     24          #include "virtualMenu\systemmenufnc.h"
     25          #include "virtualMenu\ustmanagerfnc.h"
     26          #include "psuperVisor\psvisor_helpfnc.h"
     27          #include "virtualMenu\rangmanagerfnc.h"
     28          
     29          #include "virtualMenu\viewMenuList.h"
     30          #include "virtualMenu\viewMenuWideLog.h"
     31          #include "virtualMenu\viewMenuSub.h"
     32          
     33          #include "..\bazis.h"
     34          
     35          //код компонентов
     36          #define KOD_COMPONENT  WL_COMP1
     37          //к-во ступеней
     38          #define CNT_STUPEN_WL  1
     39          
     40          #endif // _HIDE_COMPONENT
     41          
     42          //РАСПРЕДЕЛЕНИЕ УСТАВОК  в менеджере уставок
     43          //уставка сработки
     44          //к-во уставок в менеджере уставок
     45          #define MNGUST_WL_TOTAL  0
     46          
     47          //РАСПРЕДЕЛЕНИЕ ENA КОМАНД
     48          //к-во ENA команд
     49          #define ENACMD_WL_TOTAL 0
     50          
     51          //РАСПРЕДЕЛЕНИЕ УСТАВОК в супервизоре
     52          //к-во уставок в супервизоре
     53          #define SPVUST_WL_TOTAL  0
     54          
     55          //---------------IO COMMAND------------------
     56          //РАСПРЕДЕЛЕНИЕ IO КОМАНД ДЛЯ WL
     57          //имя IO1
     58          #define IOCMD1_WL 0
     59          //к-во IO команд
     60          #define IOCMD_WL_TOTAL    1
     61          
     62          //---------------TL COMMAND------------------
     63          //РАСПРЕДЕЛЕНИЕ TL КОМАНД ДЛЯ WL
     64          //к-во TL команд
     65          #define TLCMD_WL_TOTAL    0
     66          
     67          #ifndef _HIDE_COMPONENT
     68          
     69          //выбранный ЛЭ
     70          #define LIGHTLE    LIGHTRANGUVV
     71          
     72          extern COMPONENT_OBJ rpzcomponent_obj;//обект компонента для репозитария
     73          extern int  tmpUSTAVKI[];
     74          
     75          extern LineMenuItem sub_menu_cnf[];
     76          extern LineMenuItem sub_menu_tmp[];
     77          extern int  IndexUstSPV;//индекс уставок в супервизоре
     78          
     79          extern LineMenuItem sub_menu_cnfwl[];
     80          
     81          extern COMPONENT_OBJ  cnfCOMPONENT[];
     82          extern int  spvUSTAVKI[];//текущие уставки супервизора
     83          extern char *bitStringUNI[];
     84          extern int  TypLE[];
     85          extern int  IndexIO;//индекс IO
     86          
     87          int codecUstWL(char codec, short offset, int ust);
     88          void initTimersWL(short idxC);
     89          void logicWL(int idxC);
     90          void WideLogLogic();
     91          
     92          int   isDISactiv_WL(int idxC);
     93          
     94          void OpenMenuWL();
     95          void SetNameMenuTyp();
     96          void SelectTypLE();
     97          void SetAllTitleLE();
     98          void OpenMenuLE();
     99          
    100          int SelectTypViewLE;//перекл тип или view элем
    101          char titleLE[30]="";
    102          
    103          int  offsetIOCmdWL;//смещение для IO WL
    104          
    105          char WL_TITLE[] = "РЛ";
    106          
    107          IONAMESTATUS_COMPONENT ionsWL[IOCMD_WL_TOTAL] =
    108          {
    109            {
    110              1,//статус iocmd1
    111              "Стат блок РЛ"
    112            }
    113          };
    114          
    115          LineMenuItem sub_menu_comp_WL[8] =
    116          {
    117            { "РЛ", NULL},//title
    118            { &CONTROL1_COMP, &sub_menu_cnf,   typeMenuSub},//control_item, parent
    119            { "Лог элементы",  (void*)&OpenMenuWL, typeMenuProg},
    120            { "Конфигурация РЛ", sub_menu_cnfwl,  typeMenuCnfWL},//конфигурация
    121            { NULL, NULL}
    122          };
    123          
    124          LineMenuItem sub_menu_widel[] =
    125          {
    126            { "Лог элементы", NULL},//title
    127            { &CONTROL_WDL, &sub_menu_comp_WL, typeMenuSub},//control_item, parent
    128          /*
    129            { "ЛЭ1 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    130            { "ЛЭ2 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    131            { "ЛЭ3 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    132            { "ЛЭ4 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    133            { "ЛЭ5 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    134            { "ЛЭ6 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    135            { "ЛЭ7 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    136            { "ЛЭ8 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    137            { "ЛЭ9 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    138            { "ЛЭ10 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    139            { "ЛЭ11 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    140            { "ЛЭ12 это буфер элемента1234",   (void*)&OpenMenuLE, typeMenuProg},
    141            { " Выбор типа элемента", (void*)&SelectTypLE, typeMenuProg},// sub_menu_typWL,  typeMenuSub},
    142          */
    143            { NULL, NULL}
    144          
    145          };
    146          
    147          LineMenuItem sub_menu_typLE[] =
    148          {
    149            { titleLE, NULL},//title
    150            { &CONTROL_TLE, sub_menu_widel},//control_item, parent
    151            { " Элемент ОТКЛ",     (void*)&OpenTypLE, typeMenuProg},
    152            { " Элемент ИЛИ",      (void*)&OpenTypLE, typeMenuProg},
    153            { " Элемент И",        (void*)&OpenTypLE, typeMenuProg},
    154            { " Элемент ИСКЛ ИЛИ", (void*)&OpenTypLE, typeMenuProg},
    155            { NULL, NULL}
    156          
    157          };
    158          
    159          LineMenuItem sub_menu_viewWL[] =
    160          {
    161            { titleLE, NULL },//title
    162            { &CONTROL_EWL, sub_menu_widel}//control_item, parent
    163          };
    164          
    165          void OpenMenuLE()
    166          {
    167          //открыть меню лог элемента
    168            LIGHTLE = LIGHTLINEMENU;//выбранный ЛЭ
    169            //заголовок ЛЭ
    170            sprintf(titleLE, "ЛЭ%d", LIGHTLE+1);//текущий кадр
    171            SetTitleLE(LIGHTLE, titleLE);//заголовок ЛЭ
    172          
    173            if(SelectTypViewLE) //перекл тип или ранжир элем
    174            {
    175              //тип элемента
    176              CRR_SUBMENU = sub_menu_typLE;//текущее субменю
    177              CRR_TEXTSTREAM = &CONTROL_TLE;//текущий control
    178              TxtStreamInit(&CONTROL_TLE, &KadrMenuFormat_sub, sub_menu_typLE);//инит управл структ и формир кадра
    179              PNTCRR_SUBMENU(SUBDATA).TypesWin = typeMenuSub;
    180              convert_submenutyp(TypLE[LIGHTLE]);//конвертировать строки sub_menu_typWL
    181              ViewDiskrMenu(typeMenuSub);//вывести окно отображения
    182            }//
    183            else
    184            {
    185              //ранжир элемента
    186              CRR_SUBMENU = sub_menu_viewWL;//текущее субменю
    187              PNTCRR_SUBMENU(SUBDATA).TypesWin = typeMenuViewLE;
    188              OpenViewLE();
    189            }
    190          }//OpenMenuLE()
    191          
    192          void OpenMenuWL()
    193          {
    194            CRR_SUBMENU = sub_menu_widel;
    195            CRR_TEXTSTREAM = &CONTROL_WDL;//текущий control
    196            TxtStreamCorrect(CRR_TEXTSTREAM);//коррекция текущий control
    197          
    198            SetNameMenuTyp();//новое меню типа
    199          
    200            SetAllTitleLE();//перезаписать все заголовки лог элементов
    201          
    202            ViewDiskrMenu(typeMenuSub);//вывести окно отображения
    203          }//OpenMenuWL()
    204          
    205          void SetNameMenuTyp()
    206          {
    207          //новое меню типа
    208            //char locTxt[20];
    209            short size_avait = TxtStreamMaxKadr(&CONTROL_WDL);//макс к-во кадров
    210            if(SelectTypViewLE) //перекл тип или view элем
    211            {
    212              strcpy((char*)sub_menu_widel[SUBDATA+1 +size_avait-1].Line1,
    213                     "Тип элемента"
    214                    );
    215            }//if
    216            else
    217            {
    218              strcpy((char*)sub_menu_widel[SUBDATA+1 +size_avait-1].Line1,
    219                     "Ранжир элемента"
    220                    );
    221            }
    222          }//SetNameMenuTyp()
    223          
    224          void SelectTypLE()
    225          {
    226          //переключатель на тип элемента
    227            CRR_SUBMENU = sub_menu_widel;
    228            CRR_TEXTSTREAM = &CONTROL_WDL;//текущий control
    229            if(SelectTypViewLE) //перекл тип или ранж элем
    230            {
    231              SelectTypViewLE = 0;
    232            }//if
    233            else
    234            {
    235              SelectTypViewLE = 1;
    236            }
    237            SetNameMenuTyp();//новое меню типа
    238          
    239            ViewDiskrMenu(typeMenuSub);//вывести окно отображения
    240          }//SelTypLE()
    241          
    242          void SetAllTitleLE()
    243          {
    244          //перезаписать все заголовки лог элементов
    245            char locTxt[20];
    246            short size_avait = TxtStreamMaxKadr(&CONTROL_WDL);//макс к-во кадров
    247            //новые пункты меню
    248            for(int i=0; i<size_avait-1; i++)
    249            {
    250              sprintf(locTxt, "ЛЭ%d", i+1);//текущий кадр
    251              strcpy((char*)sub_menu_widel[SUBDATA+1 +i].Line1, locTxt);
    252          
    253              SetTitleLE(i, (char*)sub_menu_widel[SUBDATA+1 +i].Line1);//заголовок ЛЭ
    254          
    255            }//for
    256          }//SetAllTitleLE()
    257          
    258          //тип лог элемента
    259          //0-ОТКЛ
    260          //1-ИЛИ
    261          //2-И
    262          //3-ИСКЛ ИЛИ
    263          void OpenTypLE()
    264          {
    265          
    266            CRR_SUBMENU = sub_menu_typLE;
    267            short iKadr = TxtStreamIdxKadr(&CONTROL_TLE);
    268            convert_submenutyp(iKadr);//конвертировать строки sub_menu_typWL
    269          
    270            TypLE[LIGHTLE] = iKadr;//установить новый тип ЛЭ
    271            ViewDiskrMenu(typeMenuSub);//вывести окно отображения
    272          
    273            SetAllTitleLE();//перезаписать все заголовки лог элементов
    274          }//OpenTypLE()
    275          
    276          void convert_submenutyp(short numStr)
    277          {
    278          //конвертировать строки sub_menu_typWL
    279            ((char*)sub_menu_typLE[SUBDATA+1 +0].Line1)[0] = ' ';
    280            ((char*)sub_menu_typLE[SUBDATA+1 +1].Line1)[0] = ' ';
    281            ((char*)sub_menu_typLE[SUBDATA+1 +2].Line1)[0] = ' ';
    282            ((char*)sub_menu_typLE[SUBDATA+1 +3].Line1)[0] = ' ';
    283            ((char*)sub_menu_typLE[SUBDATA+1 +numStr].Line1)[0] = '*';
    284          }//convert_submenutyp(short numStr)
    285          
    286          int initUstWL(char init)
    287          {
    288            //инициал уставок
    289            if (init)
    290            {
    291            }//if
    292          
    293            IndexUstSPV += SPVUST_WL_TOTAL;//индекс уставок в супервизоре
    294            return MNGUST_WL_TOTAL;//к-во уставок в менеджере уставок
    295          }//initUstMTZ1(short mngUst, char init)
    296          
    297          void  prepareUstWL(short idxC)
    298          {
    299            //подготовка ENA команд для клона
    300          }//prepareUstMTZ1(short idxC)
    301          
    302          int initIOCmd_WL()
    303          {
    304            //инициал IO команд
    305            offsetIOCmdWL = IndexIO;//смещение для IO WL
    306            return commonInitIOCmd(IOCMD_WL_TOTAL);
    307          }//initIOCmd_WL()
    308          
    309          int initTLCmd_WL()
    310          {
    311            //инициал TL команд
    312            return commonInitTLCmd(TLCMD_WL_TOTAL);
    313          }//initTLCmd_WL()
    314          
    315          int initENACmd_WL()
    316          {
    317            //инициал ENA команд
    318            return commonInitENACmd(ENACMD_WL_TOTAL);
    319          }//initENACmd_WL()
    320          
    321          void initTimersWL(short idxC)
    322          {
    323            //запрос и инициал таймеров
    324          }//initTimersWL(short idxC)
    325          
    326          int codecUstWL(char codec, short offset, int ust)
    327          //codec=0-кодировать
    328          //codec=1-раскодировать
    329          {
    330            //кодировать-раскодировать уставку
    331            return 1;
    332          }//codecUstWL(char *buf, short offset, int ust)
    333          
    334          int isDISactiv_WL(int idxC)
    335          {
    336           //активность Регистратора ДИС
    337            return 0;//нет активности
    338          }//isDISactiv_WL(int idxC)
    339          
    340          char copyWLToRepozitar(char packet)
    341          {
    342            memset(&rpzcomponent_obj, 0, sizeof(COMPONENT_OBJ));//стереть старое
    343          //копировать компонент в репозитарий
    344            rpzcomponent_obj.componentEnable = 1;//разрешение компонента
    345            rpzcomponent_obj.kodC   = KOD_COMPONENT;         //код компонента
    346            rpzcomponent_obj.packet = 0;    //номер пакетного компонента
    347            rpzcomponent_obj.permanent = 0; //перманентный компонент
    348          
    349            strcpy(rpzcomponent_obj.nameComponent,  WL_TITLE);       //имя компонента
    350            rpzcomponent_obj.sub_menu_component =  sub_menu_comp_WL;//меню компонента
    351          
    352            rpzcomponent_obj.cntClon     = CNT_STUPEN_WL;   //max к-во клонов
    353            rpzcomponent_obj.numClon     = 1;//номер клона
    354            rpzcomponent_obj.workToSignal = 0; //Работа на сигнал
    355          
    356            rpzcomponent_obj.initUstMng     = initUstWL;    //инициал уставок
    357            rpzcomponent_obj.prepareUstSpv  = prepareUstWL;//подготовка уставок
    358            rpzcomponent_obj.initIOCmd      = initIOCmd_WL;      //инициал IO команд
    359            rpzcomponent_obj.initTLCmd      = initTLCmd_WL;      //инициал TL команд
    360            rpzcomponent_obj.initENACmd     = initENACmd_WL;     //инициал ENA команд
    361            rpzcomponent_obj.bo_bvCmd       = NULL; //настройка БО БВ команд
    362            rpzcomponent_obj.isDISactiv     = isDISactiv_WL; //активность Регистратора ДИС
    363            rpzcomponent_obj.setBOBVtimer   = NULL; //инициал таймеров БО БВ
    364          
    365            rpzcomponent_obj.nameStatusIO = ionsWL;          //имена и статус команд IO
    366            rpzcomponent_obj.initTimers   = initTimersWL;    //запрос и инициал таймеров
    367            rpzcomponent_obj.logic        = logicWL;         //логика компонента
    368          
    369            rpzcomponent_obj.codecUst = codecUstWL;   //кодировать-раскодировать уставку
    370          
    371            return 0;//не пакетная регистрация
    372          }//
    373          
    374          #endif // _HIDE_COMPONENT
    375          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   OpenMenuLE
         8   -> OpenViewLE
         8   -> SetTitleLE
         8   -> TxtStreamInit
         8   -> ViewDiskrMenu
         8   -> convert_submenutyp
         8   -> sprintf
       8   OpenMenuWL
         8   -> SetAllTitleLE
         8   -> SetNameMenuTyp
         8   -> TxtStreamCorrect
         8   -> ViewDiskrMenu
       8   OpenTypLE
         8   -> SetAllTitleLE
         8   -> TxtStreamIdxKadr
         8   -> ViewDiskrMenu
         8   -> convert_submenutyp
       8   SelectTypLE
         8   -> SetNameMenuTyp
         8   -> ViewDiskrMenu
      32   SetAllTitleLE
        32   -> SetTitleLE
        32   -> TxtStreamMaxKadr
        32   -> sprintf
        32   -> strcpy
       8   SetNameMenuTyp
         8   -> TxtStreamMaxKadr
         8   -> strcpy
       0   codecUstWL
       0   convert_submenutyp
      24   copyWLToRepozitar
        24   -> __aeabi_memset
        24   -> strcpy
       8   initENACmd_WL
         8   -> commonInitENACmd
       8   initIOCmd_WL
         8   -> commonInitIOCmd
       8   initTLCmd_WL
         8   -> commonInitTLCmd
       0   initTimersWL
       0   initUstWL
       0   isDISactiv_WL
       0   prepareUstWL


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_21
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      16  ?_0
       4  ?_1
      16  ?_10
      16  ?_2
      16  ?_3
      16  ?_4
      16  ?_5
      12  ?_6
      20  ?_7
       8  ?_8
      16  ?_9
     212  OpenMenuLE
      60  OpenMenuWL
      92  OpenTypLE
      88  SelectTypLE
       4  SelectTypViewLE
     128  SetAllTitleLE
     112  SetNameMenuTyp
       4  WL_TITLE
      12  codecUstWL
     104  convert_submenutyp
     296  copyWLToRepozitar
      16  initENACmd_WL
      32  initIOCmd_WL
      16  initTLCmd_WL
       4  initTimersWL
      28  initUstWL
       8  ionsWL
      12  isDISactiv_WL
       4  offsetIOCmdWL
       4  prepareUstWL
      96  sub_menu_comp_WL
      84  sub_menu_typLE
      24  sub_menu_viewWL
      36  sub_menu_widel
      32  titleLE

 
    40 bytes in section .bss
   252 bytes in section .data
   156 bytes in section .rodata
 1 304 bytes in section .text
 
 1 304 bytes of CODE  memory
   156 bytes of CONST memory
   292 bytes of DATA  memory

Errors: none
Warnings: none
