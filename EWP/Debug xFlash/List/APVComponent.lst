###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2015  11:04:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\component\APVComponent.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\APVComponent.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\APVComponent.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\Obj\APVComponent.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\APVComponent.c
      1          #ifndef _HIDE_COMPONENT
      2          /*
      3          #include <vcl.h>
      4          #include <strstrea.h>
      5          #include <math.h>
      6          #include <mem.h>
      7          #include <fstream.h>
      8          #include <strstrea.h>
      9          #include <iomanip.h>
     10          #pragma hdrstop
     11          
     12          #include "vmenuDis.h"
     13          */
     14          
     15          #include <stdio.h>
     16          #include <string.h>
     17          
     18          #include "bazisdef.h"
     19          #include "component\componentdef.h"
     20          #include "virtualMenu\systemmenudef.h"
     21          #include "virtualMenu\ustmanagerdef.h"
     22          #include "psuperVisor\psvisor_helpdef.h"
     23          
     24          #include "virtualMenu\textstreamfnc.h"
     25          #include "virtualMenu\systemmenufnc.h"
     26          #include "virtualMenu\ustmanagerfnc.h"
     27          #include "psuperVisor\psvisor_helpfnc.h"
     28          #include "logictimers\logictimersfnc.h"
     29          
     30          #include "virtualMenu\viewMenuList.h"
     31          
     32          #include "psupervisor\psupervisor.h"
     33          
     34          #include "toSpeedOptim.h"
     35          
     36          #include "..\bazis.h"
     37          
     38          //код компонентов
     39          #define KOD_COMPONENT  APV_COMP1
     40          //к-во ступеней
     41          #define CNT_STUPEN_APV  1
     42          
     43          #endif // _HIDE_COMPONENT
     44          
     45          //РАСПРЕДЕЛЕНИЕ УСТАВОК  в менеджере уставок
     46          //уставка сработки
     47          #define MNGUST_PO1_APV  0
     48          #define MNGUST_PO2_APV  1
     49          #define MNGUST_PO3_APV  2
     50          #define MNGUST_PO4_APV  3
     51          
     52          //voltage_different
     53          #define MNGUST_POVD_APV 4
     54          //angle_unbalance APV   
     55          #define MNGUST_POAU_APV 5
     56          //speed_angle APV
     57          #define MNGUST_POSA_APV 6
     58          
     59          //уставка выдержки
     60          //Время 1 цикл АПВ tim2
     61          #define MNGVID1_APV    7
     62          //Время 2 цикл АПВ tim3
     63          #define MNGVID2_APV    8
     64          //Время Блокир АПВ tim8
     65          #define MNGVID3_APV    9
     66          //Время Блокир АПВ1 tim7
     67          #define MNGVID4_APV    10
     68          //Время Блокир АПВ от ВВ tim1
     69          #define MNGVID5_APV    11
     70          //Время внеш запрета АПВ tim6
     71          #define MNGVID6_APV    12
     72          //Время ож напр АПВ1 tim9
     73          #define MNGVID7_APV    13
     74          //Время ож син  АПВ1 tim10
     75          #define MNGVID8_APV    14
     76          //Время ож напр АПВ2 tim11
     77          #define MNGVID9_APV    15
     78          //Время ож син  АПВ2 tim12
     79          #define MNGVID10_APV   16
     80          
     81          //уставка управления
     82          #define MNGUPR_APV    17
     83          //к-во уставок в менеджере уставок
     84          #define MNGUST_APV_TOTAL  18
     85          //#define MNGUST_BOBV_APV  MNGUST_APV_TOTAL
     86          
     87          //РАСПРЕДЕЛЕНИЕ ENA КОМАНД
     88          #define ENA_APV_HALF1  0
     89          #define ENA_APV_HALF2  1
     90          #define ENA_APV_HALF3  2
     91          #define ENA_APV_HALF4  3
     92          #define ENA_APV_HALF5  4
     93          //Управл АПВ1
     94          #define ENA_APV_1      5
     95          //Управл АПВ2
     96          #define ENA_APV_2      6
     97          //к-во ENA команд
     98          #define ENACMD_APV_TOTAL 7
     99          
    100          //РАСПРЕДЕЛЕНИЕ УСТАВОК в супервизоре
    101          //уставка сработки
    102          #define SPVSRABUST_PO1_APV  0
    103          #define SPVSRABUST_PO2_APV  1
    104          #define SPVSRABUST_PO3_APV  2
    105          #define SPVSRABUST_PO4_APV  3
    106          //voltage_different
    107          #define SPVSRABUST_POVD_APV 4
    108          //angle_unbalance APV   
    109          #define SPVSRABUST_POAU_APV 5
    110          //speed_angle APV
    111          #define SPVSRABUST_POSA_APV 6
    112          
    113          //уставка возврата
    114          #define SPVVOZVUST_PO1_APV  7
    115          #define SPVVOZVUST_PO2_APV  8
    116          #define SPVVOZVUST_PO3_APV  9
    117          #define SPVVOZVUST_PO4_APV  10
    118          //voltage_different
    119          #define SPVVOZVUST_POVD_APV 11
    120          //angle_unbalance APV   
    121          #define SPVVOZVUST_POAU_APV 12
    122          //speed_angle APV
    123          #define SPVVOZVUST_POSA_APV 13
    124          //уставка SPV выход
    125          #define SPV_OUT1A_APV       14
    126          #define SPV_OUT1B_APV       15
    127          #define SPV_OUT1C_APV       16
    128          #define SPV_OUT2A_APV       17
    129          #define SPV_OUT2B_APV       18
    130          #define SPV_OUT2C_APV       19
    131          #define SPV_OUT3_APV        20
    132          #define SPV_OUT4_APV        21
    133          //voltage_different
    134          #define SPV_OUT_POVD_APV    22
    135          //angle_unbalance APV   
    136          #define SPV_OUT_POAU_APV    23
    137          //speed_angle APV
    138          #define SPV_OUT_POSA_APV    24
    139          //к-во уставок в супервизоре
    140          #define SPVUST_APV_TOTAL    25
    141          
    142          //---------------IO COMMAND------------------
    143          //РАСПРЕДЕЛЕНИЕ IO КОМАНД ДЛЯ APV
    144          //Стат блок АПВ
    145          #define IOCMD1_APV 0
    146          //Пуск АПВ
    147          #define IOCMD2_APV 1
    148          //Рестарт АПВ
    149          #define IOCMD3_APV 2
    150          //Вкл ВВ АПВ1
    151          #define IOCMD4_APV 3
    152          //Вкл ВВ АПВ2
    153          #define IOCMD5_APV 4
    154          //Работа АПВ
    155          #define IOCMD6_APV 5
    156          //к-во IO команд
    157          #define IOCMD_APV_TOTAL    6
    158          
    159          //---------------TL COMMAND------------------
    160          //РАСПРЕДЕЛЕНИЕ TL КОМАНД ДЛЯ APV
    161          //BLOK1
    162          #define TLCMD1_APV 0
    163          //BLOK2
    164          #define TLCMD2_APV 1
    165          //BLOK3
    166          #define TLCMD3_APV 2
    167          //PUSK_PULSE
    168          #define TLCMD4_APV 3
    169          //BLOK4
    170          #define TLCMD5_APV 4
    171          //START2
    172          #define TLCMD6_APV 5
    173          //RES_APV
    174          #define TLCMD7_APV 6
    175          //WORK_APV
    176          #define TLCMD8_APV 7
    177          //1C_APV
    178          #define TLCMD9_APV 8
    179          //2C_APV
    180          #define TLCMD10_APV 9
    181          //BVCMD_APV1
    182          #define TLCMD11_APV 10
    183          //BVCMD_APV2
    184          #define TLCMD12_APV 11
    185          //TOU1_APV
    186          #define TLCMD13_APV 12
    187          //TOS1_APV
    188          #define TLCMD14_APV 13
    189          //TOU2_APV
    190          #define TLCMD15_APV 14
    191          //TOS2_APV
    192          #define TLCMD16_APV 15
    193          //TRG1_APV
    194          #define TLCMD17_APV 16
    195          //TRG2_APV
    196          #define TLCMD18_APV 17
    197          //TRG3_APV
    198          #define TLCMD19_APV 18
    199          //TRG4_APV
    200          #define TLCMD20_APV 19
    201          //TRG5_APV
    202          #define TLCMD21_APV 20
    203          //TRG6_APV
    204          #define TLCMD22_APV 21
    205          //BLOK5
    206          #define TLCMD23_APV 22
    207          //к-во TL команд
    208          #define TLCMD_APV_TOTAL    23
    209          
    210          //--------------- TIMERS ------------------
    211          //РАСПРЕДЕЛЕНИЕ ТАЙМЕРОВ ДЛЯ APV
    212          //таймер APV_TIM1
    213          #define TIMER1_APV   0
    214          //таймер APV_TIM2
    215          #define TIMER2_APV   1
    216          //таймер APV_TIM3
    217          #define TIMER3_APV   2
    218          //таймер APV_TIM4
    219          #define TIMER4_APV   3
    220          //таймер APV_TIM5
    221          #define TIMER5_APV   4
    222          //таймер APV_TIM6
    223          #define TIMER6_APV   5
    224          //таймер APV_TIM7
    225          #define TIMER7_APV   6
    226          //таймер APV_TIM8
    227          #define TIMER8_APV   7
    228          //таймер APV_TIM9
    229          #define TIMER9_APV   8
    230          //таймер APV_TIM10
    231          #define TIMER10_APV  9
    232          //таймер APV_TIM11
    233          #define TIMER11_APV  10
    234          //таймер APV_TIM12
    235          #define TIMER12_APV  11
    236          //таймер APV_TIM_10MS
    237          #define TIMER13_APV  12
    238          
    239          //таймер APV_TIM7_BIS
    240          #define TIMER7BIS_APV 13
    241          //таймер APV_TIM8_BIS
    242          #define TIMER8BIS_APV 14
    243          //к-во таймеров
    244          #define TIMERS_APV_TOTAL   15
    245          
    246          #ifndef _HIDE_COMPONENT
    247          
    248          //#define _HIDE_COMPONENT
    249          //#include "PRM1Component.c"
    250          
    251          extern COMPONENT_OBJ  cnfCOMPONENT[];//конфигурация
    252          extern COMPONENT_OBJ rpzcomponent_obj;//обект компонента для репозитария
    253          extern int  tmpUSTAVKI[];
    254          extern LineMenuItem sub_menu_cnf[];
    255          extern LineMenuItem sub_menu_tmp[];
    256          extern int  IndexUstSPV;//индекс уставок в супервизоре
    257          extern int  IndexIO;//индекс IO
    258          extern int  spvUSTAVKI[];//текущие уставки супервизора
    259          extern char *bitStringUNI[];
    260          //extern int offsetUstMngPRM1;//смещение на уставки PRM1
    261          
    262          void UstListCompAPV();
    263          void ustRedactorCompAPV();
    264          void UstCompAPV();
    265          void  logicAPV(int idxC);
    266          void setBOBVtimer_APV(int idxC);
    267          
    268          void PereinitVidListCompAPV(short flg);
    269          void VidListCompAPV();
    270          void vidRedactorCompAPV();
    271          void VidCompAPV();
    272          
    273          void PereinitUprListCompAPV(short flg);
    274          void UprListCompAPV();
    275          void uprRedactorCompAPV();
    276          void UprCompAPV();
    277          short  KadrMenuFormat_upr_compAPV(void *workCntr);
    278          short  KadrMenuFormat_ustvidAPV(void *workCntr);
    279          int   initUstAPV(char init);
    280          void  prepareUstAPV(short idxC);
    281          char *selectorUprStrAPV(short iBit, UNS_32 ustUpr);
    282          
    283          void EditUstAPV();
    284          void EditVidAPV();
    285          void EditUprAPV();
    286          int codecUstAPV(char codec, short offset, int ust);
    287          
    288          void UpravlChooser1APVInKadr(char *nameUpr, void *workCntr);
    289          void UpravlChooser2APVInKadr(char *nameUpr, void *workCntr);
    290          short choose1TxtAPV(char *locTxt, short ibit, UNS_32 ust);
    291          short choose2TxtAPV(char *locTxt, short ibit, UNS_32 ust);
    292          void UpravlRedactorChoose1APV(char *nameUpr);
    293          void UpravlRedactorChoose2APV(char *nameUpr);
    294          int   isDISactiv_APV(int idxC);
    295          
    296          int  offsetIOCmdAPV;//смещение для IO APV
    297          
    298          char APV_TITLE[] = "АПВ";
    299          
    300          IONAMESTATUS_COMPONENT ionsAPV[IOCMD_APV_TOTAL] =
    301          {
    302            {
    303              1,//статус iocmd1
    304              "Стат блок АПВ"
    305            },
    306            {
    307              1,//статус iocmd2
    308              "Пуск АПВ"
    309            },
    310            {
    311              1,//статус iocmd3
    312              "Рестарт АПВ"
    313            },
    314            {
    315              1,//статус iocmd4
    316              "Вкл ВВ АПВ1"
    317            },
    318            {
    319              1,//статус iocmd5
    320              "Вкл ВВ АПВ2"
    321            },
    322            {
    323              1,//статус iocmd6
    324              "Работа АПВ"
    325            }
    326          };
    327          
    328          LineMenuItem sub_menu_comp_APV[8] =
    329          {
    330            { APV_TITLE, NULL},//title
    331            { &CONTROL1_COMP,   &sub_menu_cnf,   typeMenuSub},//control_item, parent
    332            { "Уставки АПВ",     (void *)&UstListCompAPV, typeMenuProg},
    333            { "Выдержки АПВ",    (void *)&VidListCompAPV, typeMenuProg},
    334            { "Управление АПВ",  (void *)&UprListCompAPV, typeMenuProg},
    335            { NULL, NULL}
    336          };
    337          
    338          LineMenuItem sub_menu_ust_compAPV[] =
    339          {
    340            { "Уставки АПВ", NULL},//title
    341            { &CONTROL2_COMP, &sub_menu_comp_APV, typeMenuList},//control_item, parent
    342            { "Уст ПО1 АПВ",  (void *)&UstCompAPV, typeMenuProg},
    343            { "Уст ПО2 АПВ",  (void *)&UstCompAPV, typeMenuProg},
    344            { "Уст ПО3 АПВ",  (void *)&UstCompAPV, typeMenuProg},
    345            { "Уст ПО4 АПВ",  (void *)&UstCompAPV, typeMenuProg},
    346            { "Уст voltage АПВ",  (void *)&UstCompAPV, typeMenuProg},
    347            { "Уст angle   АПВ",  (void *)&UstCompAPV, typeMenuProg},
    348            { "Уст speed   АПВ",  (void *)&UstCompAPV, typeMenuProg},
    349            { NULL, NULL}
    350          
    351          };
    352          
    353          LineMenuItem sub_menu_vid_compAPV[] =
    354          {
    355            { "Выдержки АПВ", NULL},//title
    356            { &CONTROL2_COMP,     &sub_menu_comp_APV, typeMenuList},//control_item, parent
    357          /*
    358            { "Время 1 цикл АПВ",       (void *)&VidCompAPV, typeMenuProg},//tim2
    359            { "Время 2 цикл АПВ",       (void *)&VidCompAPV, typeMenuProg},//tim3
    360            { "Время Блокир АПВ",       (void *)&VidCompAPV, typeMenuProg},//tim8
    361            { "Время Блокир АПВ1",      (void *)&VidCompAPV, typeMenuProg},//tim7
    362            { "Время Блокир АПВ от ВВ", (void *)&VidCompAPV, typeMenuProg},//tim1
    363            { "Время внеш запрета АПВ", (void *)&VidCompAPV, typeMenuProg},//tim6
    364            { "Время ож напр АПВ1",     (void *)&VidCompAPV, typeMenuProg},//tim9
    365            { "Время ож син  АПВ1",     (void *)&VidCompAPV, typeMenuProg},//tim10
    366            { "Время ож напр АПВ2",     (void *)&VidCompAPV, typeMenuProg},//tim11
    367            { "Время ож син  АПВ2",     (void *)&VidCompAPV, typeMenuProg},//tim12
    368          */
    369            { NULL, NULL}
    370          
    371          };
    372          
    373          LineMenuItem sub_menu_upr_compAPV[] =
    374          {
    375            { "Управл АПВ", NULL},//title
    376            { &CONTROL2_COMP,   &sub_menu_comp_APV, typeMenuList},//control_item, parent
    377            { "Вид АПВ",           (void *)&UprCompAPV, typeMenuProg},
    378            { "Выбор фазы синхр",  (void *)&UprCompAPV, typeMenuProg},
    379            { "Запрет АПВ",       (void *)&UprCompAPV, typeMenuProg},
    380            { "Блокир АПВ2",       (void *)&UprCompAPV, typeMenuProg},
    381            { NULL, NULL}
    382          
    383          };
    384          
    385          void PereinitUstListCompAPV(short flg)
    386          {
    387          //переиниц
    388            //инит компонентного контроля
    389          //  sub_menu_ust_compAPV[SUBDATA].Line1 = ReturnTEXTCONTROL(TEXTCONTROL_COMP1);//control_item
    390            TxtStreamInit(&CONTROL2_COMP,//ReturnTEXTCONTROL(TEXTCONTROL_COMP1),
    391                          &KadrMenuFormat_ustvidAPV, sub_menu_ust_compAPV);//инит control и формир кадра
    392            if(flg==0)//END
    393            {
    394              TxtStreamSetEnd(&CONTROL2_COMP,//ReturnTEXTCONTROL(TEXTCONTROL_COMP1),
    395                      SIZE_PAGE_VIEW/2);//перейти на END
    396            }//if
    397          
    398            ViewDiskrMenuList();//вывести окно отображения
    399            ListPStr();//доступ к уставкам
    400          }//PereinitUstListComp2()
    401          
    402          void UstListCompAPV()
    403          {
    404            SelectorMNGBAZA(0);//установка базу уставок
    405          
    406            SelectorSUBMENU(sub_menu_ust_compAPV);//уcтановить текущее субменю
    407          
    408            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    409          
    410            SelectorFHOME(&PereinitUstListCompAPV);//указатель на ф-цию HOME
    411            InitFHOME(1);//exe ф-цию HOME
    412          
    413            LanderUpDown();//wkl Up Down
    414          }//UstListCompAPV()
    415          
    416          void UstCompAPV()
    417          {
    418            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    419            PrepareEditMenu(sub_menu_ust_compAPV);
    420            PassWord(EditUstAPV);
    421          }//VidCompAPV()
    422          
    423          void EditUstAPV()
    424          {
    425          //редактировать уставку
    426            SystemEditUst(sub_menu_ust_compAPV);
    427          }//EditUstAPV()
    428          
    429          short  KadrMenuFormat_ustvidAPV(void *pstr)
    430          {
    431           WorkControl *workCntr = (WorkControl *)pstr;
    432          //формирователь кадра
    433            char locTxt[50];
    434            RESET_COUNTER;//сброс счетчиков
    435            for(int i=0;; i++)
    436            {
    437          //критерий терминатора
    438              if(((LineMenuItem *)workCntr->userPoint)[i+1+SUBDATA].Line1==NULL)break;
    439              COMPARE_COUNTER
    440              {
    441                strcpy((char *)workCntr->twoString, (char *) ((LineMenuItem *)workCntr->userPoint) [i+1+SUBDATA].Line1);
    442                sprintf(locTxt, "   %d", getUstOffsetMngUSTAVKI(i));
    443                strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2, locTxt);
    444                return 1;//сравнить счетчики кадров
    445              }
    446            }//for
    447          
    448            return 1;
    449          }//KadrMenuFormat_ust_1(WorkControl *workCntr)
    450          
    451          //--------------------------------------------------
    452          
    453          void PereinitVidListCompAPV(short flg)
    454          {
    455          //переиниц
    456            //инит компонентного контроля
    457          //  sub_menu_vid_compAPV[SUBDATA].Line1 = ReturnTEXTCONTROL(TEXTCONTROL_COMP1);
    458            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_ustvidAPV, sub_menu_vid_compAPV);//инит control и формир кадра
    459            if(flg==0)//END
    460            {
    461              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW/2);//перейти на END
    462            }//if
    463          
    464            ViewDiskrMenuList();//вывести окно отображения
    465            ListPStr();//доступ к уставкам
    466          }//PereinitUstListComp2()
    467          
    468          void VidListCompAPV()
    469          {
    470            SelectorMNGBAZA(MNGVID1_APV);//установка базы уставок
    471          
    472            SelectorSUBMENU(sub_menu_vid_compAPV);//утановить текущее субменю
    473          
    474            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    475            
    476            SelectorFHOME(&PereinitVidListCompAPV);//указатель на ф-цию HOME
    477            InitFHOME(1);//exe ф-цию HOME
    478          
    479            LanderUpDown();//wkl Up Down
    480          }//VidListCompAPV()
    481          
    482          void VidCompAPV()
    483          {
    484            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    485            PrepareEditMenu(sub_menu_vid_compAPV);
    486          //  PassWord(EditVidAPV);
    487            EditVidAPV();
    488          }//VidCompAPV()
    489          
    490          void EditVidAPV()
    491          {
    492          //редактировать уставку
    493            SystemEditUst(sub_menu_vid_compAPV);
    494          }//EditVidAPV()
    495          
    496          //--------------------------------------------------
    497          
    498          void PereinitUprListCompAPV(short flg)
    499          {
    500          //переиниц
    501            //инит компонентного контроля
    502            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_upr_compAPV, NULL);//инит control и формир кадра
    503            if(flg==0)//END
    504            {
    505              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW/2);//перейти на END
    506            }//if
    507          
    508            ViewDiskrMenuList();//вывести окно отображения
    509            ListPStr();//доступ к уставкам
    510          }//PereinitUstList
    511          
    512          void UprListCompAPV()
    513          {
    514            SelectorMNGBAZA(MNGUPR_APV);//установка базы уставок
    515          
    516            SelectorSUBMENU(sub_menu_upr_compAPV);//утановить текущее субменю
    517          
    518            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    519          
    520            SelectorFHOME(&PereinitUprListCompAPV);//указатель на ф-цию HOME
    521            InitFHOME(1);//exe ф-цию HOME
    522          
    523            LanderUpDown();//wkl Up Down
    524          }//VidListCompAPV()
    525          
    526          void UprCompAPV()
    527          {
    528            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    529            PrepareEditMenu(sub_menu_upr_compAPV);
    530            PassWord(EditUprAPV);
    531          }//VidCompAPV()
    532          
    533          void EditUprAPV()
    534          {
    535          //редактировать уставку упр
    536            short linemenu = LIGHTLINEMENU;
    537            char *nameUpr = (char *)sub_menu_upr_compAPV[linemenu +1+SUBDATA].Line1;
    538          
    539            switch(linemenu)
    540            {
    541              case 0: UpravlRedactorChoose1APV(nameUpr);//редактировать уставку управления
    542              break;
    543              case 1: UpravlRedactorChoose2APV(nameUpr);//редактировать уставку управления
    544              break;
    545              default:UpravlRedactor(nameUpr, linemenu+3, &selectorUprStrAPV);//редактировать уставку управления
    546            }//switch
    547          
    548          }//EditVidAPV()
    549          
    550          void UpravlRedactorChoose1APV(char *nameUpr)
    551          {
    552          //редактировать уставку управления
    553          /*
    554            FvmenuDis->EditChooseAPVPanel->Visible = true;
    555          
    556            char locTxt[50];
    557            switch(choose1TxtAPV(locTxt, 0, getCurrentMngUSTAVKI()))
    558            {
    559            case 0:
    560              FvmenuDis->Choose1APVButton->Checked = true;
    561              FvmenuDis->Choose2APVButton->Checked = false;
    562              FvmenuDis->Choose3APVButton->Checked = false;
    563              FvmenuDis->Choose4APVButton->Checked = false;
    564              FvmenuDis->Choose5APVButton->Checked = false;
    565              break;
    566            case 1:
    567              FvmenuDis->Choose1APVButton->Checked = false;
    568              FvmenuDis->Choose2APVButton->Checked = true;
    569              FvmenuDis->Choose3APVButton->Checked = false;
    570              FvmenuDis->Choose4APVButton->Checked = false;
    571              FvmenuDis->Choose5APVButton->Checked = false;
    572              break;
    573            case 2:
    574              FvmenuDis->Choose1APVButton->Checked = false;
    575              FvmenuDis->Choose2APVButton->Checked = false;
    576              FvmenuDis->Choose3APVButton->Checked = true;
    577              FvmenuDis->Choose4APVButton->Checked = false;
    578              FvmenuDis->Choose5APVButton->Checked = false;
    579              break;
    580            case 3:
    581              FvmenuDis->Choose1APVButton->Checked = false;
    582              FvmenuDis->Choose2APVButton->Checked = false;
    583              FvmenuDis->Choose3APVButton->Checked = false;
    584              FvmenuDis->Choose4APVButton->Checked = true;
    585              FvmenuDis->Choose5APVButton->Checked = false;
    586              break;
    587            case 4:
    588              FvmenuDis->Choose1APVButton->Checked = false;
    589              FvmenuDis->Choose2APVButton->Checked = false;
    590              FvmenuDis->Choose3APVButton->Checked = false;
    591              FvmenuDis->Choose4APVButton->Checked = false;
    592              FvmenuDis->Choose5APVButton->Checked = true;
    593              break;
    594            }//switch
    595          
    596            FvmenuDis->Str1Label->Caption = nameUpr;
    597            FvmenuDis->Str2Label->Caption = locTxt;
    598            FvmenuDis->Str3Label->Caption = "";
    599            FvmenuDis->Str4Label->Caption = "";
    600            */
    601          }//UpravlRedactorMTZ(char *nameUpr)
    602          
    603          void UpravlRedactorChoose2APV(char *nameUpr)
    604          {
    605          //редактировать уставку управления
    606          /*
    607            FvmenuDis->EditChoose2APVPanel->Visible = true;
    608          
    609            char locTxt[50];
    610            switch(choose2TxtAPV(locTxt, 3, getCurrentMngUSTAVKI()))
    611            {
    612            case 0:
    613              FvmenuDis->Choose21APVButton->Checked = true;
    614              FvmenuDis->Choose22APVButton->Checked = false;
    615              FvmenuDis->Choose23APVButton->Checked = false;
    616              break;
    617            case 1:
    618              FvmenuDis->Choose21APVButton->Checked = false;
    619              FvmenuDis->Choose22APVButton->Checked = true;
    620              FvmenuDis->Choose23APVButton->Checked = false;
    621              break;
    622            case 2:
    623              FvmenuDis->Choose21APVButton->Checked = false;
    624              FvmenuDis->Choose22APVButton->Checked = false;
    625              FvmenuDis->Choose23APVButton->Checked = true;
    626              break;
    627            }//switch
    628          
    629            FvmenuDis->Str1Label->Caption = nameUpr;
    630            FvmenuDis->Str2Label->Caption = locTxt;
    631            FvmenuDis->Str3Label->Caption = "";
    632            FvmenuDis->Str4Label->Caption = "";
    633            */
    634          }
    635          
    636          short  KadrMenuFormat_upr_compAPV(void *pstr)
    637          {
    638           WorkControl *workCntr = (WorkControl *)pstr;
    639          //формирователь кадра
    640            short chooseBit1 = 3;//к-во бит в choose1
    641            short chooseBit2 = 2;//к-во бит в choose2
    642            RESET_COUNTER;//сброс счетчиков
    643            for(int i=0;; i++)
    644            {
    645          //критерий терминатора
    646              char *nameUpr = (char *)sub_menu_upr_compAPV[i+1+SUBDATA].Line1;
    647              if(nameUpr==NULL) break;
    648          
    649              COMPARE_COUNTER
    650              {
    651                strcpy((char *)workCntr->twoString, nameUpr);
    652                switch(i)
    653                {
    654                 case 0:
    655                  //для Chooser1
    656                  UpravlChooser1APVInKadr(nameUpr, workCntr);
    657                 break;
    658                 case 1:
    659                  //для Chooser2
    660                  UpravlChooser2APVInKadr(nameUpr, workCntr);
    661                 break;
    662                 default:
    663                     strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2,
    664                     selectorUprStrAPV(i +(chooseBit1+chooseBit2)-2, getCurrentMngUSTAVKI()));
    665                }//switch
    666          
    667                return 1;//сравнить счетчики кадров
    668              }
    669            }//for
    670          
    671            return 1;
    672          }//KadrMenuFormat_upr_compAPV(WorkControl *workCntr)
    673          
    674          void UpravlChooser1APVInKadr(char *nameUpr, void *pstr)//WorkControl *workCntr)
    675          {
    676           WorkControl *workCntr = (WorkControl *)pstr;
    677          //отобразить уставку выбора-управления в кадре
    678            char locTxt[50];
    679            choose1TxtAPV(locTxt, 0, getCurrentMngUSTAVKI());//отобразить уставку выбора-управления в кадре
    680            strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2, locTxt);
    681          }//UpravlViewerInKadr(char *nameUpr, WorkControl *workCntr)
    682          
    683          void UpravlChooser2APVInKadr(char *nameUpr, void *pstr)
    684          {
    685           WorkControl *workCntr = (WorkControl *)pstr;
    686          //отобразить уставку выбора-управления в кадре
    687            char locTxt[50];
    688            choose2TxtAPV(locTxt, 3, getCurrentMngUSTAVKI());//отобразить уставку выбора-управления в кадре
    689            strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2, locTxt);
    690          }//UpravlViewerInKadr(char *nameUpr, WorkControl *workCntr)
    691          
    692          short choose1TxtAPV(char *locTxt, short ibit, UNS_32 ust)
    693          {
    694          //отобразить уставку выбора-управления в кадре
    695            switch(NumBitCheckWord(ibit, &ust) + NumBitCheckWord(ibit+1, &ust)*2 + NumBitCheckWord(ibit+2, &ust)*4)
    696            {
    697            case 0:
    698              strcpy(locTxt, "Без контроля");
    699              return 0;
    700            case 1:
    701              strcpy(locTxt, "Нет линии, есть шина");
    702              return 1;
    703            case 2:
    704              strcpy(locTxt, "Есть линия, нет шины");
    705              return 2;
    706            case 3:
    707              strcpy(locTxt, "Есть линия, есть шина, без синхр");
    708              return 3;
    709            case 4:
    710              strcpy(locTxt, "Есть линия, есть шина, есть синхр");
    711              return 4;
    712            default:
    713              strcpy(locTxt, "error chs");
    714            }//switch
    715            return -1;
    716          }//
    717          
    718          short choose2TxtAPV(char *locTxt, short ibit, UNS_32 ust)
    719          {
    720          //отобразить уставку выбора-управления в кадре
    721            switch(NumBitCheckWord(ibit, &ust) + NumBitCheckWord(ibit+1, &ust)*2)
    722            {
    723            case 0:
    724              strcpy(locTxt, "Фаза А");
    725              return 0;
    726            case 1:
    727              strcpy(locTxt, "Фаза В");
    728              return 1;
    729            case 2:
    730              strcpy(locTxt, "Фаза С");
    731              return 2;
    732            case 3:
    733              strcpy(locTxt, "Choose 3");
    734              return 3;
    735            }//switch
    736            return -1;
    737          }//
    738          
    739          char *selectorUprStrAPV(short iBit, UNS_32 ustUpr)
    740          {
    741            switch(iBit)
    742            {
    743          
    744            default:;
    745            }//switch
    746              if(NumBitCheckWord(iBit, &ustUpr)) return bitStringUNI[UNIUPR_WKL];
    747              return bitStringUNI[UNIUPR_OTKL];
    748          }//selectorUprStrAPV(short ibit, UNS_32 ustUpr)
    749          
    750          int initUstAPV(char init)
    751          {
    752            //инициал уставок
    753            if (init)
    754            {
    755          //уставка сработки
    756              tmpUSTAVKI[MNGUST_PO1_APV] = 10;
    757              tmpUSTAVKI[MNGUST_PO2_APV] = 20;
    758              tmpUSTAVKI[MNGUST_PO3_APV] = 30;
    759              tmpUSTAVKI[MNGUST_PO4_APV] = 40;
    760          //voltage_different
    761              tmpUSTAVKI[MNGUST_POVD_APV] = 10;
    762          //angle_unbalance APV   
    763              tmpUSTAVKI[MNGUST_POAU_APV] = 10;
    764          //speed_angle APV
    765              tmpUSTAVKI[MNGUST_POSA_APV] = 10;
    766          
    767          //уставка выдержки
    768              //Время 1 цикл АПВ tim2
    769              tmpUSTAVKI[MNGVID1_APV] = 20;   
    770              //Время 2 цикл АПВ tim3
    771              tmpUSTAVKI[MNGVID2_APV] = 25;
    772              //Время Блокир АПВ tim8
    773              tmpUSTAVKI[MNGVID3_APV] = 53;
    774              //Время Блокир АПВ1 tim7
    775              tmpUSTAVKI[MNGVID4_APV] = 15;
    776              //Время Блокир АПВ от ВВ tim1
    777              tmpUSTAVKI[MNGVID5_APV] = 55;
    778              //Время внеш запрета АПВ tim6
    779              tmpUSTAVKI[MNGVID6_APV] = 56;
    780              //Время ож напр АПВ1 tim9
    781              tmpUSTAVKI[MNGVID7_APV] = 15;
    782              //Время ож син  АПВ1 tim10
    783              tmpUSTAVKI[MNGVID8_APV] = 15;
    784              //Время ож напр АПВ2 tim11
    785              tmpUSTAVKI[MNGVID9_APV] = 15;
    786              //Время ож син  АПВ2 tim12
    787              tmpUSTAVKI[MNGVID10_APV] = 15;
    788          //уставка управления
    789              tmpUSTAVKI[MNGUPR_APV] = 0;//2+8 +64+32;
    790          
    791            }//if
    792          
    793            IndexUstSPV += SPVUST_APV_TOTAL;//индекс уставок в супервизоре
    794            return MNGUST_APV_TOTAL;//к-во уставок в менеджере уставок
    795          }//initUstAPV(short mngUst, char init)
    796          
    797          void  prepareUstAPV(short idxC)
    798          {
    799            //подготовка ENA команд для клона
    800            //копировать ENA из WideENA в ENAcmd
    801            CopyWideENAToENAcmd(PrepareENACmd(idxC, MNGUPR_APV), ENACMD_APV_TOTAL);
    802            //подготовка уставок
    803            int tmpOffsetUSpv = getOffsetSPVUstCnf(idxC);//смещение уставок внутри супервизора
    804              //уставка SPV сработки
    805              int tmp1 = 
    806              SPV_UST(SPVSRABUST_PO1_APV) = codecUstAPV(1, MNGUST_PO1_APV, getNativUstMngUSTAVKI(idxC, MNGUST_PO1_APV));
    807              //уставка SPV возврата
    808              SPV_UST(SPVVOZVUST_PO1_APV) = tmp1 - tmp1/20;//5%
    809              //уставка SPV сработки
    810              tmp1 = 
    811              SPV_UST(SPVSRABUST_PO2_APV) = codecUstAPV(1, MNGUST_PO2_APV, getNativUstMngUSTAVKI(idxC, MNGUST_PO2_APV));
    812              //уставка SPV возврата
    813              SPV_UST(SPVVOZVUST_PO2_APV) = tmp1 + tmp1/20;//5%
    814              //уставка SPV сработки
    815              tmp1 = 
    816              SPV_UST(SPVSRABUST_PO3_APV) = codecUstAPV(1, MNGUST_PO3_APV, getNativUstMngUSTAVKI(idxC, MNGUST_PO3_APV));
    817              //уставка SPV возврата
    818              SPV_UST(SPVVOZVUST_PO3_APV) = tmp1 - tmp1/20;//5%
    819              //уставка SPV сработки
    820              tmp1 = 
    821              SPV_UST(SPVSRABUST_PO4_APV) = codecUstAPV(1, MNGUST_PO4_APV, getNativUstMngUSTAVKI(idxC, MNGUST_PO4_APV));
    822              //уставка SPV возврата
    823              SPV_UST(SPVVOZVUST_PO4_APV) = tmp1 + tmp1/20;//5%
    824          
    825              //voltage_different уставка SPV сработки DOWN
    826              tmp1 = //voltage_different                      //voltage_different                          //voltage_different
    827              SPV_UST(SPVSRABUST_POVD_APV) = codecUstAPV(1, MNGUST_POVD_APV, getNativUstMngUSTAVKI(idxC, MNGUST_POVD_APV));
    828              //уставка SPV возврата
    829              SPV_UST(SPVVOZVUST_POVD_APV) = tmp1 + tmp1/20;//5%
    830          
    831              tmp1 = //angle_unbalance APV                  //angle_unbalance APV                       //angle_unbalance APV
    832              SPV_UST(SPVSRABUST_POAU_APV) = codecUstAPV(1, MNGUST_POAU_APV, getNativUstMngUSTAVKI(idxC, MNGUST_POAU_APV));
    833              //уставка SPV возврата
    834              SPV_UST(SPVVOZVUST_POAU_APV) = tmp1 + 2;//tmp1/20;//5% - точность хромает
    835          
    836              tmp1 = //speed_angle APV                  //speed_angle APV                       //speed_angle APV
    837              SPV_UST(SPVSRABUST_POSA_APV) = codecUstAPV(1, MNGUST_POSA_APV, getNativUstMngUSTAVKI(idxC, MNGUST_POSA_APV));
    838              //уставка SPV возврата
    839              SPV_UST(SPVVOZVUST_POSA_APV) = tmp1 + tmp1/20;//5%
    840          
    841            short tmpOffsetT    =
    842              getOffsetTimersCnf(idxC);   //компонент в конфигурации
    843          
    844                //Время 1 цикл АПВ tim2
    845             setTimerPorog(tmpOffsetT+ TIMER2_APV,
    846                    codecUstAPV(1, MNGVID1_APV, getNativUstMngUSTAVKI(idxC, MNGVID1_APV)));
    847                //Время 2 цикл АПВ tim3
    848             setTimerPorog(tmpOffsetT+ TIMER3_APV,
    849                    codecUstAPV(1, MNGVID2_APV, getNativUstMngUSTAVKI(idxC, MNGVID2_APV)));
    850                //Время Блокир АПВ tim8
    851             setTimerPorog(tmpOffsetT+ TIMER8_APV,
    852                    codecUstAPV(1, MNGVID3_APV, getNativUstMngUSTAVKI(idxC, MNGVID3_APV)));
    853                //Время Блокир АПВ1 tim7
    854             setTimerPorog(tmpOffsetT+ TIMER7_APV,
    855                    codecUstAPV(1, MNGVID4_APV, getNativUstMngUSTAVKI(idxC, MNGVID4_APV)));
    856                //Время Блокир АПВ от ВВ tim1
    857             setTimerPorog(tmpOffsetT+ TIMER1_APV, 
    858                    codecUstAPV(1, MNGVID5_APV, getNativUstMngUSTAVKI(idxC, MNGVID5_APV)));
    859                //Время внеш запрета АПВ tim6
    860             setTimerPorog(tmpOffsetT+ TIMER6_APV,
    861                    codecUstAPV(1, MNGVID6_APV, getNativUstMngUSTAVKI(idxC, MNGVID6_APV)));
    862                //Время ож напр АПВ1 tim9
    863             setTimerPorog(tmpOffsetT+ TIMER9_APV,
    864                    codecUstAPV(1, MNGVID7_APV, getNativUstMngUSTAVKI(idxC, MNGVID7_APV)));
    865                //Время ож син  АПВ1 tim10
    866             setTimerPorog(tmpOffsetT+ TIMER10_APV,
    867                    codecUstAPV(1, MNGVID8_APV, getNativUstMngUSTAVKI(idxC, MNGVID8_APV)));
    868                //Время ож напр АПВ2 tim11
    869             setTimerPorog(tmpOffsetT+ TIMER11_APV,
    870                    codecUstAPV(1, MNGVID9_APV, getNativUstMngUSTAVKI(idxC, MNGVID9_APV)));
    871                //Время ож син  АПВ2 tim12
    872             setTimerPorog(tmpOffsetT+ TIMER12_APV,
    873                    codecUstAPV(1, MNGVID10_APV, getNativUstMngUSTAVKI(idxC, MNGVID10_APV)));
    874          
    875                //Время Блокир АПВ tim8BIS
    876             setTimerPorog(tmpOffsetT+ TIMER8BIS_APV,
    877                    codecUstAPV(1, MNGVID3_APV, getNativUstMngUSTAVKI(idxC, MNGVID3_APV)));
    878                //Время Блокир АПВ1 tim7BIS
    879             setTimerPorog(tmpOffsetT+ TIMER7BIS_APV,
    880                    codecUstAPV(1, MNGVID4_APV, getNativUstMngUSTAVKI(idxC, MNGVID4_APV)));
    881          
    882            setTimerPorog(tmpOffsetT+ TIMER4_APV, 500);
    883            setTimerPorog(tmpOffsetT+ TIMER5_APV, 500);
    884          
    885            //таймер APV_TIM_10MS
    886            setTimerPorog(tmpOffsetT+ TIMER13_APV, 10);
    887          
    888          }//prepareUstMTZ1(short idxC)
    889          
    890          int initIOCmd_APV()
    891          {
    892            //инициал IO команд
    893            offsetIOCmdAPV = IndexIO;//смещение для IO APV
    894            return commonInitIOCmd(IOCMD_APV_TOTAL);
    895          }//initIOCmd_APV()
    896          
    897          int initTLCmd_APV()
    898          {
    899            //инициал TL команд
    900            return commonInitTLCmd(TLCMD_APV_TOTAL);
    901          }//initTLCmd_APV()
    902          
    903          int initENACmd_APV()
    904          {
    905            //инициал ENA команд
    906            return commonInitENACmd(ENACMD_APV_TOTAL);
    907          }//initENACmd_APV()
    908          
    909          void initTimersAPV(short idxC)
    910          {
    911            //запрос и инициал таймеров
    912            commonInitTimers(TIMERS_APV_TOTAL);
    913          }//initTimersAPV()
    914          
    915          int codecUstAPV(char codec, short offset, int ust)
    916          //codec=0-кодировать
    917          //codec=1-раскодировать
    918          {
    919            //кодировать-раскодировать уставку
    920            if(codec) return ust*1;
    921            return ust/1;
    922          }//codecUstAPV(char *buf, short offset, int ust)
    923          
    924          int isDISactiv_APV(int idxC)
    925          {
    926           //активность Регистратора ДИС
    927          //    int tmpOffsetT    =
    928            //              cnfCOMPONENT[idxC].offsetTimers;   //таймера компонента в конфигурации
    929          //  return 0;//нет активности
    930              int tmpOffsetT    =
    931                          cnfCOMPONENT[idxC].offsetTimers;   //таймера компонента в конфигурации
    932              for(int i=0; i<TIMERS_APV_TOTAL; i++)
    933              {
    934                if(getTimerBUSY(tmpOffsetT+i) |
    935                   getTimerFINISH(tmpOffsetT+i)
    936                   )
    937                   return 1;//есть активность
    938              }//
    939            return 0;//нет активности
    940          
    941          }//isDISactiv_APV(int idxC)
    942          
    943          void SaveUprAPV(short ibit)
    944          {
    945            /*
    946          //персональное сохр upr для APV
    947            UNS_32 tmpU = getCurrentMngUSTAVKI();//текущая уст упр
    948              //Управление APV
    949              switch(ibit)
    950              {
    951                // if(ibit==0)
    952                //chooser1
    953              case 0:
    954              {
    955                if(FvmenuDis->Choose1APVButton->Checked)
    956                {
    957                  NumBitClearingWord(0,   &tmpU);//сброс бита по его индексу
    958                  NumBitClearingWord(1, &tmpU);//сброс бита по его индексу
    959                  NumBitClearingWord(2, &tmpU);//сброс бита по его индексу
    960                }//if
    961                if(FvmenuDis->Choose2APVButton->Checked)
    962                {
    963                  NumBitSettingWord(0,    &tmpU);//сброс бита по его индексу
    964                  NumBitClearingWord(1, &tmpU);//сброс бита по его индексу
    965                  NumBitClearingWord(2, &tmpU);//сброс бита по его индексу
    966                }//if
    967                if(FvmenuDis->Choose3APVButton->Checked)
    968                {
    969                  NumBitClearingWord(0, &tmpU);//сброс бита по его индексу
    970                  NumBitSettingWord(1,    &tmpU);//сброс бита по его индексу
    971                  NumBitClearingWord(2, &tmpU);//сброс бита по его индексу
    972                }//if
    973                if(FvmenuDis->Choose4APVButton->Checked)
    974                {
    975                  NumBitSettingWord(0,    &tmpU);//сброс бита по его индексу
    976                  NumBitSettingWord(1,  &tmpU);//сброс бита по его индексу
    977                  NumBitClearingWord(2, &tmpU);//сброс бита по его индексу
    978                }//if
    979                if(FvmenuDis->Choose5APVButton->Checked)
    980                {
    981                  NumBitClearingWord(0,   &tmpU);//сброс бита по его индексу
    982                  NumBitClearingWord(1, &tmpU);//сброс бита по его индексу
    983                  NumBitSettingWord(2, &tmpU);//сброс бита по его индексу
    984                }//if
    985              }//case 0
    986              break;
    987          
    988              //chooser2
    989              case 1:
    990              {
    991                if(FvmenuDis->Choose21APVButton->Checked)
    992                {
    993                  NumBitClearingWord(3,   &tmpU);//сброс бита по его индексу
    994                  NumBitClearingWord(3+1, &tmpU);//сброс бита по его индексу
    995          //        NumBitClearingWord(ibit+2, &tmpU);//сброс бита по его индексу
    996                }//if
    997                if(FvmenuDis->Choose22APVButton->Checked)
    998                {
    999                  NumBitSettingWord(3,    &tmpU);//сброс бита по его индексу
   1000                  NumBitClearingWord(3+1, &tmpU);//сброс бита по его индексу
   1001                  //      NumBitClearingWord(ibit+2, &tmpU);//сброс бита по его индексу
   1002                }//if
   1003                if(FvmenuDis->Choose23APVButton->Checked)
   1004                {
   1005                  NumBitClearingWord(3,  &tmpU);//сброс бита по его индексу
   1006                  NumBitSettingWord(3+1, &tmpU);//сброс бита по его индексу
   1007                  //    NumBitClearingWord(ibit+2, &tmpU);//сброс бита по его индексу
   1008                }//if
   1009              }//case 1
   1010              break;
   1011          
   1012              default:
   1013              {
   1014                if(FvmenuDis->UprCheck->Checked)
   1015                {
   1016                  NumBitSettingWord(ibit+5 -2, &tmpU);//установка бита по его индексу
   1017                }//if(FvmenuDis->UprCheck->Checked)
   1018                else
   1019                {
   1020                  NumBitClearingWord(ibit+5 -2, &tmpU);//сброс бита по его индексу
   1021                }
   1022              }//default
   1023              }//switch(ibit)
   1024          
   1025            setCurrentMngUSTAVKI(tmpU);//новая уст упр
   1026            */
   1027          }//
   1028          
   1029          char copyAPVToRepozitar(char packet)
   1030          {
   1031            memset(&rpzcomponent_obj, 0, sizeof(COMPONENT_OBJ));//стереть старое
   1032          
   1033          //копировать компонент в репозитарий
   1034            rpzcomponent_obj.componentEnable = 1;//разрешение компонента
   1035            rpzcomponent_obj.kodC   = KOD_COMPONENT;         //код компонента
   1036            rpzcomponent_obj.packet = 0;    //номер пакетного компонента
   1037            rpzcomponent_obj.permanent = 0; //перманентный компонент
   1038          
   1039            strcpy(rpzcomponent_obj.nameComponent,  APV_TITLE);       //имя компонента
   1040            rpzcomponent_obj.sub_menu_component =  sub_menu_comp_APV;//меню компонента
   1041          
   1042            rpzcomponent_obj.cntClon      = CNT_STUPEN_APV;   //max к-во клонов
   1043            rpzcomponent_obj.numClon      = 1;//номер клона
   1044            rpzcomponent_obj.workToSignal = 0; //Работа на сигнал
   1045          
   1046            rpzcomponent_obj.initUstMng     = initUstAPV;    //инициал уставок
   1047            rpzcomponent_obj.prepareUstSpv  = prepareUstAPV;//подготовка уставок
   1048            rpzcomponent_obj.initIOCmd      = initIOCmd_APV;      //инициал IO команд
   1049            rpzcomponent_obj.initTLCmd      = initTLCmd_APV;      //инициал TL команд
   1050            rpzcomponent_obj.initENACmd     = initENACmd_APV;     //инициал ENA команд
   1051            rpzcomponent_obj.bo_bvCmd       = NULL; //настройка БО БВ команд
   1052            rpzcomponent_obj.isDISactiv     = isDISactiv_APV; //активность Регистратора ДИС
   1053            rpzcomponent_obj.setBOBVtimer   = NULL; //инициал таймеров БО БВ
   1054          
   1055            rpzcomponent_obj.nameStatusIO = ionsAPV;          //имена и статус команд IO
   1056            rpzcomponent_obj.initTimers   = initTimersAPV;    //запрос и инициал таймеров
   1057            rpzcomponent_obj.logic        = logicAPV;         //логика компонента
   1058          
   1059            rpzcomponent_obj.codecUst = codecUstAPV;   //кодировать-раскодировать уставку
   1060          
   1061            return 0;//не пакетная регистрация
   1062          }//
   1063          
   1064          #endif // _HIDE_COMPONENT
   1065          
   1066          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   EditUprAPV
        16   -> UpravlRedactor
        16   -> UpravlRedactorChoose1APV
        16   -> UpravlRedactorChoose2APV
       8   EditUstAPV
         8   -> SystemEditUst
       8   EditVidAPV
         8   -> SystemEditUst
      32   KadrMenuFormat_upr_compAPV
        32   -> UpravlChooser1APVInKadr
        32   -> UpravlChooser2APVInKadr
        32   -> getCurrentMngUSTAVKI
        32   -> selectorUprStrAPV
        32   -> strcpy
      72   KadrMenuFormat_ustvidAPV
        72   -> getUstOffsetMngUSTAVKI
        72   -> sprintf
        72   -> strcpy
       8   PereinitUprListCompAPV
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   PereinitUstListCompAPV
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   PereinitVidListCompAPV
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       0   SaveUprAPV
       8   UprCompAPV
         8   -> PassWord
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   UprListCompAPV
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
      64   UpravlChooser1APVInKadr
        64   -> choose1TxtAPV
        64   -> getCurrentMngUSTAVKI
        64   -> strcpy
      64   UpravlChooser2APVInKadr
        64   -> choose2TxtAPV
        64   -> getCurrentMngUSTAVKI
        64   -> strcpy
       0   UpravlRedactorChoose1APV
       0   UpravlRedactorChoose2APV
       8   UstCompAPV
         8   -> PassWord
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   UstListCompAPV
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
       8   VidCompAPV
         8   -> EditVidAPV
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   VidListCompAPV
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
      24   choose1TxtAPV
        24   -> NumBitCheckWord
        24   -> strcpy
      24   choose2TxtAPV
        24   -> NumBitCheckWord
        24   -> strcpy
      12   codecUstAPV
        12 __aeabi_idiv
      24   copyAPVToRepozitar
        24   -> __aeabi_memset
        24   -> strcpy
       8   initENACmd_APV
         8   -> commonInitENACmd
       8   initIOCmd_APV
         8   -> commonInitIOCmd
       8   initTLCmd_APV
         8   -> commonInitTLCmd
       8   initTimersAPV
         8   -> commonInitTimers
       0   initUstAPV
      24   isDISactiv_APV
        24   -> getTimerBUSY
        24   -> getTimerFINISH
      24   prepareUstAPV
        24   -> CopyWideENAToENAcmd
        24   -> PrepareENACmd
        24   -> codecUstAPV
        24   -> getNativUstMngUSTAVKI
        24   -> getOffsetSPVUstCnf
        24   -> getOffsetTimersCnf
        24   -> setTimerPorog
        24 __aeabi_idiv
      16   selectorUprStrAPV
        16   -> NumBitCheckWord


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_10
       4  ??DataTable21_11
       4  ??DataTable21_12
       4  ??DataTable21_13
       4  ??DataTable21_14
       4  ??DataTable21_15
       4  ??DataTable21_16
       4  ??DataTable21_17
       4  ??DataTable21_18
       4  ??DataTable21_19
       4  ??DataTable21_2
       4  ??DataTable21_20
       4  ??DataTable21_21
       4  ??DataTable21_22
       4  ??DataTable21_23
       4  ??DataTable21_24
       4  ??DataTable21_25
       4  ??DataTable21_26
       4  ??DataTable21_27
       4  ??DataTable21_28
       4  ??DataTable21_29
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable21_5
       4  ??DataTable21_6
       4  ??DataTable21_7
       4  ??DataTable21_8
       4  ??DataTable21_9
      16  ?_0
      12  ?_1
      12  ?_10
      12  ?_11
      12  ?_12
      16  ?_13
      16  ?_14
      16  ?_15
      12  ?_16
       8  ?_17
      20  ?_18
      12  ?_19
      12  ?_2
      12  ?_20
       8  ?_21
      16  ?_22
      24  ?_23
      24  ?_24
      36  ?_25
      36  ?_26
      12  ?_27
       8  ?_28
       8  ?_29
      12  ?_3
       8  ?_30
      12  ?_31
      12  ?_4
      12  ?_5
      12  ?_6
      16  ?_7
      16  ?_8
      12  ?_9
       4  APV_TITLE
     124  EditUprAPV
      16  EditUstAPV
      16  EditVidAPV
     228  KadrMenuFormat_upr_compAPV
     188  KadrMenuFormat_ustvidAPV
      68  PereinitUprListCompAPV
      68  PereinitUstListCompAPV
      68  PereinitVidListCompAPV
       4  SaveUprAPV
      28  UprCompAPV
      52  UprListCompAPV
      60  UpravlChooser1APVInKadr
      60  UpravlChooser2APVInKadr
       4  UpravlRedactorChoose1APV
       4  UpravlRedactorChoose2APV
      28  UstCompAPV
      52  UstListCompAPV
      24  VidCompAPV
      52  VidListCompAPV
     244  choose1TxtAPV
     176  choose2TxtAPV
      44  codecUstAPV
     296  copyAPVToRepozitar
      16  initENACmd_APV
      32  initIOCmd_APV
      16  initTLCmd_APV
      20  initTimersAPV
     264  initUstAPV
      48  ionsAPV
      92  isDISactiv_APV
       4  offsetIOCmdAPV
    1476  prepareUstAPV
      60  selectorUprStrAPV
      96  sub_menu_comp_APV
      84  sub_menu_upr_compAPV
     120  sub_menu_ust_compAPV
      36  sub_menu_vid_compAPV

 
     4 bytes in section .bss
   388 bytes in section .data
   472 bytes in section .rodata
 4 008 bytes in section .text
 
 4 008 bytes of CODE  memory
   472 bytes of CONST memory
   392 bytes of DATA  memory

Errors: none
Warnings: none
