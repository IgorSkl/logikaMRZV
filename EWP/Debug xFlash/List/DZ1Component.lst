###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:49:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\component\DZ1Component.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\DZ1Component.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\DZ1Component.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\Obj\DZ1Component.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\DZ1Component.c
      1          #ifndef _HIDE_COMPONENT
      2          /*
      3          #include <vcl.h>
      4          #include <strstrea.h>
      5          #include <math.h>
      6          #include <mem.h>
      7          #include <fstream.h>
      8          #include <strstrea.h>
      9          #include <iomanip.h>
     10          #pragma hdrstop
     11          
     12          #include "vmenuDis.h"
     13          */
     14          
     15          #include <stdio.h>
     16          #include <string.h>
     17          
     18          #include "bazisdef.h"
     19          #include "component\componentdef.h"
     20          #include "virtualMenu\systemmenudef.h"
     21          #include "virtualMenu\ustmanagerdef.h"
     22          #include "psuperVisor\psvisor_helpdef.h"
     23          
     24          #include "virtualMenu\textstreamfnc.h"
     25          #include "virtualMenu\systemmenufnc.h"
     26          #include "virtualMenu\ustmanagerfnc.h"
     27          #include "psuperVisor\psvisor_helpfnc.h"
     28          #include "virtualMenu\rangmanagerfnc.h"
     29          #include "logictimers\logictimersfnc.h"
     30          
     31          #include "virtualMenu\viewMenuList.h"
     32          
     33          #include "psupervisor\psupervisor.h"
     34          
     35          #include "toSpeedOptim.h"
     36          
     37          #include "..\bazis.h"
     38          
     39          #include "zonaVRT\zonaVRTdef.h"
     40          #include "zonaVRT\zonaVRTfnc.h"
     41          
     42          //код компонентов
     43          #define KOD_COMPONENT  DZ_COMP1
     44          //к-во ступеней
     45          #define CNT_STUPEN_DZ  5
     46          
     47          #endif // _HIDE_COMPONENT
     48          
     49          //РАСПРЕДЕЛЕНИЕ УСТАВОК  в менеджере уставок
     50          //уставка OF
     51          #define MNGUST_DZ1_OX1  0
     52          #define MNGUST_DZ1_OY1  1
     53          #define MNGUST_DZ1_OX2  2
     54          #define MNGUST_DZ1_OY2  3
     55          #define MNGUST_DZ1_OX3  4
     56          #define MNGUST_DZ1_OY3  5
     57          #define MNGUST_DZ1_OX4  6
     58          #define MNGUST_DZ1_OY4  7
     59          
     60          //уставка MF
     61          #define MNGUST_DZ1_MX1  8
     62          #define MNGUST_DZ1_MY1  9
     63          #define MNGUST_DZ1_MX2  10
     64          #define MNGUST_DZ1_MY2  11
     65          #define MNGUST_DZ1_MX3  12
     66          #define MNGUST_DZ1_MY3  13
     67          #define MNGUST_DZ1_MX4  14
     68          #define MNGUST_DZ1_MY4  15
     69          
     70          //MTZ DZ1
     71          #define MNGUST_DZ1_MTZ  16
     72          
     73          //уставка выдержки
     74          #define MNGVID_DZ1MF   17
     75          #define MNGVID_MDZ1MF  18
     76          #define MNGVID_DZ1OF   19
     77          
     78          //уставка управления
     79          #define MNGUPR_DZ1     20
     80          //к-во уставок в менеджере уставок
     81          #define MNGUST_DZ1_TOTAL  21
     82          //#define MNGUST_BOBV_DZ1  MNGUST_DZ1_TOTAL
     83          
     84          //РАСПРЕДЕЛЕНИЕ УСТАВОК  УПРАВЛЕНИЯ
     85          //ENA_DZ1
     86          #define ENA_DZ1_1  0
     87          //ENA_MDZ1MF
     88          #define ENA_DZ1_2  1
     89          //к-во ENA команд
     90          #define ENACMD_DZ1_TOTAL 2
     91          
     92          //РАСПРЕДЕЛЕНИЕ УСТАВОК в супервизоре
     93          //уставка сработки
     94          #define SPVSRAB_DZ1_MTZ    0
     95          //уставка возврата
     96          #define SPVVOZV_DZ1_MTZ    1
     97          
     98          //уставка SPV выход
     99          #define SPV_OUTA_DZ1_MTZ   2          
    100          #define SPV_OUTB_DZ1_MTZ   3
    101          #define SPV_OUTC_DZ1_MTZ   4
    102          //к-во уставок в супервизоре
    103          #define SPVUST_DZ1_TOTAL   5
    104          
    105          //---------------IO COMMAND------------------
    106          //РАСПРЕДЕЛЕНИЕ IO КОМАНД ДЛЯ DZ1
    107          //Стат блок ДЗ1
    108          #define IOCMD1_DZ1 0
    109          //Сраб ПО ДЗ1МФ
    110          #define IOCMD2_DZ1 1
    111          //Сраб ДЗ1МФ
    112          #define IOCMD3_DZ1 2
    113          //Сраб ПО МТЗ ДЗ1МФ
    114          #define IOCMD4_DZ1 3
    115          //Сраб МТЗ ДЗ1МФ
    116          #define IOCMD5_DZ1 4
    117          //Сраб ПО ДЗ1ОФ
    118          #define IOCMD6_DZ1 5
    119          //Сраб ДЗ1ОФ
    120          #define IOCMD7_DZ1 6
    121          //к-во IO команд
    122          #define IOCMD_DZ1_TOTAL   7
    123          
    124          //---------------TL COMMAND------------------
    125          //РАСПРЕДЕЛЕНИЕ TL КОМАНД ДЛЯ DZ1
    126          //ELOLDTRG_NCN_DZ1MF
    127          #define TLCMDOLDNCN_DZ1MF  0
    128          //ELOUTTRG_NCN_DZ1MF
    129          #define TLCMDOUTNCN_DZ1MF  1
    130          //ELOLDTRG_NCN_DZ1OF
    131          #define TLCMDOLDNCN_DZ1OF  2
    132          //ELOUTTRG_NCN_DZ1OF
    133          #define TLCMDOUTNCN_DZ1OF  3
    134          //ELOLDTRG_NCN_MDZ1MF
    135          #define TLCMDOLDNCN_MDZ1MF 4
    136          //ELOUTTRG_NCN_MDZ1MF
    137          #define TLCMDOUTNCN_MDZ1MF 5
    138          
    139          //DZ1_PO1
    140          #define TLCMD30_DZ1MF      6
    141          //DZ1_PO3
    142          #define TLCMD30_DZ1OF      7
    143          
    144          //к-во TL команд
    145          #define TLCMD_DZ1_TOTAL    8
    146          
    147          //--------------- TIMERS ------------------
    148          //РАСПРЕДЕЛЕНИЕ ТАЙМЕРОВ ДЛЯ DZ1
    149          //таймер DZ1_TIM1
    150          #define TIMER1_DZ1   0
    151          //таймер BO DZ1_TIM1
    152          #define TIMER1_BODZ1 1
    153          //таймер DZ1_TIM2
    154          #define TIMER2_DZ1   2
    155          //таймер BO DZ1_TIM2
    156          #define TIMER2_BODZ1 3
    157          //таймер DZ1_TIM3
    158          #define TIMER3_DZ1   4
    159          //таймер BO DZ1_TIM3
    160          #define TIMER3_BODZ1 5
    161          //к-во таймеров
    162          #define TIMERS_DZ1_TOTAL   6
    163          
    164          #ifndef _HIDE_COMPONENT
    165          
    166          #define _HIDE_COMPONENT
    167          #include "PRM1Component.c"
    168          
    169          extern COMPONENT_OBJ rpzcomponent_obj;//обект компонента для репозитария
    170          extern int  tmpUSTAVKI[];
    171          
    172          extern LineMenuItem sub_menu_DZ[];
    173          extern LineMenuItem sub_menu_tmp[];
    174          extern int  IndexUstSPV;//индекс уставок в супервизоре
    175          extern int  IndexIO;//индекс IO
    176          
    177          extern COMPONENT_OBJ  cnfCOMPONENT[];
    178          extern int  spvUSTAVKI[];//текущие уставки супервизора
    179          extern char *bitStringUNI[];
    180          extern int offsetUstMngPRM1;//смещение на уставки PRM1
    181          extern int isTriangleZonaBD[];//зона ДЗ треугольник-четырехугольник
    182          
    183          void PereinitUstListCompMTZ1(short flg);
    184          void UstListCompDZ1();
    185          void ustRedactorCompDZ1();
    186          void UstCompDZ1();
    187          
    188          void PereinitVidListCompDZ1(short flg);
    189          void VidListCompDZ1();
    190          void vidRedactorCompDZ1();
    191          void VidCompDZ1();
    192          
    193          void PereinitUprListCompDZ1(short flg);
    194          void UprListCompDZ1();
    195          void uprRedactorCompDZ1();
    196          void UprCompDZ1();
    197          short  KadrMenuFormat_upr_compDZ1(void *workCntr);
    198          int  initUstDZ1(char init);
    199          void  prepareUstDZ1(short idxC);
    200          char *selectorUprStrDZ1(short iBit, UNS_32 ustUpr);
    201          
    202          short  KadrMenuFormat_DZ1(void *workCntr);
    203          short  KadrMenuFormat_ustvidDZ(void *workCntr);
    204          
    205          void EditUprDZ1();
    206          void EditVidDZ1();
    207          void EditUstDZ1();
    208          int codecUstDZ1(char codec, short offset, int ust);
    209          void  logicDZ1(int idxC);
    210          int   isDISactiv_DZ1(int idxC);
    211          
    212          int  offsetIOCmdDZ1;//смещение для IO DZ1
    213          int isValidZonaDZ1OF;//флаг валидности зоны
    214          int isValidZonaDZ1MF;//флаг валидности зоны
    215          
    216          char DZ1_TITLE[] = "ДЗ1";
    217          
    218          IONAMESTATUS_COMPONENT ionsDZ1[IOCMD_DZ1_TOTAL] =
    219          {
    220            {
    221              1,//статус iocmd1
    222              "Стат блок ДЗ1"
    223            },
    224            {
    225              1,//статус iocmd2
    226              "Сраб ПО ДЗ1МФ"
    227            },
    228            {
    229              1,//статус iocmd3
    230              "Сраб ДЗ1МФ"
    231            },
    232            {
    233              1,//статус iocmd4
    234              "Сраб ПО МТЗ ДЗ1МФ"
    235            },
    236            {
    237              1,//статус iocmd5
    238              "Сраб МТЗ ДЗ1МФ"
    239            },
    240            {
    241              1,//статус iocmd6
    242              "Сраб ПО ДЗ1ОФ"
    243            },
    244            {
    245              1,//статус iocmd7
    246              "Сраб ДЗ1ОФ"
    247            }
    248          };
    249          
    250          LineMenuItem sub_menu_comp_DZ1[8] =
    251          {
    252            { DZ1_TITLE, NULL},//title
    253            { &CONTROL1_COMP, &sub_menu_DZ, typeMenuSub},//control_item, parent
    254            { "Уставки ДЗ1",    (void *)&UstListCompDZ1, typeMenuProg},
    255            { "Выдержки ДЗ1",   (void *)&VidListCompDZ1, typeMenuProg},
    256            { "Управление ДЗ1", (void *)&UprListCompDZ1, typeMenuProg},
    257            { NULL, NULL}
    258          };
    259          
    260          LineMenuItem sub_menu_ust_compDZ1[] =
    261          {
    262            { "Уставки ДЗ1", NULL},//title
    263            { &CONTROL2_COMP, &sub_menu_comp_DZ1, typeMenuList},//control_item, parent
    264          //  { "Уст ДЗ1",        (void *)&UstCompDZ1, typeMenuProg},
    265          //  { "Уст ДЗ1 вперед", (void *)&UstCompDZ1, typeMenuProg},
    266           // { "Уст ДЗ1 назад",  (void *)&UstCompDZ1, typeMenuProg},
    267          //  { "Уст ДЗ1 ПМ",     (void *)&UstCompDZ1, typeMenuProg},
    268            { NULL, NULL}
    269          
    270          };
    271          
    272          LineMenuItem sub_menu_vid_compDZ1[] =
    273          {
    274            { "Выдержки ДЗ1", NULL},//title
    275            { &CONTROL2_COMP, &sub_menu_comp_DZ1, typeMenuList},//control_item, parent
    276          //  { "Выдержка ДЗ1МФ",     (void *)&VidCompDZ1, typeMenuProg},
    277          //  { "Выдержка МТЗ ДЗ1МФ", (void *)&VidCompDZ1, typeMenuProg},
    278          //  { "Выдержка ДЗ1ОФ",     (void *)&VidCompDZ1, typeMenuProg},
    279            { NULL, NULL}
    280          
    281          };
    282          
    283          LineMenuItem sub_menu_upr_compDZ1[] =
    284          {
    285            { "Управл ДЗ1", NULL},//title
    286            { &CONTROL2_COMP, &sub_menu_comp_DZ1, typeMenuList},//control_item, parent
    287          //  { "Управл ДЗ1",        (void *)&UprCompDZ1, typeMenuProg},
    288          //  { "Управл МТЗ ДЗ1",    (void *)&UprCompDZ1, typeMenuProg},
    289            { NULL, NULL}
    290          
    291          };
    292          
    293          void PereinitUstListCompDZ1(short flg)
    294          {
    295          //переиниц
    296            //инит компонентного контроля
    297            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_ustvidDZ, sub_menu_ust_compDZ1);//инит control и формир кадра
    298            if(flg==0)//END
    299            {
    300              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW/2);//перейти на END
    301            }//if
    302          
    303            ViewDiskrMenuList();//вывести окно отображения
    304            ListPStr();//доступ к уставкам
    305          }//PereinitUstListComp2()
    306          
    307          void UstListCompDZ1()
    308          {
    309            SelectorMNGBAZA(0);//установка базу уставок
    310          
    311            SelectorSUBMENU(sub_menu_ust_compDZ1);//уcтановить текущее субменю
    312          
    313            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    314          
    315            SelectorFHOME(&PereinitUstListCompDZ1);//указатель на ф-цию HOME
    316            InitFHOME(1);//exe ф-цию HOME
    317          
    318            LanderUpDown();//wkl Up Down
    319          }//UstListCompDZ1()
    320          
    321          void UstCompDZ1()
    322          {
    323            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    324            PrepareEditMenu(sub_menu_ust_compDZ1);
    325            PassWord(EditUstDZ1);
    326          }//VidCompDZ1()
    327          
    328          void EditUstDZ1()
    329          {
    330          //редактировать уставку
    331            SystemEditUst(sub_menu_ust_compDZ1);//[LIGHTLINEMENU +1+SUBDATA].Line1, LIGHTLINEMENU);
    332          }//UstCompDZ1()
    333          
    334          short  KadrMenuFormat_ustvidDZ(void *pstr)
    335          {
    336           WorkControl *workCntr = (WorkControl *)pstr;
    337          //формирователь кадра
    338            char locTxt[50];
    339            RESET_COUNTER;//сброс счетчиков
    340            for(int i=0;; i++)
    341            {
    342          //критерий терминатора
    343              if(((LineMenuItem *)workCntr->userPoint)[i+1+SUBDATA].Line1==NULL)break;
    344              COMPARE_COUNTER
    345              {
    346                strcpy((char *)workCntr->twoString, (char *)( ((LineMenuItem *)workCntr->userPoint) )[i+1+SUBDATA].Line1);
    347                sprintf(locTxt, "   %d", getUstOffsetMngUSTAVKI(i));
    348                strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2, locTxt);
    349                return 1;//сравнить счетчики кадров
    350              }
    351            }//for
    352          
    353            return 1;
    354          }//KadrMenuFormat_ust_1(WorkControl *workCntr)
    355          
    356          //--------------------------------------------------
    357          
    358          void PereinitVidListCompDZ1(short flg)
    359          {
    360          //переиниц
    361            //инит компонентного контроля
    362            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_ustvidDZ, sub_menu_vid_compDZ1);//инит control и формир кадра
    363            if(flg==0)//END
    364            {
    365              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW);//перейти на END
    366            }//if
    367          
    368            ViewDiskrMenuList();//вывести окно отображения
    369            ListPStr();//доступ к уставкам
    370          }//PereinitUstListComp2()
    371          
    372          void VidListCompDZ1()
    373          {
    374            SelectorMNGBAZA(MNGVID_DZ1MF);//установка базы уставок
    375          
    376            SelectorSUBMENU(sub_menu_vid_compDZ1);//утановить текущее субменю
    377          
    378            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    379          
    380            SelectorFHOME(&PereinitVidListCompDZ1);//указатель на ф-цию HOME
    381            InitFHOME(1);//exe ф-цию HOME
    382          
    383            LanderUpDown();//wkl Up Down
    384          }//VidListCompDZ1()
    385          
    386          void VidCompDZ1()
    387          {
    388            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    389            PrepareEditMenu(sub_menu_vid_compDZ1);
    390          //  PassWord(EditVidAPV);
    391            EditVidDZ1();
    392          }//VidCompDZ1()
    393          
    394          void EditVidDZ1()
    395          {
    396          //редактировать уставку
    397            SystemEditUst(sub_menu_vid_compDZ1);//[LIGHTLINEMENU +1+SUBDATA].Line1, LIGHTLINEMENU);
    398          }//
    399          
    400          //--------------------------------------------------
    401          
    402          void PereinitUprListCompDZ1(short flg)
    403          {
    404          //переиниц
    405            //инит компонентного контроля
    406            TxtStreamInit(&CONTROL2_COMP, &KadrMenuFormat_upr_compDZ1, NULL);//инит control и формир кадра
    407            if(flg==0)//END
    408            {
    409              TxtStreamSetEnd(&CONTROL2_COMP, SIZE_PAGE_VIEW);//перейти на END
    410            }//if
    411          
    412            ViewDiskrMenuList();//вывести окно отображения
    413            ListPStr();//доступ к уставкам
    414          }//PereinitUstList
    415          
    416          void UprListCompDZ1()
    417          {
    418            SelectorMNGBAZA(MNGUPR_DZ1);//установка базы уставок
    419          
    420            SelectorSUBMENU(sub_menu_upr_compDZ1);//утановить текущее субменю
    421          
    422            SelectorTEXTCONTROL(&CONTROL2_COMP);//текущий control
    423          
    424            SelectorFHOME(&PereinitUprListCompDZ1);//указатель на ф-цию HOME
    425            InitFHOME(1);//exe ф-цию HOME
    426          
    427            LanderUpDown();//wkl Up Down
    428          }//VidListCompDZ1()
    429          
    430          void UprCompDZ1()
    431          {
    432            SelectorCRRLIGHTLINE();//найти подсвеченную строку текущего текст потока
    433            PrepareEditMenu(sub_menu_upr_compDZ1);
    434            PassWord(EditUprDZ1);
    435          
    436          }//UprCompMTZ1()
    437          
    438          void EditUprDZ1()
    439          {
    440          //редактировать уставку упр
    441            char *nameUpr = (char *)sub_menu_upr_compDZ1[LIGHTLINEMENU +1+SUBDATA].Line1;
    442            UpravlRedactor(nameUpr, LIGHTLINEMENU, &selectorUprStrDZ1);//редактировать уставку управления
    443          }//EditUprDZ1()
    444          
    445          short  KadrMenuFormat_upr_compDZ1(void *pstr)
    446          {
    447           WorkControl *workCntr = (WorkControl *)pstr;
    448          //формирователь кадра
    449            RESET_COUNTER;//сброс счетчиков
    450            for(int i=0;; i++)
    451            {
    452          //критерий терминатора
    453              char *nameUpr = (char *)sub_menu_upr_compDZ1[i+1+SUBDATA].Line1;
    454              if(nameUpr==NULL) break;
    455          
    456              COMPARE_COUNTER
    457              {
    458                strcpy((char *)workCntr->twoString, nameUpr);
    459          
    460                //отобразить уставку управления в кадре
    461                strcpy((char *)workCntr->twoString + sizeof(WorkVariantChar)/2,
    462                selectorUprStrDZ1(i, getCurrentMngUSTAVKI()));
    463          
    464                return 1;//сравнить счетчики кадров
    465              }
    466            }//for
    467          
    468            return 1;
    469          }//KadrMenuFormat_upr_compDZ1(WorkControl *workCntr)
    470          
    471          char *selectorUprStrDZ1(short iBit, UNS_32 ustUpr)
    472          {
    473            switch(iBit)
    474            {
    475          
    476            default:;
    477            }//switch
    478              if(NumBitCheckWord(iBit, &ustUpr)) return bitStringUNI[UNIUPR_WKL];
    479              return bitStringUNI[UNIUPR_OTKL];
    480          }//selectorUprStrDZ1(short ibit, UNS_32 ustUpr)
    481          
    482          int initUstDZ1(char init)
    483          {
    484            //инициал уставок
    485            if (init)
    486            {
    487          //уставка сработки
    488              tmpUSTAVKI[MNGUST_DZ1_OX1] = 100;
    489              tmpUSTAVKI[MNGUST_DZ1_OY1] = 101;
    490              tmpUSTAVKI[MNGUST_DZ1_OX2] = 102;
    491              tmpUSTAVKI[MNGUST_DZ1_OY2] = 103;
    492              tmpUSTAVKI[MNGUST_DZ1_OX3] = 104;
    493              tmpUSTAVKI[MNGUST_DZ1_OY3] = 105;
    494              tmpUSTAVKI[MNGUST_DZ1_OX4] = 106;
    495              tmpUSTAVKI[MNGUST_DZ1_OY4] = 107;
    496          
    497              tmpUSTAVKI[MNGUST_DZ1_MX1] = 110;
    498              tmpUSTAVKI[MNGUST_DZ1_MY1] = 111;
    499              tmpUSTAVKI[MNGUST_DZ1_MX2] = 112;
    500              tmpUSTAVKI[MNGUST_DZ1_MY2] = 113;
    501              tmpUSTAVKI[MNGUST_DZ1_MX3] = 114;
    502              tmpUSTAVKI[MNGUST_DZ1_MY3] = 115;
    503              tmpUSTAVKI[MNGUST_DZ1_MX4] = 116;
    504              tmpUSTAVKI[MNGUST_DZ1_MY4] = 117;
    505          
    506              tmpUSTAVKI[MNGUST_DZ1_MTZ] = 118;
    507          //уставка выдержки
    508              tmpUSTAVKI[MNGVID_DZ1MF]  = 50;
    509              tmpUSTAVKI[MNGVID_MDZ1MF] = 60;
    510              tmpUSTAVKI[MNGVID_DZ1OF]  = 70;
    511          //уставка управления
    512              tmpUSTAVKI[MNGUPR_DZ1] = 0;
    513          
    514            }//if
    515          
    516            IndexUstSPV += SPVUST_DZ1_TOTAL;//индекс уставок в супервизоре
    517            return MNGUST_DZ1_TOTAL;//к-во уставок в менеджере уставок
    518          }//initUstMTZ1(short mngUst, char init)
    519          
    520          //координаты вершин зоны сработки
    521          extern float X1, Y1, X2, Y2;
    522          extern float X3, Y3, X4, Y4;
    523          /*
    524          extern float X1OF_DZ1, Y1OF_DZ1, X2OF_DZ1, Y2OF_DZ1;
    525          extern float X3OF_DZ1, Y3OF_DZ1, X4OF_DZ1, Y4OF_DZ1;
    526          
    527          extern float X1MF_DZ1, Y1MF_DZ1, X2MF_DZ1, Y2MF_DZ1;
    528          extern float X3MF_DZ1, Y3MF_DZ1, X4MF_DZ1, Y4MF_DZ1;
    529          */
    530          
    531          void  prepareUstDZ1(short idxC)
    532          {
    533          float diskr = 0.001;
    534            //подготовка зоны и проверка на валидность
    535           int ust = codecUstDZ1(1, MNGUST_DZ1_OX1, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OX1));
    536           X1 = ((float)ust)*diskr;
    537           ust = codecUstDZ1(1, MNGUST_DZ1_OY1, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OY1));
    538           Y1 = ((float)ust)*diskr;
    539          
    540           ust = codecUstDZ1(1, MNGUST_DZ1_OX2, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OX2));
    541           X2 = ((float)ust)*diskr;
    542           ust = codecUstDZ1(1, MNGUST_DZ1_OY2, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OY2));
    543           Y2 = ((float)ust)*diskr;
    544          
    545          int ustx3 =
    546           ust = codecUstDZ1(1, MNGUST_DZ1_OX3, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OX3));
    547           X3 = ((float)ust)*diskr;
    548          int usty3 =
    549           ust = codecUstDZ1(1, MNGUST_DZ1_OY3, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OY3));
    550           Y3 = ((float)ust)*diskr;
    551          
    552          int ustx4 =
    553           ust = codecUstDZ1(1, MNGUST_DZ1_OX4, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OX4));
    554           X4 = ((float)ust)*diskr;
    555          int usty4 =
    556           ust = codecUstDZ1(1, MNGUST_DZ1_OY4, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_OY4));
    557           Y4 = ((float)ust)*diskr;
    558           //проверка треугольник или четырехугольник
    559           isTriangleZonaBD[0] = 0;//зона ДЗ четырехугольник
    560           if(ustx3==ustx4 && usty3==usty4) isTriangleZonaBD[0] = 1;//зона ДЗ треугольник
    561           if(isTriangleZonaBD[0]) isValidZonaDZ1OF = isZonaTrianMethodVRT( 0);//флаг валидности зоны
    562           else isValidZonaDZ1OF = isNewZonaMethodVRT( 0);//флаг валидности зоны
    563           
    564          // X1=X1MF_DZ1; Y1=Y1MF_DZ1; X2=X2MF_DZ1; Y2=Y2MF_DZ1;
    565          // X3=X3MF_DZ1; Y3=Y3MF_DZ1; X4=X4MF_DZ1; Y4=Y4MF_DZ1;
    566           ust = codecUstDZ1(1, MNGUST_DZ1_MX1, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MX1));
    567           X1 = ((float)ust)*diskr;
    568           ust = codecUstDZ1(1, MNGUST_DZ1_MY1, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MY1));
    569           Y1 = ((float)ust)*diskr;
    570          
    571           ust = codecUstDZ1(1, MNGUST_DZ1_MX2, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MX2));
    572           X2 = ((float)ust)*diskr;
    573           ust = codecUstDZ1(1, MNGUST_DZ1_MY2, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MY2));
    574           Y2 = ((float)ust)*diskr;
    575          
    576           ustx3 =
    577           ust = codecUstDZ1(1, MNGUST_DZ1_MX3, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MX3));
    578           X3 = ((float)ust)*diskr;
    579           usty3 =
    580           ust = codecUstDZ1(1, MNGUST_DZ1_MY3, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MY3));
    581           Y3 = ((float)ust)*diskr;
    582          
    583           ustx4 =
    584           ust = codecUstDZ1(1, MNGUST_DZ1_MX4, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MX4));
    585           X4 = ((float)ust)*diskr;
    586           usty4 =
    587           ust = codecUstDZ1(1, MNGUST_DZ1_MY4, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MY4));
    588           Y4 = ((float)ust)*diskr;
    589          
    590           isTriangleZonaBD[1] = 0;//зона ДЗ четырехугольник
    591           if(ustx3==ustx4 && usty3==usty4) isTriangleZonaBD[1] = 1;//зона ДЗ треугольник
    592           if(isTriangleZonaBD[1]) isValidZonaDZ1MF = isZonaTrianMethodVRT( 1);//флаг валидности зоны
    593           else isValidZonaDZ1MF = isNewZonaMethodVRT( 1);//флаг валидности зоны
    594           
    595            //подготовка ENA команд для клона
    596            //копировать ENA из WideENA в ENAcmd
    597            CopyWideENAToENAcmd(PrepareENACmd(idxC, MNGUPR_DZ1), ENACMD_DZ1_TOTAL);
    598          
    599            //подготовка уставок
    600              int tmpOffsetUSpv =
    601                          cnfCOMPONENT[idxC].offsetUstSpv;    //уставки SPV
    602              //уставка SPV сработки
    603              int tmp1 = 
    604              SPV_UST(SPVSRAB_DZ1_MTZ) = codecUstDZ1(1, MNGUST_DZ1_MTZ, getNativUstMngUSTAVKI(idxC, MNGUST_DZ1_MTZ));
    605              //уставка SPV возврата
    606              SPV_UST(SPVVOZV_DZ1_MTZ) = tmp1 - tmp1/20;//5%
    607          
    608          
    609            short tmpOffsetT    =
    610              getOffsetTimersCnf(idxC);   //компонент в конфигурации
    611          
    612                   //таймер 1
    613             setTimerPorog(tmpOffsetT+ TIMER1_DZ1, 
    614                    codecUstDZ1(1, MNGVID_DZ1MF, getNativUstMngUSTAVKI(idxC, MNGVID_DZ1MF)));
    615          
    616                   //таймер 2 BO
    617            setTimerPorog(tmpOffsetT+ TIMER1_BODZ1, 10);
    618          
    619                  //таймер 3
    620            setTimerPorog(tmpOffsetT+ TIMER2_DZ1, 
    621                    codecUstDZ1(1, MNGVID_MDZ1MF, getNativUstMngUSTAVKI(idxC, MNGVID_MDZ1MF)));
    622          
    623                  //таймер 4 BO
    624            setTimerPorog(tmpOffsetT+ TIMER2_BODZ1, 10);
    625          
    626                 //таймер 5
    627            setTimerPorog(tmpOffsetT+ TIMER3_DZ1, 
    628                    codecUstDZ1(1, MNGVID_DZ1OF, getNativUstMngUSTAVKI(idxC, MNGVID_DZ1OF)));
    629          
    630                //таймер 6 BO
    631            setTimerPorog(tmpOffsetT+ TIMER3_BODZ1, 10);
    632          
    633          }//prepareUstMTZ1(short idxC)
    634          
    635          int initIOCmd_DZ1()
    636          {
    637            //инициал IO команд
    638            offsetIOCmdDZ1 = IndexIO;//смещение для IO DZ1
    639            return commonInitIOCmd(IOCMD_DZ1_TOTAL);
    640          }
    641          
    642          int initTLCmd_DZ1()
    643          {
    644            //инициал TL команд
    645            return commonInitTLCmd(TLCMD_DZ1_TOTAL);
    646          }//initTLCmd_DZ1()
    647          
    648          int initENACmd_DZ1()
    649          {
    650            //инициал ENA команд
    651            return commonInitENACmd(ENACMD_DZ1_TOTAL);
    652          }//initENACmd_DZ1()
    653          
    654          void initTimersDZ1(short idxC)
    655          {
    656            //запрос и инициал таймеров
    657            commonInitTimers(TIMERS_DZ1_TOTAL);//должен быть первым!
    658          
    659          }//initTimersDZ1()
    660          
    661          int codecUstDZ1(char codec, short offset, int ust)
    662          //codec=0-кодировать
    663          //codec=1-раскодировать
    664          {
    665            //кодировать-раскодировать уставку
    666          int grzHI = 0;//верх граница
    667          int grzLOW= 0;//низ граница
    668          int step  = 1;//шаг
    669            switch(offset)
    670            {
    671             //уставки
    672             case MNGUST_DZ1_MTZ:
    673                 grzHI = 1000000;//верх граница
    674                 grzLOW= 0;//низ граница
    675                 step  = 1;//шаг
    676             break;
    677          
    678             case MNGUST_DZ1_OX1:   case MNGUST_DZ1_OY1:
    679             case MNGUST_DZ1_OX2:   case MNGUST_DZ1_OY2:
    680             case MNGUST_DZ1_OX3:   case MNGUST_DZ1_OY3:
    681             case MNGUST_DZ1_OX4:   case MNGUST_DZ1_OY4:
    682          
    683             case MNGUST_DZ1_MX1:   case MNGUST_DZ1_MY1:
    684             case MNGUST_DZ1_MX2:   case MNGUST_DZ1_MY2:
    685             case MNGUST_DZ1_MX3:   case MNGUST_DZ1_MY3:
    686             case MNGUST_DZ1_MX4:   case MNGUST_DZ1_MY4:
    687                 grzHI = 1000000;//верх граница
    688                 grzLOW= -1000000;//низ граница
    689                 step  = 1;//шаг
    690             break;
    691          
    692            //выдержки
    693             case MNGVID_DZ1MF:
    694             case MNGVID_MDZ1MF:
    695             case MNGVID_DZ1OF:
    696                 grzHI = 2000000;//верх граница
    697                 grzLOW= 0;//низ граница
    698                 step  = 1;//шаг
    699             break;
    700          
    701             default:return ust;//уставка управления
    702            }//switch
    703          
    704            if(codec) return ust*step;
    705          //раскодировать уставку
    706            if(ust<grzLOW) return ERROR_UST;//-ust;
    707            if(ust>grzHI)  return ERROR_UST;//-ust;
    708            return ust/step;
    709          }//codecUstDZ1(char *buf, short offset, int ust)
    710          
    711          int isDISactiv_DZ1(int idxC)
    712          {
    713           //активность Регистратора ДИС
    714            return 0;//нет активности
    715          }//isDISactiv_DZ1(int idxC)
    716          
    717          char copyDZ1ToRepozitar(char packet)
    718          {
    719            memset(&rpzcomponent_obj, 0, sizeof(COMPONENT_OBJ));//стереть старое
    720          //копировать компонент в репозитарий
    721            rpzcomponent_obj.componentEnable = 1;//разрешение компонента
    722            rpzcomponent_obj.kodC   = KOD_COMPONENT;         //код компонента
    723            rpzcomponent_obj.packet = 0;    //номер пакетного компонента
    724            rpzcomponent_obj.permanent = 0; //перманентный компонент
    725          
    726            strcpy(rpzcomponent_obj.nameComponent,  DZ1_TITLE);       //имя компонента
    727            rpzcomponent_obj.sub_menu_component =  sub_menu_comp_DZ1;//меню компонента
    728          
    729            rpzcomponent_obj.cntClon     = CNT_STUPEN_DZ;   //max к-во клонов
    730            rpzcomponent_obj.numClon     = 1;//номер клона
    731            rpzcomponent_obj.workToSignal = 0; //Работа на сигнал
    732          
    733            rpzcomponent_obj.initUstMng     = initUstDZ1;    //инициал уставок
    734            rpzcomponent_obj.prepareUstSpv  = prepareUstDZ1;//подготовка уставок
    735            rpzcomponent_obj.initIOCmd      = initIOCmd_DZ1;      //инициал IO команд
    736            rpzcomponent_obj.initTLCmd      = initTLCmd_DZ1;      //инициал TL команд
    737            rpzcomponent_obj.initENACmd     = initENACmd_DZ1;     //инициал ENA команд
    738            rpzcomponent_obj.bo_bvCmd       = NULL; //настройка БО БВ команд
    739            rpzcomponent_obj.isDISactiv     = isDISactiv_DZ1; //активность Регистратора ДИС
    740            rpzcomponent_obj.setBOBVtimer   = NULL; //инициал таймеров БО БВ
    741          
    742            rpzcomponent_obj.nameStatusIO = ionsDZ1;          //имена и статус команд IO
    743            rpzcomponent_obj.initTimers   = initTimersDZ1;    //запрос и инициал таймеров
    744            rpzcomponent_obj.logic        = logicDZ1;         //логика компонента
    745          
    746            rpzcomponent_obj.codecUst = codecUstDZ1;   //кодировать-раскодировать уставку
    747          
    748            return 0;//не пакетная регистрация
    749          }//
    750          
    751          #endif // _HIDE_COMPONENT
    752          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EditUprDZ1
         8   -> UpravlRedactor
       8   EditUstDZ1
         8   -> SystemEditUst
       8   EditVidDZ1
         8   -> SystemEditUst
      24   KadrMenuFormat_upr_compDZ1
        24   -> getCurrentMngUSTAVKI
        24   -> selectorUprStrDZ1
        24   -> strcpy
      72   KadrMenuFormat_ustvidDZ
        72   -> getUstOffsetMngUSTAVKI
        72   -> sprintf
        72   -> strcpy
       8   PereinitUprListCompDZ1
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   PereinitUstListCompDZ1
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   PereinitVidListCompDZ1
         8   -> ListPStr
         8   -> TxtStreamInit
         8   -> TxtStreamSetEnd
         8   -> ViewDiskrMenuList
       8   UprCompDZ1
         8   -> PassWord
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   UprListCompDZ1
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
       8   UstCompDZ1
         8   -> PassWord
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   UstListCompDZ1
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
       8   VidCompDZ1
         8   -> EditVidDZ1
         8   -> PrepareEditMenu
         8   -> SelectorCRRLIGHTLINE
       8   VidListCompDZ1
         8   -> InitFHOME
         8   -> LanderUpDown
         8   -> SelectorFHOME
         8   -> SelectorMNGBAZA
         8   -> SelectorSUBMENU
         8   -> SelectorTEXTCONTROL
      20   codecUstDZ1
        20 __aeabi_idiv
      24   copyDZ1ToRepozitar
        24   -> __aeabi_memset
        24   -> strcpy
       8   initENACmd_DZ1
         8   -> commonInitENACmd
       8   initIOCmd_DZ1
         8   -> commonInitIOCmd
       8   initTLCmd_DZ1
         8   -> commonInitTLCmd
       8   initTimersDZ1
         8   -> commonInitTimers
       0   initUstDZ1
       0   isDISactiv_DZ1
      48   prepareUstDZ1
        48   -> CopyWideENAToENAcmd
        48   -> PrepareENACmd
        48   -> codecUstDZ1
        48   -> getNativUstMngUSTAVKI
        48   -> getOffsetTimersCnf
        48   -> isNewZonaMethodVRT
        48   -> isZonaTrianMethodVRT
        48   -> setTimerPorog
        48 __aeabi_idiv
      16   selectorUprStrDZ1
        16   -> NumBitCheckWord


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_27
       4  ??DataTable19_28
       4  ??DataTable19_29
       4  ??DataTable19_3
       4  ??DataTable19_30
       4  ??DataTable19_31
       4  ??DataTable19_32
       4  ??DataTable19_33
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      16  ?_0
      16  ?_1
      12  ?_10
       8  ?_11
      12  ?_2
      20  ?_3
      16  ?_4
      16  ?_5
      12  ?_6
      12  ?_7
      16  ?_8
      16  ?_9
       4  DZ1_TITLE
      52  EditUprDZ1
      16  EditUstDZ1
      16  EditVidDZ1
     160  KadrMenuFormat_upr_compDZ1
     188  KadrMenuFormat_ustvidDZ
      68  PereinitUprListCompDZ1
      68  PereinitUstListCompDZ1
      68  PereinitVidListCompDZ1
      28  UprCompDZ1
      52  UprListCompDZ1
      28  UstCompDZ1
      52  UstListCompDZ1
      24  VidCompDZ1
      52  VidListCompDZ1
     244  codecUstDZ1
     296  copyDZ1ToRepozitar
      16  initENACmd_DZ1
      32  initIOCmd_DZ1
      16  initTLCmd_DZ1
      20  initTimersDZ1
     300  initUstDZ1
      56  ionsDZ1
      12  isDISactiv_DZ1
       4  isValidZonaDZ1MF
       4  isValidZonaDZ1OF
       4  offsetIOCmdDZ1
    1616  prepareUstDZ1
      60  selectorUprStrDZ1
      96  sub_menu_comp_DZ1
      36  sub_menu_upr_compDZ1
      36  sub_menu_ust_compDZ1
      36  sub_menu_vid_compDZ1

 
    12 bytes in section .bss
   264 bytes in section .data
   172 bytes in section .rodata
 3 620 bytes in section .text
 
 3 620 bytes of CODE  memory
   172 bytes of CONST memory
   276 bytes of DATA  memory

Errors: none
Warnings: none
