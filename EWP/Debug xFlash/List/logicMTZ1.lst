###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Oct/2015  12:49:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\component\logicMTZ1.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\logicMTZ1.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -Ohs
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\logicMTZ1.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\logicMTZ1.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\logicMTZ1.c
      1          
      2          #include <stdio.h>
      3          #include <string.h>
      4          
      5          #include "bazisdef.h"
      6          #include "component\componentdef.h"
      7          #include "psuperVisor\psvisor_helpdef.h"
      8          
      9          #include "logictimers\logictimersmac.h"
     10          
     11          #include "logictimers\logictimersfnc.h"
     12          
     13          #include "..\bazis.h"
     14          
     15          #include "toSpeedOptim.h"
     16          
     17          #define _HIDE_COMPONENT
     18          #include "MTZ1Component.c"
     19          #include "PRM1Component.c"
     20          
     21          extern int GlobalPO1;
     22          extern int GlobalPO2;
     23          extern int GlobalPO3;
     24          extern int GlobalPO4;
     25          extern int GlobalLevelI_ABC[];
     26          extern int GlobalLevelUL_ABC[];
     27          //сектора направл МТЗ
     28          extern int sectorMTZ_IA_V, sectorMTZ_IA_N;
     29          extern int sectorMTZ_IB_V, sectorMTZ_IB_N;
     30          extern int sectorMTZ_IC_V, sectorMTZ_IC_N;
     31          
     32          extern COMPONENT_OBJ  cnfCOMPONENT[];//конфигурация
     33          extern int  logMassTimer[];
     34          extern int  ENAcmd[];
     35          extern int  spvUSTAVKI[];//текущие уставки супервизора
     36          extern int   WideCmdRTBuffer[];
     37          extern int   tempLog[];
     38          //неисправность цепей напр
     39          extern int  isFAILU_COMMON_MTZ;
     40          extern int offsetSPVCmdPRM1;//смещение для SPV PRM1
     41          
     42          extern int flag_max_monitoring;//макс параметры сработки
     43          //extern int timing;
     44          
     45          void  logicMTZ1(int idxC) @ "Fast_function"
     46          {
     47          //логика компонента
     48              int tmpOffsetT    =
     49                          cnfCOMPONENT[idxC].offsetTimers;   //таймера компонента в конфигурации
     50              int tmpOffsetIO   =
     51                          cnfCOMPONENT[idxC].offsetIOCmd;    //IO команды
     52              int tmpOffsetENA  =
     53                          cnfCOMPONENT[idxC].offsetENACmd;    //ENA команды
     54              int tmpOffsetUSpv =
     55                          cnfCOMPONENT[idxC].offsetUstSpv;    //уставки SPV
     56              int tmpOffsetTL   =
     57                          cnfCOMPONENT[idxC].offsetTLCmd;    //TL команды
     58          
     59          //неисправность цепей напр MTZ
     60          //isFAILU_INVERT
     61          //если в момент активизации ПО МТЗ сигнала НЦН не было, то после активизации ПО
     62          //сигнал НЦН уже не учитывается
     63          
     64          // TL_LOGIC(TLCMDFU_MTZ1) =
     65                  //ELOUTTRG_NCN_MTZ1
     66            //      TL_LOGIC(TLCMDOUTNCN_MTZ1)^1;
     67          
     68              //SPV_UST(
     69          
     70            int tt1 = SPV_UST(SPVSRABUST_MTZ1);
     71            int tt2 = SPV_UST(SPVVOZVUST_MTZ1);
     72          
     73            detectorLevelUP3F(GlobalLevelI_ABC,
     74                                               tmpOffsetUSpv+SPVSRABUST_MTZ1,
     75                                               tmpOffsetUSpv+SPVVOZVUST_MTZ1,
     76                                               tmpOffsetUSpv+SPV_OUTA_MTZ1);
     77          
     78           int LocalPO_MTZ1 = SPV_UST(SPV_OUTA_MTZ1) |
     79                              SPV_UST(SPV_OUTB_MTZ1) |
     80                              SPV_UST(SPV_OUTC_MTZ1);
     81          
     82            detectorLevelUP3F(GlobalLevelI_ABC, 
     83                                               tmpOffsetUSpv+SPVSRABUST_MTZ1_V,
     84                                               tmpOffsetUSpv+SPVVOZVUST_MTZ1_V,
     85                                               tmpOffsetUSpv+SPV_OUTA_MTZ1_V);
     86          
     87           int LocalPO_MTZ1_V =    (
     88          	                 (sectorMTZ_IA_V & 
     89                                    SPV_UST(SPV_OUTA_MTZ1_V) &
     90                                    (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_U005)^1)
     91                                    ) |
     92          	                 (sectorMTZ_IB_V &
     93                                    SPV_UST(SPV_OUTB_MTZ1_V) &
     94                                    (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_U005)^1)
     95                                    )|
     96          	                 (sectorMTZ_IC_V &
     97                                    SPV_UST(SPV_OUTC_MTZ1_V) &
     98                                    (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_U005)^1)
     99                                    )
    100                                    );
    101                              //isFAILU_INVERT
    102          //                    TL_LOGIC(TLCMDFU_MTZ1);
    103          
    104          
    105            detectorLevelUP3F(GlobalLevelI_ABC,
    106                                               tmpOffsetUSpv+SPVSRABUST_MTZ1_N,
    107                                               tmpOffsetUSpv+SPVVOZVUST_MTZ1_N,
    108                                               tmpOffsetUSpv+SPV_OUTA_MTZ1_N);
    109          
    110           int LocalPO_MTZ1_N =    (
    111          	                 (sectorMTZ_IA_N & 
    112                                    SPV_UST(SPV_OUTA_MTZ1_N) &
    113                                    (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_U005)^1)
    114                                    ) |
    115          	                 (sectorMTZ_IB_N &
    116                                    SPV_UST(SPV_OUTB_MTZ1_N) &
    117                                    (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_U005)^1)
    118                                    )|
    119          	                 (sectorMTZ_IC_N &
    120                                    SPV_UST(SPV_OUTC_MTZ1_N) &
    121                                    (SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_U005)^1)
    122                                    )
    123                                    );
    124                              //isFAILU_INVERT
    125          //                    TL_LOGIC(TLCMDFU_MTZ1);
    126          
    127          
    128          //MTZ1_PN
    129          //токи
    130            detectorLevelUP3F(GlobalLevelI_ABC,
    131                                               tmpOffsetUSpv+SPVSRABUST_MTZ1_PN,
    132                                               tmpOffsetUSpv+SPVVOZVUST_MTZ1_PN,
    133                                               tmpOffsetUSpv+SPV_OUTA_MTZ1_PN);
    134          
    135          //напряж
    136            detectorLevelDOWN3F(GlobalLevelUL_ABC,
    137                                               tmpOffsetUSpv+SPVSRABUST_MTZ1_UPN,
    138                                               tmpOffsetUSpv+SPVVOZVUST_MTZ1_UPN,
    139                                               tmpOffsetUSpv+SPV_OUTA_MTZ1_UPN);
    140          
    141          //если одно из напряжений UA UB UC больше уставки то MTZ1_PN запрещается
    142           int LocalPO_MTZ1_PN =   (
    143                                   (SPV_UST(SPV_OUTA_MTZ1_PN) &
    144                                    SPV_UST(SPV_OUTA_MTZ1_UPN)) |
    145                                    (SPV_UST(SPV_OUTB_MTZ1_PN) &
    146                                     SPV_UST(SPV_OUTB_MTZ1_UPN)) |
    147                                    (SPV_UST(SPV_OUTC_MTZ1_PN) &
    148                                     SPV_UST(SPV_OUTC_MTZ1_UPN))
    149                                    );
    150                              //isFAILU_INVERT
    151          //                    TL_LOGIC(TLCMDFU_MTZ1);
    152          
    153              //*******MTZ1********
    154              int commonMTZ1 =
    155                               //CMD1_MTZ1
    156                               (IO_LOGIC(IOCMD1_MTZ1)^1) &
    157                               ENA_LOGIC(ENA_MTZ1_1);// ENA_MTZ1;
    158          
    159             int locPO_MTZ1 = 
    160                           commonMTZ1 &
    161                           //ПО МТЗ1
    162                           (GlobalPO1 | LocalPO_MTZ1) &
    163                           //MTZ1_PROSTAJA
    164                           (((ENA_LOGIC(ENA_MTZ1_HALF1) |
    165                             ENA_LOGIC(ENA_MTZ1_HALF2))^1) |
    166                           //разрешить если все UL меньше 005
    167                            (
    168                               SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTA_U005) &
    169                               SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTB_U005) &
    170                               SPV_USTOUT(offsetSPVCmdPRM1+SPV_OUTC_U005)
    171                             ) |
    172                           //разрешить если НЦН
    173                  //ELOUTTRG_NCN_MTZ1
    174                  TL_LOGIC(TLCMDOUTNCN_MTZ1)
    175          //                   (
    176                              //isFAILU_INVERT
    177            //                  TL_LOGIC(TLCMDFU_MTZ1)^1
    178              //               )
    179                            );
    180          
    181             int locPO_MTZ1_V = 
    182                           commonMTZ1 &
    183                           //ПО МТЗ2 ВПД
    184                           (GlobalPO2 | LocalPO_MTZ1_V)&
    185                           //MTZ1_NAPRAVL
    186                           ENA_LOGIC(ENA_MTZ1_HALF1) &
    187                           //MTZ1 WPERED
    188                           ENA_LOGIC(ENA_MTZ1_2) &
    189                  //ELOUTTRG_NCN_MTZ1
    190                  (TL_LOGIC(TLCMDOUTNCN_MTZ1)^1);
    191          
    192             int locPO_MTZ1_N = 
    193                           commonMTZ1 &
    194                           //ПО МТЗ2 НЗД
    195                           (GlobalPO3 | LocalPO_MTZ1_N)&
    196                           //MTZ1_NAPRAVL
    197                           ENA_LOGIC(ENA_MTZ1_HALF1) &
    198                           //MTZ1 NAZAD
    199                           ENA_LOGIC(ENA_MTZ1_3) &
    200                  //ELOUTTRG_NCN_MTZ1
    201                  (TL_LOGIC(TLCMDOUTNCN_MTZ1)^1);
    202          
    203             int locPO_MTZ1_PN = 
    204                           commonMTZ1 &
    205                           //ПО МТЗ2 ПН
    206                           (GlobalPO4 | LocalPO_MTZ1_PN)&
    207                           //MTZ1_PUSKN
    208                           ENA_LOGIC(ENA_MTZ1_HALF2) &
    209                  //ELOUTTRG_NCN_MTZ1
    210                  (TL_LOGIC(TLCMDOUTNCN_MTZ1)^1);
    211          
    212           int tmp1 =
    213              locPO_MTZ1_V | 
    214              locPO_MTZ1_N | 
    215              locPO_MTZ1_PN;
    216               //MTZ1_PO2
    217              // TL_LOGIC(TLCMD1_MTZ1) |
    218               //MTZ1_PO3
    219              // TL_LOGIC(TLCMD2_MTZ1) |
    220               //MTZ1_PO4
    221              // TL_LOGIC(TLCMD3_MTZ1);
    222          
    223          // int tmp2 =
    224            //  isFAILU_COMMON_MTZ;
    225          
    226          //триг по восх фронту
    227          //TRG_FRONT(set, clr, old, out)
    228          //                                    ELOLDTRG_NCN_MTZ1  ELOUTTRG_NCN_MTZ1
    229            TRG_FRONT(tmp1, isFAILU_COMMON_MTZ, TLCMDOLDNCN_MTZ1, TLCMDOUTNCN_MTZ1)
    230          
    231            locPO_MTZ1_V &=
    232                  //ELOUTTRG_NCN_MTZ1
    233                  (TL_LOGIC(TLCMDOUTNCN_MTZ1)^1);
    234          
    235            locPO_MTZ1_N &=
    236                  //ELOUTTRG_NCN_MTZ1
    237                  (TL_LOGIC(TLCMDOUTNCN_MTZ1)^1);
    238          
    239            locPO_MTZ1_PN &=
    240                  //ELOUTTRG_NCN_MTZ1
    241                  (TL_LOGIC(TLCMDOUTNCN_MTZ1)^1);
    242          
    243              int max_tmp =
    244              //L1 MTZ1
    245              LSIGNAL_TIMER(TIMER1_MTZ1)  = //MTZ1_TIM1
    246              //Сраб ПО МТЗ1
    247              IO_LOGIC(IOCMD2_MTZ1) =
    248              locPO_MTZ1;
    249          
    250              if(max_tmp) flag_max_monitoring |= MAXMONITORING_COLLECT;//макс параметры сработки
    251          
    252              max_tmp =
    253              //L2 MTZ1_V
    254              LSIGNAL_TIMER(TIMER2_MTZ1)  = //MTZ1_TIM2
    255              //MTZ1_PO2
    256              TL_LOGIC(TLCMD1_MTZ1) =
    257              //Сраб ПО МТЗ1 ВПД
    258              IO_LOGIC(IOCMD3_MTZ1) =
    259              locPO_MTZ1_V;
    260          
    261              if(max_tmp) flag_max_monitoring |= MAXMONITORING_COLLECT;//макс параметры сработки
    262          
    263              max_tmp =
    264              //L3 MTZ1_N
    265              LSIGNAL_TIMER(TIMER3_MTZ1)  = //MTZ1_TIM3
    266              //MTZ1_PO3
    267              TL_LOGIC(TLCMD2_MTZ1) = 
    268              //Сраб ПО МТЗ1 НЗД
    269              IO_LOGIC(IOCMD4_MTZ1) =
    270              locPO_MTZ1_N;
    271          
    272              if(max_tmp) flag_max_monitoring |= MAXMONITORING_COLLECT;//макс параметры сработки
    273          
    274              max_tmp =
    275              //L4 MTZ1_PN
    276              LSIGNAL_TIMER(TIMER4_MTZ1)  = //MTZ1_TIM4
    277              //MTZ1_PO4
    278              TL_LOGIC(TLCMD3_MTZ1) = 
    279              //Сраб ПО МТЗ1 ПН
    280              IO_LOGIC(IOCMD5_MTZ1) =
    281              locPO_MTZ1_PN;
    282          
    283              if(max_tmp) flag_max_monitoring |= MAXMONITORING_COLLECT;//макс параметры сработки
    284          
    285           int tmp = //L5
    286              LSIGNAL_TIMER(TIMER_BO_MTZ1)  =
    287                  PLOG_TIMER(TIMER1_MTZ1)| //MTZ1_TIM1
    288                  PLOG_TIMER(TIMER2_MTZ1)| //MTZ1_TIM2
    289                  PLOG_TIMER(TIMER3_MTZ1)| //MTZ1_TIM3
    290                  PLOG_TIMER(TIMER4_MTZ1); //MTZ1_TIM4
    291          
    292              max_tmp =
    293              //Сраб МТЗ1
    294              IO_LOGIC(IOCMD6_MTZ1) =
    295                    ILOG_TIMER(TIMER_BO_MTZ1)|tmp;
    296          
    297              if(max_tmp) flag_max_monitoring |= MAXMONITORING_FIX;//макс параметры сработки
    298          
    299          }//logicMTZ1(short idxC)
    300          
    301          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   logicMTZ1
        56   -> ILogTimer
        56   -> PLogTimer
        56   -> detectorLevelDOWN3F
        56   -> detectorLevelUP3F


   Section sizes:

   Bytes  Function/Label
   -----  --------------
    1040  logicMTZ1

 
 1 040 bytes in section Fast_function
 
 1 040 bytes of CODE memory

Errors: none
Warnings: 2
