###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2015  11:05:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\IAR projects\HR1_0100_00_I720_new2\main.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\main.c" -D _STATIC_MEMORY_BOOT
#        -lcN "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o
#        "D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\main.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\main.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\main.c
      1          #include "libraries.h"
      2          #include "constants.h"
      3          #include "type_definition.h"
      4          #include "macroses_privat.h"
      5          #include "variables_global.h"
      6          #include "functions_global.h"
      7          
      8          #include "lpc_types.h"
      9          #include "lpc_irq_fiq.h"
     10          #include "lpc_arm922t_cp15_driver.h"
     11          
     12          #include "lpc32xx_hstimer.h"
     13          #include "lpc32xx_ssp.h"
     14          #include "lpc32xx_gpio.h"
     15          
     16          #include "lpc32xx_intc_driver.h"
     17          #include "lpc32xx_clkpwr_driver.h"
     18          
     19          #include "arm926ej_cp15_drv.h"
     20          #include "ttbl.h"
     21          
     22          #include "psuperVisor\supermanager.h"
     23          
     24          #include "callbackelement\callbackelementdef.h"
     25          
     26          #include "logictimers\logictimersfnc.h"
     27          #include "callbackelement\callbackelementfnc.h"
     28          
     29          extern UNS_32 *WideLogActual;//командный массив расшир логики
     30          extern UNS_32 pActualCMD[];//текущие плюс расшир логика
     31          
     32          void start_settings(void);
     33          void  InitializeInterruptSystem();
     34          void hstimer_user_interrupt(void);
     35          
     36          // Prototype for external IRQ handler
     37          void lpc32xx_irq_handler(void);
     38          
     39          HSTIMER_REGS_T *hst_regptr;  // Pointer to HSTIMER registers
     40          SSP_REGS_T     *ssp1_regptr; // Pointer to SSP1 registers
     41          GPIO_REGS_T    *gpio_regptr; // Pointer to GPIO registers
     42          
     43          int timing = 0;  
     44          int timingLoad = 0;  
     45          int cicling = 0;  
     46          
     47          int GlobalPO1  = 0;
     48          int GlobalPO2  = 0;
     49          int GlobalPO3  = 0;
     50          int GlobalPO4 = 0;
     51          
     52          int trigReg  = 0;//заполнить рег
     53          
     54          int GlobalLevel[3] = {0, 0, 0};
     55          int GlobalLevelI_ABC[3]  = {70, 70, 70};
     56          int GlobalLevelUL_ABC[3] = {70, 70, 70};
     57          int GlobalLevelUF_ABC[3] = {70, 70, 70};
     58          int GlobalLevel_UCM;
     59          int GlobalLevel_ICM;
     60          int GlobalLevel_ULAPV;
     61          int GlobalLevel_3I0;
     62          int GlobalLevel_3U0;
     63          
     64          UNS_32 rawDVLow;//сырые ДВ
     65          UNS_32 rawDVMidd;//сырые ДВ
     66          UNS_32 rawDVHi;//сырые ДВ
     67          UNS_32 oldDV1,  oldDV2,  oldDV3,  oldDV4,  oldDV5,  oldDV6;
     68          UNS_32 oldDV7,  oldDV8,  oldDV9,  oldDV10, oldDV11, oldDV12;//сырые ДВ
     69          UNS_32 oldDV13, oldDV14, oldDV15, oldDV16;
     70          
     71          UNS_32 oldDV17,  oldDV18,  oldDV19,  oldDV20,  oldDV21,  oldDV22;
     72          UNS_32 oldDV23,  oldDV24,  oldDV25,  oldDV26,  oldDV27,  oldDV28;//сырые ДВ
     73          UNS_32 oldDV29,  oldDV30,  oldDV31,  oldDV32;
     74          
     75          UNS_32 oldDV33,  oldDV34,  oldDV35,  oldDV36;
     76          int acdcDV;//флаг пост перем для ДВ
     77          
     78          char stringList[48][32];//массив строк для просмотра
     79          
     80          void ici_hdw_init(void);
     81          
     82          /*************************************************************************
     83           * Function Name: main
     84           * Parameters: none
     85           *
     86           * Return: none
     87           *
     88           * Description: main
     89           *
     90           *************************************************************************/
     91          int main(void)
     92          {
     93            //total_data_send.diagnostyka = 0;
     94           // long lResDiag;
     95          #ifdef _STATIC_MEMORY_BOOT
     96            /************************************************************/
     97            //Перевірка контрольної суми програми
     98            /************************************************************/
     99            {
    100              unsigned short sum = 0;
    101              unsigned char *point = ((unsigned char *)&__checksum_begin);
    102              for (unsigned int i = ((unsigned int)&__checksum_end -(unsigned int)&__checksum_begin +1); i > 0; i--)
    103                sum += *point++;
    104              if (sum != (unsigned short)__checksum)
    105              {
    106                if (sum != (unsigned short)__checksum) _SET_STATE(resurs_diagnostica, ERROR_EXTERNAL_FLASH_MEMORY_BIT);
    107                while(1);
    108              }
    109            }
    110            /************************************************************/
    111          #endif
    112           // if (external_SRAM_OK != EXTERNAL_SRAM_OK)
    113          //    _SET_STATE(total_data_send.diagnostyka, ERROR_EXTERNAL_SRAM_BIT);
    114          
    115            start_settings();
    116          
    117            ici_hdw_init();//инит межпроцессорного обмена
    118          
    119            while(1)
    120            {
    121          #ifdef _STATIC_MEMORY_BOOT
    122          
    123              /*if ((periodical_tasks & TASK_TEST_FLASH_MEMORY) != 0)*/
    124              {
    125                /************************************************************/
    126                //Перевірка контрольної суми програми
    127                /************************************************************/
    128                unsigned short sum = 0;
    129                unsigned char *point = ((unsigned char *)&__checksum_begin);
    130                for (unsigned int i = ((unsigned int)&__checksum_end -(unsigned int)&__checksum_begin +1); i > 0; i--)
    131                {
    132                  sum += *point++;
    133                  periodical_operations();
    134                }
    135                if (sum != (unsigned short)__checksum) _SET_STATE(resurs_diagnostica, ERROR_EXTERNAL_FLASH_MEMORY_BIT);
    136                else _CLEAR_STATE(resurs_diagnostica, ERROR_EXTERNAL_FLASH_MEMORY_BIT);
    137                /************************************************************/
    138          
    139          //      periodical_tasks &= (unsigned int)(~TASK_TEST_FLASH_MEMORY);
    140              }
    141              /*else*/ periodical_operations();
    142          #else
    143              periodical_operations();
    144          #endif
    145            }
    146          
    147            //c_entry();
    148          //  return 0;
    149          
    150          //  start_settings();
    151          
    152          //  hsuart_send_data();
    153          
    154            // main loop
    155          //  restart_resurs_count = 0xff;
    156          } // main(void)
    157          
    158          void start_settings(void)
    159          {
    160            // Init MMU
    161            CP15_Mmu(FALSE);            // Disable MMU
    162            // Privileged permissions  User permissions AP
    163            // Read-only               Read-only        0
    164            CP15_SysProt(FALSE);
    165            CP15_RomProt(TRUE);
    166            CP15_InitMmuTtb(TtSB,TtTB); // Build L1 and L2 Translation tables
    167            CP15_SetTtb(L1Table);       // Set base address of the L1 Translation table
    168            CP15_SetDomain( (DomainManager << 2*1) | (DomainClient << 0)); // Set domains
    169            CP15_Mmu(TRUE);             // Enable MMU
    170            CP15_Cache(TRUE);           // Enable ICache,DCache
    171          
    172            /* Disable interrupts in ARM core */
    173            disable_irq_fiq();
    174          
    175            InitializeInterruptSystem();
    176          
    177            // Enable IRQ interrupts in the ARM core
    178            enable_irq_fiq();
    179          
    180            initCallBackElement();//инит callBackElement
    181            initTimers();//инит таймеров
    182            initTimers_WL();//TIMERS INIT РЛ
    183          
    184            WideLogActual = &(pActualCMD[DQUADRO]);//командный массив расшир логики(вторая половина)
    185          
    186            ResetSystemMenu();//сбросить сист меню
    187             
    188            timing = 0;  
    189          
    190          }//start_settings(void)
    191          
    192          /**********************************************
    193          ИНИЦИАЛИЗАЦИЯ СИСТЕМЫ ПРЕРЫВАНИЙ
    194          **********************************************/
    195          void  InitializeInterruptSystem()
    196          {
    197            /* Initialize interrupt system */
    198            int_initialize(0xFFFFFFFF);
    199          
    200            /* Install standard IRQ dispatcher at ARM IRQ vector */
    201            int_install_arm_vec_handler(IRQ_VEC, (PFV) lpc32xx_irq_handler);
    202            /* Install standard FIQ dispatcher at ARM IRQ vector */
    203            int_install_arm_vec_handler(FIQ_VEC, (PFV) lpc32xx_fiq_handler);
    204          
    205          //---------------------HSTIMER------------------------------------
    206            /* Install HSTIMER interrupt handler as a IRQ interrupts */
    207            int_install_irq_handler(IRQ_HSTIMER,
    208                                    (PFV) hstimer_user_interrupt);
    209          
    210          
    211            // Save address of register block
    212            hst_regptr  = HSTIMER;
    213            gpio_regptr = GPIO;
    214          
    215            // LEDs off
    216            //gpio_regptr->p3_outp_clr = LED1 | LED2;
    217            //gpio_regptr->p1_dir_set = LED3;
    218          
    219            // Enable timer system clock
    220            clkpwr_clk_en_dis(CLKPWR_HSTIMER_CLK, 1);
    221          
    222            // Disable high speed timer and match timers
    223            hst_regptr->hstim_ctrl = HSTIM_CTRL_RESET_COUNT;
    224            hst_regptr->hstim_mctrl = 0;
    225            hst_regptr->hstim_ctrl = 0;
    226          
    227            // Clear pending interrupts
    228            hst_regptr->hstim_int = (HSTIM_MATCH0_INT |
    229                                     HSTIM_MATCH1_INT | HSTIM_MATCH2_INT |
    230                                     HSTIM_GPI_06_INT | HSTIM_RTC_TICK_INT);
    231          
    232            hst_regptr->hstim_mctrl = HSTIM_CNTR_MCR_MTCH(0) | HSTIM_CNTR_MCR_RESET(0);
    233            hst_regptr->hstim_pmatch = 13-1;
    234            hst_regptr->hstim_match[0] = 1000;//1ms 000;
    235          
    236            hst_regptr->hstim_ctrl = HSTIM_CTRL_COUNT_ENAB;//start hstimer
    237          
    238            // Enable interrupt in the interrupt controller
    239            int_enable(IRQ_HSTIMER);
    240          
    241          //---------------------SSP1------------------------------------
    242            ssp1_regptr = SSP1; // Pointer to SSP1 registers
    243            // Enable ssp1 system clock
    244            clkpwr_clk_en_dis(CLKPWR_SSP1_CLK, 1);
    245            //конфигурация IO
    246            gpio_regptr->p2_mux_clr = P2_GPIO04_SSEL1;
    247            gpio_regptr->p2_dir_set = P2_DIR_GPIO(4);
    248            gpio_regptr->p3_outp_set = P3_STATE_GPIO(4);
    249          
    250            /* The MISO, MOSI, and SCK signals are controlled by the SSP1 */
    251            gpio_regptr->p_mux_set = (P_SPI2DATAIO_MOSI1 |
    252                                      P_SPI2DATAIN_MISO1 | P_SPI2CLK_SCK1);
    253          
    254            ssp1_regptr->cpsr = SSP_CPSR_CPDVSR(16);//8);//4);//4);//prescale
    255            //ssp_clk / ((cr0_div + 1) * prescale);
    256            //prescale = 16; SCR = 4 - 1.25MGz
    257            ssp1_regptr->cr0 = SSP_CR0_DSS(8) |//data size 8 bit
    258                               SSP_CR0_FRF_SPI |//Motorola SPI mode
    259                               SSP_CR0_SCR(4);//serial clock rate
    260          
    261            // Default Master mode
    262            // Disable SSP1
    263            ssp1_regptr->cr1 &= ~SSP_CR1_SSP_ENABLE;
    264          
    265            // interr handler SSP1 IRQ
    266            //int_install_irq_handler(IRQ_SSP1, (PFV) ssp1_user_interrupt);
    267          
    268            // Enable interrupt in the interrupt controller
    269            //int_enable(IRQ_SSP1);
    270            // Clear interrupt in the interrupt controller
    271            //int_clear(IRQ_SSP1);
    272          
    273            // Enable SSP1
    274            ssp1_regptr->cr1 |= SSP_CR1_SSP_ENABLE;
    275          
    276          }//InitializeInterruptSystem()
    277          
    278          void  LanderPStr(){}
    279          void ResetPStr(){}
    280          void ResetUpDown(){}
    281          void LanderUpDown(){}
    282          void  ResetAllButton(){}
    283          void ListPStr(){}
    284          
    285          
    286          
    287          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   InitializeInterruptSystem
         8   -> clkpwr_clk_en_dis
         8   -> int_enable
         8   -> int_initialize
         8   -> int_install_arm_vec_handler
         8   -> int_install_irq_handler
       0   LanderPStr
       0   LanderUpDown
       0   ListPStr
       0   ResetAllButton
       0   ResetPStr
       0   ResetUpDown
       0   disable_irq_fiq
       0   enable_irq_fiq
      16   main
        16   -> ici_hdw_init
        16   -> periodical_operations
        16   -> start_settings
       8   start_settings
         8   -> CP15_Cache
         8   -> CP15_InitMmuTtb
         8   -> CP15_Mmu
         8   -> CP15_RomProt
         8   -> CP15_SetDomain
         8   -> CP15_SetTtb
         8   -> CP15_SysProt
         8   -> InitializeInterruptSystem
         8   -> ResetSystemMenu
         8   -> disable_irq_fiq
         8   -> enable_irq_fiq
         8   -> initCallBackElement
         8   -> initTimers
         8   -> initTimers_WL


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      12  GlobalLevel
      12  GlobalLevelI_ABC
      12  GlobalLevelUF_ABC
      12  GlobalLevelUL_ABC
       4  GlobalLevel_3I0
       4  GlobalLevel_3U0
       4  GlobalLevel_ICM
       4  GlobalLevel_UCM
       4  GlobalLevel_ULAPV
       4  GlobalPO1
       4  GlobalPO2
       4  GlobalPO3
       4  GlobalPO4
     416  InitializeInterruptSystem
       4  LanderPStr
       4  LanderUpDown
       4  ListPStr
       4  ResetAllButton
       4  ResetPStr
       4  ResetUpDown
       4  acdcDV
       4  cicling
      20  disable_irq_fiq
      20  enable_irq_fiq
       4  external_SRAM_OK
       4  gpio_regptr
       4  hst_regptr
     268  main
       4  oldDV1
       4  oldDV10
       4  oldDV11
       4  oldDV12
       4  oldDV13
       4  oldDV14
       4  oldDV15
       4  oldDV16
       4  oldDV17
       4  oldDV18
       4  oldDV19
       4  oldDV2
       4  oldDV20
       4  oldDV21
       4  oldDV22
       4  oldDV23
       4  oldDV24
       4  oldDV25
       4  oldDV26
       4  oldDV27
       4  oldDV28
       4  oldDV29
       4  oldDV3
       4  oldDV30
       4  oldDV31
       4  oldDV32
       4  oldDV33
       4  oldDV34
       4  oldDV35
       4  oldDV36
       4  oldDV4
       4  oldDV5
       4  oldDV6
       4  oldDV7
       4  oldDV8
       4  oldDV9
       4  rawDVHi
       4  rawDVLow
       4  rawDVMidd
       4  resurs_diagnostica
       4  ssp1_regptr
     128  start_settings
    1536  stringList
       4  temp
       4  timing
       4  timingLoad
       4  trigReg
       4  validation_code_and_memory_width

 
 1 780 bytes in section .bss
    36 bytes in section .data
     4 bytes in section .noinit
   940 bytes in section .text
     4 bytes in section VC_and_MW
 
   940 bytes of CODE  memory
     4 bytes of CONST memory
 1 820 bytes of DATA  memory

Errors: none
Warnings: 1
