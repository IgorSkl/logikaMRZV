###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2015  11:05:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\IAR projects\HR1_0100_00_I720_new2\component\logicAPV.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\component\logicAPV.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=VFP9-S --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -Ohs
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\logicAPV.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\logicAPV.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\component\logicAPV.c
      1          
      2          #include "bazisdef.h"
      3          #include "component\componentdef.h"
      4          #include "psuperVisor\psvisor_helpdef.h"
      5          
      6          #include "logictimers\logictimersmac.h"
      7          
      8          #include "logictimers\logictimersfnc.h"
      9          
     10          #include "..\bazis.h"
     11          
     12          #include "toSpeedOptim.h"
     13          
     14          #define _HIDE_COMPONENT
     15          #include "PRM1Component.c"
     16          #include "APVComponent.c"
     17          
     18          extern int GlobalPO1;
     19          extern int GlobalPO2;
     20          extern int GlobalPO3;
     21          extern int GlobalPO4;
     22          extern int GlobalLevelUF_ABC[];
     23          extern int GlobalLevelUL_ABC[];
     24          extern int GlobalLevel_ULAPV;
     25          
     26          extern COMPONENT_OBJ  cnfCOMPONENT[];//конфигурация
     27          extern int  logMassTimer[];
     28          extern int  ENAcmd[];
     29          extern int  spvUSTAVKI[];//текущие уставки супервизора
     30          extern int   WideCmdRTBuffer[];
     31          extern int   tempLog[];
     32          extern int offsetIOCmdPRM1;//смещение для IO PRM1
     33          //глобальный сброс всех таймеров
     34          extern int  globalTimerReset;
     35          extern int puskAPV;
     36          //Синхронизация АПВ
     37          extern int speed_angle_APV;
     38          extern int angle_unbalance_APV;
     39          extern int voltage_difference_APV;
     40          
     41          
     42          void  logicAPV(int idxC) @ "Fast_function"
     43          {
     44            //return;//123456
     45            
     46          //логика компонента
     47            int tmpOffsetT    =
     48              cnfCOMPONENT[idxC].offsetTimers;   //таймера компонента в конфигурации
     49            int tmpOffsetIO   =
     50              cnfCOMPONENT[idxC].offsetIOCmd;    //IO команды
     51            int tmpOffsetENA  =
     52              cnfCOMPONENT[idxC].offsetENACmd;    //ENA команды
     53             int tmpOffsetUSpv =
     54                          cnfCOMPONENT[idxC].offsetUstSpv;    //уставки SPV
     55            int tmpOffsetTL   =
     56              cnfCOMPONENT[idxC].offsetTLCmd;    //TL команды
     57          
     58            //БЕЗ КОНТРОЛЯ
     59            int ENA_BK = (ENA_LOGIC(ENA_APV_HALF1)|
     60                          ENA_LOGIC(ENA_APV_HALF2)|
     61                          ENA_LOGIC(ENA_APV_HALF3)
     62                         )^1;
     63            //НЕТ ЛИНИИ ЕСТЬ ШИНА
     64            int ENA_OL_NC = ((ENA_LOGIC(ENA_APV_HALF1)^1)|
     65                              ENA_LOGIC(ENA_APV_HALF2)|
     66                              ENA_LOGIC(ENA_APV_HALF3)
     67                            )^1;
     68            //ЕСТЬ ЛИНИЯ НЕТ ШИНЫ
     69            int ENA_NL_OC = ( ENA_LOGIC(ENA_APV_HALF1)|
     70                             (ENA_LOGIC(ENA_APV_HALF2)^1)|
     71                              ENA_LOGIC(ENA_APV_HALF3)
     72                            )^1;
     73            //ЕСТЬ ЛИНИЯ ЕСТЬ ШИНА НЕТ СИН
     74            int ENA_NL_NC_BS = ((ENA_LOGIC(ENA_APV_HALF1)^1)|
     75                                (ENA_LOGIC(ENA_APV_HALF2)^1)|
     76                                 ENA_LOGIC(ENA_APV_HALF3)
     77                               )^1;
     78            //ЕСТЬ ЛИНИЯ ЕСТЬ ШИНА ЕСТЬ СИН
     79            int ENA_NL_NC_NS = ( ENA_LOGIC(ENA_APV_HALF1)|
     80                                 ENA_LOGIC(ENA_APV_HALF2)|
     81                                (ENA_LOGIC(ENA_APV_HALF3)^1)
     82                               )^1;
     83          
     84          
     85            //Faza A
     86            int ENA_FA = (ENA_LOGIC(ENA_APV_HALF4)|
     87                          ENA_LOGIC(ENA_APV_HALF5)
     88                         )^1;
     89            //Faza B
     90            int ENA_FB = ((ENA_LOGIC(ENA_APV_HALF4)^1)|
     91                           ENA_LOGIC(ENA_APV_HALF5)
     92                            )^1;
     93            //Faza C
     94            int ENA_FC = ( ENA_LOGIC(ENA_APV_HALF4)|
     95                          (ENA_LOGIC(ENA_APV_HALF5)^1)
     96                            )^1;
     97          
     98            detectorLevelUP3F(GlobalLevelUF_ABC,
     99                                               tmpOffsetUSpv+SPVSRABUST_PO1_APV,
    100                                               tmpOffsetUSpv+SPVVOZVUST_PO1_APV,
    101                                               tmpOffsetUSpv+SPV_OUT1A_APV);
    102          
    103            detectorLevelDOWN3F(GlobalLevelUF_ABC,
    104                                               tmpOffsetUSpv+SPVSRABUST_PO2_APV,
    105                                               tmpOffsetUSpv+SPVVOZVUST_PO2_APV,
    106                                               tmpOffsetUSpv+SPV_OUT2A_APV);
    107          
    108            detectorLevelUP(GlobalLevel_ULAPV,
    109                                               tmpOffsetUSpv+SPVSRABUST_PO3_APV,
    110                                               tmpOffsetUSpv+SPVVOZVUST_PO3_APV,
    111                                               tmpOffsetUSpv+SPV_OUT3_APV);
    112          
    113            detectorLevelDOWN(GlobalLevel_ULAPV,
    114                                               tmpOffsetUSpv+SPVSRABUST_PO4_APV,
    115                                               tmpOffsetUSpv+SPVVOZVUST_PO4_APV,
    116                                               tmpOffsetUSpv+SPV_OUT4_APV);
    117          
    118           int LocalPO1_APV = SPV_UST(SPV_OUT1A_APV) &
    119                              SPV_UST(SPV_OUT1B_APV) &
    120                              SPV_UST(SPV_OUT1C_APV);
    121          
    122           //  int tt1= SPV_UST(SPV_OUT1A_APV);
    123          //   int tt2= SPV_UST(SPV_OUT1B_APV);
    124            // int tt3= SPV_UST(SPV_OUT1C_APV);
    125          
    126           int LocalPO2_APV = SPV_UST(SPV_OUT2A_APV) &
    127                              SPV_UST(SPV_OUT2B_APV) &
    128                              SPV_UST(SPV_OUT2C_APV);
    129          
    130           int LocalPO3_APV = SPV_UST(SPV_OUT3_APV);
    131           int LocalPO4_APV = SPV_UST(SPV_OUT4_APV);
    132          
    133          //Синхронизация АПВ 
    134          if(voltage_difference_APV<0) voltage_difference_APV = -voltage_difference_APV;
    135            detectorLevelDOWN(voltage_difference_APV,
    136                                               tmpOffsetUSpv+SPVSRABUST_POVD_APV,
    137                                               tmpOffsetUSpv+SPVVOZVUST_POVD_APV,
    138                                               tmpOffsetUSpv+SPV_OUT_POVD_APV);
    139          
    140          //   int tt1 = SPV_UST(SPVSRABUST_POVD_APV);
    141          //   int tt2 = SPV_UST(SPVVOZVUST_POVD_APV);
    142          //   int tt3 = SPV_UST(SPV_OUT_POVD_APV);
    143          
    144          //angle_unbalance
    145          if(angle_unbalance_APV<0) angle_unbalance_APV = -angle_unbalance_APV;
    146            detectorLevelDOWN(angle_unbalance_APV,
    147                                               tmpOffsetUSpv+SPVSRABUST_POAU_APV,
    148                                               tmpOffsetUSpv+SPVVOZVUST_POAU_APV,
    149                                               tmpOffsetUSpv+SPV_OUT_POAU_APV);
    150          
    151          //speed_angle
    152            detectorLevelDOWN(speed_angle_APV,
    153                                               tmpOffsetUSpv+SPVSRABUST_POSA_APV,
    154                                               tmpOffsetUSpv+SPVVOZVUST_POSA_APV,
    155                                               tmpOffsetUSpv+SPV_OUT_POSA_APV);
    156          
    157            //int tt1 = SPV_UST(SPVSRABUST_POAU_APV);
    158           // int tt2 = SPV_UST(SPVVOZVUST_POAU_APV);
    159           // int tt4 = SPV_UST(SPV_OUT_POAU_APV);
    160           // int tt5 = SPV_UST(SPV_OUT_POVD_APV);
    161            
    162           int LocalSYNCHR_APV = SPV_UST(SPV_OUT_POVD_APV) &
    163                                 SPV_UST(SPV_OUT_POAU_APV) ;
    164            //                     SPV_UST(SPV_OUT_POSA_APV);
    165          
    166           //  int tt3 = SPV_UST(SPVVOZVUST_POSA_APV);
    167          
    168          //  int tt1 = IO_LOGIC(IOCMD2_APV);
    169           // if(tt1){
    170            //  tt1=0;
    171           // }
    172          //  int tt1 = ENA_LOGIC(ENA_APV_1);
    173          //  int tt2 = ENA_LOGIC(ENA_APV_2);
    174          
    175          #include "inc_apv2.ci"
    176          #include "inc_apv1.ci"
    177          #include "inc_apv3_1.ci"
    178          #include "inc_apv3_2.ci"
    179          
    180          //  int tt1 = IO_LOGIC(IOCMD2_APV);
    181          //  if(tt1){
    182          //    tt1=0;
    183          //  }
    184            
    185          //   tt1 = IO_LOGIC(IOCMD4_APV);
    186          //  if(tt1){
    187          //    tt1=0;
    188          //  }
    189            
    190            //L13
    191            //BVCMD_APV1
    192            TL_LOGIC(TLCMD11_APV) =
    193                 tmp1 |
    194                 tmp2 |
    195                 tmp3 |
    196                 tmp4 |
    197                 tmp5;
    198          
    199          #include "inc_apv4_1.ci"
    200          #include "inc_apv4_2.ci"
    201          
    202            //L13
    203            //BVCMD_APV2
    204            TL_LOGIC(TLCMD12_APV) =
    205                 tmp1 |
    206                 tmp2 |
    207                 tmp3 |
    208                 tmp4 |
    209                 tmp5;
    210          
    211          }//logicAPV(short idxC)
    212          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      96   logicAPV
        96   -> FLogTimer
        96   -> FLogTimerRES
        96   -> ILogTimer
        96   -> ILogTimerRES
        96   -> detectorLevelDOWN
        96   -> detectorLevelDOWN3F
        96   -> detectorLevelUP
        96   -> detectorLevelUP3F


   Section sizes:

   Bytes  Function/Label
   -----  --------------
    1756  logicAPV

 
 1 756 bytes in section Fast_function
 
 1 756 bytes of CODE memory

Errors: none
Warnings: 3
