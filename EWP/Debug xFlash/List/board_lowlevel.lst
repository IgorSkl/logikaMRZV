###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2015  11:04:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\IAR projects\HR1_0100_00_I720_new2\NXP\board_lowlevel.c
#    Command line =  
#        "D:\IAR projects\HR1_0100_00_I720_new2\NXP\board_lowlevel.c" -D
#        _STATIC_MEMORY_BOOT -lcN "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\List\" -o "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\Debug xFlash\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e
#        --fpu=VFP9-S --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.40\arm\INC\c\DLib_Config_Normal.h" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\NXP\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\LIB\include\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\inc\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\Igor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\mal\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\component\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\psupervisor\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\virtualMenu\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\callbackElement\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\logictimers\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\zonaVRT\" -I "D:\IAR
#        projects\HR1_0100_00_I720_new2\EWP\..\" --cpu_mode arm -On
#        --use_c++_inline
#    List file    =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\List\board_lowlevel.lst
#    Object file  =  
#        D:\IAR projects\HR1_0100_00_I720_new2\EWP\Debug
#        xFlash\Obj\board_lowlevel.o
#
###############################################################################

D:\IAR projects\HR1_0100_00_I720_new2\NXP\board_lowlevel.c
      1          /*************************************************************************
      2           *
      3           *    Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2006
      6           *
      7           *    File name   : iram_init.c
      8           *    Description : Low level init device code
      9           *
     10           *    History :
     11           *    1. Date        : December, 15 2006
     12           *       Author      : Stanimir Bonev
     13           *       Description : Create
     14           *
     15           *    $Revision: 30926 $
     16           **************************************************************************/
     17          #include <intrinsics.h>
     18          #include <NXP/iolpc3240.h>
     19          
     20          extern void test_external_SRAM(void);
     21          
     22          /*************************************************************************
     23           * Function Name: LowLevelInit
     24           * Parameters: none
     25           *
     26           * Return: none
     27           *
     28           * Description: This function is used for low level initialization
     29           *
     30           *************************************************************************/
     31          void LowLevelInit(void)
     32          {
     33            // init clock
     34            SYSCLK_CTRL = 0x50<<2;
     35            // Set PER_CLK and HCLK dividers
     36            HCLKDIV_CTRL = 0x0000003D;
     37            // init H PLL
     38            HCLKPLL_CTRL = 0x0001601E;
     39            // Wait until PLL lock
     40            while(!HCLKPLL_CTRL_bit.PLL_LOCK);
     41            // Switch to PLL output and out form the self-refresh of the SDRAM
     42            __REG32 Reg  = PWR_CTRL;
     43            Reg &= ~((1 << 9) | (1 << 8));
     44            Reg |=   (1 << 2);
     45            PWR_CTRL = Reg;
     46            
     47            // Disable 397 PLL
     48            PLL397_CTRL_bit.PLL397_STATUS = 1;
     49            
     50            // Init EMC Controller
     51            EMCControl_bit.E = 1; // EMCControl - EMC Enable
     52            EMCConfig_bit.N = 0;  // EMCConfig - liitle endian
     53            SDRAMCLK_CTRL = 0;    // SDRAMCLK_CTRL
     54            
     55            EMCAHBControl0 = 0;   // EMCAHBControl0   
     56            EMCAHBControl2 = 0;   // EMCAHBControl2   
     57            EMCAHBControl3 = 0;   // EMCAHBControl3   
     58            EMCAHBControl4 = 0;   // EMCAHBControl4   
     59            
     60            EMCStaticExtendedWait = 0;    // EXTENDEDWAIT - 16 clock cycles (POR reset value)
     61          
     62            EMCStaticWaitWen0 = 0;        // EMCStaticWaitWen0
     63            EMCStaticWaitOen0 = 0;        // EMCStaticWaitOen0
     64            EMCStaticWaitRd0  = 7;       // EMCStaticWaitRd0
     65            EMCStaticWaitWr0  = 6;       // EMCStaticWaitWr0
     66            EMCStaticConfig0  = 0x82;     // EMCStaticConfig0
     67            EMCStaticWaitTurn0 = 4;
     68          
     69            EMCStaticWaitWen1 = 0;        // EMCStaticWaitWen1
     70            EMCStaticWaitOen1 = 0;        // EMCStaticWaitOen1
     71            EMCStaticWaitRd1  = 1;       // EMCStaticWaitRd1
     72            EMCStaticWaitWr1  = 1;       // EMCStaticWaitWr1
     73            EMCStaticConfig1  = 0x82;     // EMCStaticConfig1
     74            EMCStaticWaitTurn1 = 0;
     75            
     76            EMCStaticWaitWen2 = 0;   // EMCStaticWaitWen1
     77            EMCStaticWaitOen2 = 0;   // EMCStaticWaitOen1
     78            EMCStaticWaitRd2  = 3;   // EMCStaticWaitRd1
     79            EMCStaticWaitWr2  = 3;   // EMCStaticWaitWr1
     80            EMCStaticConfig2  = 0x81;// EMCStaticConfig1
     81            EMCStaticWaitTurn2 = 1;
     82          
     83            EMCStaticWaitWen3 = 4;        // EMCStaticWaitWen3
     84            EMCStaticWaitOen3 = 0;        // EMCStaticWaitOen3
     85            EMCStaticWaitRd3  = 0xf;      // EMCStaticWaitRd3
     86            EMCStaticWaitWr3  = 0xf;       // EMCStaticWaitWr3
     87            EMCStaticConfig3  = 0x80;//x82;     // EMCStaticConfig3
     88            EMCStaticWaitTurn3 = 10;
     89            
     90            BOOT_MAP_bit.MAP = 1;             // iRAM 0x00000000
     91          
     92            /**********************/
     93            //Тестуємо зовнішню SRAM
     94            /**********************/
     95            test_external_SRAM();
     96            /**********************/
     97            
     98            return;
     99          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LowLevelInit
         8   -> test_external_SRAM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     696  LowLevelInit
       4  _A_BOOT_MAP
       4  _A_EMCAHBControl0
       4  _A_EMCAHBControl2
       4  _A_EMCAHBControl3
       4  _A_EMCAHBControl4
       4  _A_EMCConfig
       4  _A_EMCControl
       4  _A_EMCStaticConfig0
       4  _A_EMCStaticConfig1
       4  _A_EMCStaticConfig2
       4  _A_EMCStaticConfig3
       4  _A_EMCStaticExtendedWait
       4  _A_EMCStaticWaitOen0
       4  _A_EMCStaticWaitOen1
       4  _A_EMCStaticWaitOen2
       4  _A_EMCStaticWaitOen3
       4  _A_EMCStaticWaitRd0
       4  _A_EMCStaticWaitRd1
       4  _A_EMCStaticWaitRd2
       4  _A_EMCStaticWaitRd3
       4  _A_EMCStaticWaitTurn0
       4  _A_EMCStaticWaitTurn1
       4  _A_EMCStaticWaitTurn2
       4  _A_EMCStaticWaitTurn3
       4  _A_EMCStaticWaitWen0
       4  _A_EMCStaticWaitWen1
       4  _A_EMCStaticWaitWen2
       4  _A_EMCStaticWaitWen3
       4  _A_EMCStaticWaitWr0
       4  _A_EMCStaticWaitWr1
       4  _A_EMCStaticWaitWr2
       4  _A_EMCStaticWaitWr3
       4  _A_HCLKDIV_CTRL
       4  _A_HCLKPLL_CTRL
       4  _A_PLL397_CTRL
       4  _A_PWR_CTRL
       4  _A_SDRAMCLK_CTRL
       4  _A_SYSCLK_CTRL

 
 152 bytes in section .noinit (abs)
 696 bytes in section .text
 
 696 bytes of CODE memory
   0 bytes of DATA memory (+ 152 bytes shared)

Errors: none
Warnings: none
